
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08006618  08006618  00007618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000068  08006db4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  08006db4  00008bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6fa  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ee  00000000  00000000  00017792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00019c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7c  00000000  00000000  0001ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c30  00000000  00000000  0001b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011051  00000000  00000000  000342e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c179  00000000  00000000  00045335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e14ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004acc  00000000  00000000  000e1534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e6000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006600 	.word	0x08006600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006600 	.word	0x08006600

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f004 ff94 	bl	80054e8 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005c0:	f240 4202 	movw	r2, #1026	@ 0x402
 80005c4:	2100      	movs	r1, #0
 80005c6:	4827      	ldr	r0, [pc, #156]	@ (8000664 <esp_at_command+0xc4>)
 80005c8:	f004 ff8e 	bl	80054e8 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff fe11 	bl	80001f4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <esp_at_command+0xc8>)
 80005dc:	f003 fd4c 	bl	8004078 <HAL_UART_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d031      	beq.n	800064a <esp_at_command+0xaa>
        return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e037      	b.n	800065c <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <esp_at_command+0xc4>)
 80005ee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005f6:	d302      	bcc.n	80005fe <esp_at_command+0x5e>
            return -2;
 80005f8:	f06f 0301 	mvn.w	r3, #1
 80005fc:	e02e      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80005fe:	491b      	ldr	r1, [pc, #108]	@ (800066c <esp_at_command+0xcc>)
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <esp_at_command+0xc4>)
 8000602:	f004 fff5 	bl	80055f0 <strstr>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <esp_at_command+0x72>
            return -3;
 800060c:	f06f 0302 	mvn.w	r3, #2
 8000610:	e024      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000612:	4917      	ldr	r1, [pc, #92]	@ (8000670 <esp_at_command+0xd0>)
 8000614:	4813      	ldr	r0, [pc, #76]	@ (8000664 <esp_at_command+0xc4>)
 8000616:	f004 ffeb 	bl	80055f0 <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <esp_at_command+0xc4>)
 8000622:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000626:	461a      	mov	r2, r3
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <esp_at_command+0xc4>)
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f005 f871 	bl	8005712 <memcpy>
            *length = cb_data.length;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <esp_at_command+0xc4>)
 8000632:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	801a      	strh	r2, [r3, #0]

            break;
 800063a:	e00a      	b.n	8000652 <esp_at_command+0xb2>
        }

        time_out -= 10;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3b0a      	subs	r3, #10
 8000640:	b29b      	uxth	r3, r3
 8000642:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f001 f927 	bl	8001898 <HAL_Delay>
    while(time_out > 0)
 800064a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dccc      	bgt.n	80005ec <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f001 f91f 	bl	8001898 <HAL_Delay>
    return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000514 	.word	0x20000514
 8000668:	20000918 	.word	0x20000918
 800066c:	08006618 	.word	0x08006618
 8000670:	08006620 	.word	0x08006620

08000674 <esp_reset>:

static int esp_reset(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800067e:	1dba      	adds	r2, r7, #6
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <esp_reset+0x3c>)
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <esp_reset+0x40>)
 8000688:	f7ff ff8a 	bl	80005a0 <esp_at_command>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <esp_reset+0x24>
    {
       return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e007      	b.n	80006a8 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000698:	1dba      	adds	r2, r7, #6
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <esp_reset+0x3c>)
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <esp_reset+0x44>)
 80006a2:	f7ff ff7d 	bl	80005a0 <esp_at_command>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000094 	.word	0x20000094
 80006b4:	08006624 	.word	0x08006624
 80006b8:	08006630 	.word	0x08006630

080006bc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	492d      	ldr	r1, [pc, #180]	@ (8000788 <request_ip_addr+0xcc>)
 80006d4:	482d      	ldr	r0, [pc, #180]	@ (800078c <request_ip_addr+0xd0>)
 80006d6:	f7ff ff63 	bl	80005a0 <esp_at_command>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <request_ip_addr+0xd4>)
 80006e2:	f004 fe01 	bl	80052e8 <puts>
 80006e6:	e049      	b.n	800077c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80006e8:	492a      	ldr	r1, [pc, #168]	@ (8000794 <request_ip_addr+0xd8>)
 80006ea:	4827      	ldr	r0, [pc, #156]	@ (8000788 <request_ip_addr+0xcc>)
 80006ec:	f004 ff24 	bl	8005538 <strtok>
 80006f0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e009      	b.n	8000712 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <request_ip_addr+0xcc>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fd90 	bl	800522c <putchar>
            for(int i = 0 ; i < length ; i++)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	461a      	mov	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4293      	cmp	r3, r2
 800071a:	dbf0      	blt.n	80006fe <request_ip_addr+0x42>
        }

        while(line != NULL)
 800071c:	e02b      	b.n	8000776 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800071e:	491e      	ldr	r1, [pc, #120]	@ (8000798 <request_ip_addr+0xdc>)
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f004 ff65 	bl	80055f0 <strstr>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d01f      	beq.n	800076c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800072c:	491b      	ldr	r1, [pc, #108]	@ (800079c <request_ip_addr+0xe0>)
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f004 ff02 	bl	8005538 <strtok>
                ip = strtok(NULL, "\"");
 8000734:	4919      	ldr	r1, [pc, #100]	@ (800079c <request_ip_addr+0xe0>)
 8000736:	2000      	movs	r0, #0
 8000738:	f004 fefe 	bl	8005538 <strtok>
 800073c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <request_ip_addr+0xe4>)
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fd4d 	bl	80001e0 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00f      	beq.n	800076c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800074c:	2210      	movs	r2, #16
 800074e:	2100      	movs	r1, #0
 8000750:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <request_ip_addr+0xe8>)
 8000752:	f004 fec9 	bl	80054e8 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff fd4c 	bl	80001f4 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <request_ip_addr+0xe8>)
 8000764:	f004 ffd5 	bl	8005712 <memcpy>
                    return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e009      	b.n	8000780 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800076c:	4909      	ldr	r1, [pc, #36]	@ (8000794 <request_ip_addr+0xd8>)
 800076e:	2000      	movs	r0, #0
 8000770:	f004 fee2 	bl	8005538 <strtok>
 8000774:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d0      	bne.n	800071e <request_ip_addr+0x62>
        }
    }

    return -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000094 	.word	0x20000094
 800078c:	08006674 	.word	0x08006674
 8000790:	08006680 	.word	0x08006680
 8000794:	08006668 	.word	0x08006668
 8000798:	080066a0 	.word	0x080066a0
 800079c:	08006670 	.word	0x08006670
 80007a0:	08006638 	.word	0x08006638
 80007a4:	20000084 	.word	0x20000084

080007a8 <esp_client_conn>:
int esp_client_conn()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	@ 0x48
 80007ac:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	223c      	movs	r2, #60	@ 0x3c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fe94 	bl	80054e8 <memset>
  uint16_t length = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007c4:	f107 0008 	add.w	r0, r7, #8
 80007c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <esp_client_conn+0x4c>)
 80007ce:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <esp_client_conn+0x50>)
 80007d0:	f004 fd92 	bl	80052f8 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80007d4:	1dba      	adds	r2, r7, #6
 80007d6:	f107 0008 	add.w	r0, r7, #8
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	4907      	ldr	r1, [pc, #28]	@ (80007fc <esp_client_conn+0x54>)
 80007e0:	f7ff fede 	bl	80005a0 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <esp_client_conn+0x58>)
 80007e6:	f000 f95d 	bl	8000aa4 <esp_send_data>
	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3748      	adds	r7, #72	@ 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080066ac 	.word	0x080066ac
 80007f8:	080066b8 	.word	0x080066b8
 80007fc:	20000094 	.word	0x20000094
 8000800:	080066d4 	.word	0x080066d4

08000804 <drv_esp_init>:

int drv_esp_init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <drv_esp_init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <drv_esp_init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 38400;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <drv_esp_init+0x68>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <drv_esp_init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <drv_esp_init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <drv_esp_init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <drv_esp_init+0x68>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <drv_esp_init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <drv_esp_init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <drv_esp_init+0x68>)
 800083c:	f003 fbcc 	bl	8003fd8 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <drv_esp_init+0x48>
        return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e00c      	b.n	8000866 <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 800084c:	2210      	movs	r2, #16
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <drv_esp_init+0x70>)
 8000852:	f004 fe49 	bl	80054e8 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <drv_esp_init+0x74>)
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <drv_esp_init+0x68>)
 800085c:	f003 fc97 	bl	800418e <HAL_UART_Receive_IT>

    return esp_reset();
 8000860:	f7ff ff08 	bl	8000674 <esp_reset>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000918 	.word	0x20000918
 8000870:	40011400 	.word	0x40011400
 8000874:	20000084 	.word	0x20000084
 8000878:	20000513 	.word	0x20000513

0800087c <reset_func>:
void reset_func()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <reset_func+0x28>)
 8000882:	f004 fcc1 	bl	8005208 <iprintf>
	if(esp_reset() == 0)
 8000886:	f7ff fef5 	bl	8000674 <esp_reset>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <reset_func+0x1c>
			printf("OK\r\n");
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <reset_func+0x2c>)
 8000892:	f004 fd29 	bl	80052e8 <puts>
	else
			printf("fail\r\n");
}
 8000896:	e002      	b.n	800089e <reset_func+0x22>
			printf("fail\r\n");
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <reset_func+0x30>)
 800089a:	f004 fd25 	bl	80052e8 <puts>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	080066e8 	.word	0x080066e8
 80008a8:	080066f8 	.word	0x080066f8
 80008ac:	080066fc 	.word	0x080066fc

080008b0 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b096      	sub	sp, #88	@ 0x58
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	223c      	movs	r2, #60	@ 0x3c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 fe0b 	bl	80054e8 <memset>
  if(ssid == NULL || passwd == NULL)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <ap_conn_func+0x2e>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008de:	4832      	ldr	r0, [pc, #200]	@ (80009a8 <ap_conn_func+0xf8>)
 80008e0:	f004 fd02 	bl	80052e8 <puts>
 80008e4:	e05c      	b.n	80009a0 <ap_conn_func+0xf0>
      return;
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fdfa 	bl	80054e8 <memset>
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80008f4:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80008f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fc:	492b      	ldr	r1, [pc, #172]	@ (80009ac <ap_conn_func+0xfc>)
 80008fe:	482c      	ldr	r0, [pc, #176]	@ (80009b0 <ap_conn_func+0x100>)
 8000900:	f7ff fe4e 	bl	80005a0 <esp_at_command>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <ap_conn_func+0x62>
      printf("Station mode fail\r\n");
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <ap_conn_func+0x104>)
 800090c:	f004 fcec 	bl	80052e8 <puts>
 8000910:	e012      	b.n	8000938 <ap_conn_func+0x88>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	@ 0x54
 8000916:	e009      	b.n	800092c <ap_conn_func+0x7c>
          printf("%c", response[i]);
 8000918:	4a24      	ldr	r2, [pc, #144]	@ (80009ac <ap_conn_func+0xfc>)
 800091a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f004 fc83 	bl	800522c <putchar>
      for(int i = 0 ; i < length ; i++)
 8000926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000928:	3301      	adds	r3, #1
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
 800092c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000930:	461a      	mov	r2, r3
 8000932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000934:	4293      	cmp	r3, r2
 8000936:	dbef      	blt.n	8000918 <ap_conn_func+0x68>
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2240      	movs	r2, #64	@ 0x40
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f004 fdd1 	bl	80054e8 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000946:	f107 000c 	add.w	r0, r7, #12
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	491a      	ldr	r1, [pc, #104]	@ (80009b8 <ap_conn_func+0x108>)
 8000950:	f004 fcd2 	bl	80052f8 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000954:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000958:	f107 000c 	add.w	r0, r7, #12
 800095c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000960:	4912      	ldr	r1, [pc, #72]	@ (80009ac <ap_conn_func+0xfc>)
 8000962:	f7ff fe1d 	bl	80005a0 <esp_at_command>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <ap_conn_func+0xca>
      printf("ap scan command fail : %s\r\n",at_cmd);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	@ (80009bc <ap_conn_func+0x10c>)
 8000974:	f004 fc48 	bl	8005208 <iprintf>
 8000978:	e012      	b.n	80009a0 <ap_conn_func+0xf0>
  else
  {
      for(int i = 0 ; i < length ; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
 800097e:	e009      	b.n	8000994 <ap_conn_func+0xe4>
          printf("%c", response[i]);
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <ap_conn_func+0xfc>)
 8000982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fc4f 	bl	800522c <putchar>
      for(int i = 0 ; i < length ; i++)
 800098e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000990:	3301      	adds	r3, #1
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
 8000994:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000998:	461a      	mov	r2, r3
 800099a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800099c:	4293      	cmp	r3, r2
 800099e:	dbef      	blt.n	8000980 <ap_conn_func+0xd0>
  }
}
 80009a0:	3758      	adds	r7, #88	@ 0x58
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08006740 	.word	0x08006740
 80009ac:	20000094 	.word	0x20000094
 80009b0:	0800676c 	.word	0x0800676c
 80009b4:	0800677c 	.word	0x0800677c
 80009b8:	08006790 	.word	0x08006790
 80009bc:	080067a8 	.word	0x080067a8

080009c0 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_UART_RxCpltCallback+0x9c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d117      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009dc:	d20c      	bcs.n	80009f8 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	b291      	uxth	r1, r2
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009ea:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_UART_RxCpltCallback+0xa4>)
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009f6:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	491a      	ldr	r1, [pc, #104]	@ (8000a64 <HAL_UART_RxCpltCallback+0xa4>)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f003 fbc6 	bl	800418e <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_UART_RxCpltCallback+0xa8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d122      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_RxCpltCallback+0xb0>)
 8000a12:	7811      	ldrb	r1, [r2, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a16:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a1e:	5cd3      	ldrb	r3, [r2, r3]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b0d      	cmp	r3, #13
 8000a24:	d10b      	bne.n	8000a3e <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_UART_RxCpltCallback+0xb8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e004      	b.n	8000a48 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a46:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4909      	ldr	r1, [pc, #36]	@ (8000a70 <HAL_UART_RxCpltCallback+0xb0>)
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f003 fb9e 	bl	800418e <HAL_UART_Receive_IT>
    }
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	20000514 	.word	0x20000514
 8000a64:	20000513 	.word	0x20000513
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	20000960 	.word	0x20000960
 8000a70:	20000512 	.word	0x20000512
 8000a74:	200004e0 	.word	0x200004e0
 8000a78:	200004dc 	.word	0x200004dc

08000a7c <AiotClient_Init>:


void AiotClient_Init()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	reset_func();
 8000a80:	f7ff fefc 	bl	800087c <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 8000a84:	4905      	ldr	r1, [pc, #20]	@ (8000a9c <AiotClient_Init+0x20>)
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <AiotClient_Init+0x24>)
 8000a88:	f7ff ff12 	bl	80008b0 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fe15 	bl	80006bc <request_ip_addr>
	esp_client_conn();
 8000a92:	f7ff fe89 	bl	80007a8 <esp_client_conn>
//	ip_state_func();
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08006b80 	.word	0x08006b80
 8000aa0:	08006b14 	.word	0x08006b14

08000aa4 <esp_send_data>:

void esp_send_data(char *data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	@ 0x50
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	223c      	movs	r2, #60	@ 0x3c
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fd15 	bl	80054e8 <memset>
  uint16_t length = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fb96 	bl	80001f4 <strlen>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	490e      	ldr	r1, [pc, #56]	@ (8000b08 <esp_send_data+0x64>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f004 fc11 	bl	80052f8 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000ad6:	f107 020e 	add.w	r2, r7, #14
 8000ada:	f107 0010 	add.w	r0, r7, #16
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	490a      	ldr	r1, [pc, #40]	@ (8000b0c <esp_send_data+0x68>)
 8000ae4:	f7ff fd5c 	bl	80005a0 <esp_at_command>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000aee:	f107 020e 	add.w	r2, r7, #14
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	4905      	ldr	r1, [pc, #20]	@ (8000b0c <esp_send_data+0x68>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fd51 	bl	80005a0 <esp_at_command>
	}
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	@ 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08006b8c 	.word	0x08006b8c
 8000b0c:	20000094 	.word	0x20000094

08000b10 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <drv_uart_init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <drv_uart_init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <drv_uart_init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <drv_uart_init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <drv_uart_init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <drv_uart_init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <drv_uart_init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <drv_uart_init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <drv_uart_init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <drv_uart_init+0x58>)
 8000b48:	f003 fa46 	bl	8003fd8 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <drv_uart_init+0x48>
        return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e005      	b.n	8000b64 <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4905      	ldr	r1, [pc, #20]	@ (8000b70 <drv_uart_init+0x60>)
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <drv_uart_init+0x58>)
 8000b5e:	f003 fb16 	bl	800418e <HAL_UART_Receive_IT>
    return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000494 	.word	0x20000494
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	20000512 	.word	0x20000512

08000b74 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	230a      	movs	r3, #10
 8000b80:	2201      	movs	r2, #1
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <__io_putchar+0x2c>)
 8000b84:	f003 fa78 	bl	8004078 <HAL_UART_Transmit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <__io_putchar+0x1e>
        return ch;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	e001      	b.n	8000b96 <__io_putchar+0x22>
    return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000494 	.word	0x20000494

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fe01 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f8a7 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9dd 	bl	8000f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bba:	f000 f9bb 	bl	8000f34 <MX_DMA_Init>
  MX_TIM3_Init();
 8000bbe:	f000 f96b 	bl	8000e98 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000bc2:	f000 f909 	bl	8000dd8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000bc6:	f7ff ffa3 	bl	8000b10 <drv_uart_init>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8000bd2:	f7ff fe17 	bl	8000804 <drv_esp_init>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	607b      	str	r3, [r7, #4]
  if(ret != 0) Error_Handler();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <main+0x44>
 8000be4:	f000 fb32 	bl	800124c <Error_Handler>
  printf("Start main() \r\n");
 8000be8:	4837      	ldr	r0, [pc, #220]	@ (8000cc8 <main+0x124>)
 8000bea:	f004 fb7d 	bl	80052e8 <puts>
  AiotClient_Init();
 8000bee:	f7ff ff45 	bl	8000a7c <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000bf2:	4836      	ldr	r0, [pc, #216]	@ (8000ccc <main+0x128>)
 8000bf4:	f002 fe06 	bl	8003804 <HAL_TIM_Base_Start_IT>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x5e>
  {
	  Error_Handler();
 8000bfe:	f000 fb25 	bl	800124c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000c02:	4933      	ldr	r1, [pc, #204]	@ (8000cd0 <main+0x12c>)
 8000c04:	4833      	ldr	r0, [pc, #204]	@ (8000cd4 <main+0x130>)
 8000c06:	f004 fcf3 	bl	80055f0 <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01d      	beq.n	8000c4c <main+0xa8>
 8000c10:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <main+0x130>)
 8000c12:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c16:	3b01      	subs	r3, #1
 8000c18:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd4 <main+0x130>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	2b0a      	cmp	r3, #10
 8000c1e:	d115      	bne.n	8000c4c <main+0xa8>
		{
			//?��?��?���?  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000c20:	215b      	movs	r1, #91	@ 0x5b
 8000c22:	482c      	ldr	r0, [pc, #176]	@ (8000cd4 <main+0x130>)
 8000c24:	f004 fc68 	bl	80054f8 <strchr>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	482a      	ldr	r0, [pc, #168]	@ (8000cd8 <main+0x134>)
 8000c2e:	f004 fd68 	bl	8005702 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c36:	2100      	movs	r1, #0
 8000c38:	4826      	ldr	r0, [pc, #152]	@ (8000cd4 <main+0x130>)
 8000c3a:	f004 fc55 	bl	80054e8 <memset>
			cb_data.length = 0;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <main+0x130>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000c46:	4824      	ldr	r0, [pc, #144]	@ (8000cd8 <main+0x134>)
 8000c48:	f000 fa26 	bl	8001098 <esp_event>
		}
		if(rx2Flag)
 8000c4c:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <main+0x138>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <main+0xc0>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000c56:	4922      	ldr	r1, [pc, #136]	@ (8000ce0 <main+0x13c>)
 8000c58:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <main+0x140>)
 8000c5a:	f004 fad5 	bl	8005208 <iprintf>
			rx2Flag =0;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <main+0x138>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
		}
		if(tim3Flag1Sec)
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <main+0x144>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0ca      	beq.n	8000c02 <main+0x5e>
		{
			tim3Flag1Sec = 0;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <main+0x144>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
//			printf("tim3Sec : %u\r\n", tim3Sec);
			if(!(tim3Sec%5))
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <main+0x148>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <main+0x14c>)
 8000c78:	fb83 2301 	smull	r2, r3, r3, r1
 8000c7c:	105a      	asrs	r2, r3, #1
 8000c7e:	17cb      	asrs	r3, r1, #31
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	1aca      	subs	r2, r1, r3
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d109      	bne.n	8000ca2 <main+0xfe>
			{
				if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCxConvertValue,2) != HAL_OK)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4918      	ldr	r1, [pc, #96]	@ (8000cf4 <main+0x150>)
 8000c92:	4819      	ldr	r0, [pc, #100]	@ (8000cf8 <main+0x154>)
 8000c94:	f000 fe68 	bl	8001968 <HAL_ADC_Start_DMA>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <main+0xfe>
				{
					Error_Handler();
 8000c9e:	f000 fad5 	bl	800124c <Error_Handler>
				}
			}
			if(adcFlag)
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <main+0x158>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0ab      	beq.n	8000c02 <main+0x5e>
			{
				adcFlag = 0;
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <main+0x158>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
				printf("VAR = %4d, CDS= %d\r\n",ADCxConvertValue[0], ADCxConvertValue[1]);
 8000cb0:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <main+0x150>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <main+0x150>)
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	480f      	ldr	r0, [pc, #60]	@ (8000d00 <main+0x15c>)
 8000cc2:	f004 faa1 	bl	8005208 <iprintf>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000cc6:	e79c      	b.n	8000c02 <main+0x5e>
 8000cc8:	08006b9c 	.word	0x08006b9c
 8000ccc:	20000a0c 	.word	0x20000a0c
 8000cd0:	08006bac 	.word	0x08006bac
 8000cd4:	20000514 	.word	0x20000514
 8000cd8:	20000a68 	.word	0x20000a68
 8000cdc:	200004dc 	.word	0x200004dc
 8000ce0:	200004e0 	.word	0x200004e0
 8000ce4:	08006bb4 	.word	0x08006bb4
 8000ce8:	20000a54 	.word	0x20000a54
 8000cec:	20000a58 	.word	0x20000a58
 8000cf0:	66666667 	.word	0x66666667
 8000cf4:	20000a64 	.word	0x20000a64
 8000cf8:	20000964 	.word	0x20000964
 8000cfc:	20000a60 	.word	0x20000a60
 8000d00:	08006bc4 	.word	0x08006bc4

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	@ 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	@ 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 fbe8 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	4a27      	ldr	r2, [pc, #156]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <SystemClock_Config+0xcc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <SystemClock_Config+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <SystemClock_Config+0xd0>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <SystemClock_Config+0xd0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 f852 	bl	8002e34 <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d96:	f000 fa59 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fab4 	bl	8003324 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dc2:	f000 fa43 	bl	800124c <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	@ 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dea:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000dec:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <MX_ADC1_Init+0xb8>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000df2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <MX_ADC1_Init+0xbc>)
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e3a:	f000 fd51 	bl	80018e0 <HAL_ADC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 fa02 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e5a:	f000 fe89 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e64:	f000 f9f2 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_ADC1_Init+0xb4>)
 8000e76:	f000 fe7b 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e80:	f000 f9e4 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000964 	.word	0x20000964
 8000e90:	40012000 	.word	0x40012000
 8000e94:	0f000001 	.word	0x0f000001

08000e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f30 <MX_TIM3_Init+0x98>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ebc:	2253      	movs	r2, #83	@ 0x53
 8000ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ec8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ecc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eda:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000edc:	f002 fc42 	bl	8003764 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f000 f9b1 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000ef8:	f002 fdd6 	bl	8003aa8 <HAL_TIM_ConfigClockSource>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f9a3 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	@ (8000f2c <MX_TIM3_Init+0x94>)
 8000f14:	f002 ffde 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f1e:	f000 f995 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000a0c 	.word	0x20000a0c
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_DMA_Init+0x3c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <MX_DMA_Init+0x3c>)
 8000f44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_DMA_Init+0x3c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2038      	movs	r0, #56	@ 0x38
 8000f5c:	f001 f993 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f60:	2038      	movs	r0, #56	@ 0x38
 8000f62:	f001 f9ac 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a2c      	ldr	r2, [pc, #176]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <MX_GPIO_Init+0xd0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4812      	ldr	r0, [pc, #72]	@ (8001048 <MX_GPIO_Init+0xd4>)
 8001000:	f001 fefe 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_GPIO_Init+0xd8>)
 800101c:	f001 fd6c 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001020:	2320      	movs	r3, #32
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_GPIO_Init+0xd4>)
 8001038:	f001 fd5e 	bl	8002af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020800 	.word	0x40020800

08001050 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <MX_GPIO_LED_ON+0x20>)
 8001062:	f001 fecd 	bl	8002e00 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020000 	.word	0x40020000

08001074 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b29b      	uxth	r3, r3
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_GPIO_LED_OFF+0x20>)
 8001086:	f001 febb 	bl	8002e00 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020000 	.word	0x40020000

08001098 <esp_event>:
void esp_event(char * recvBuf)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09c      	sub	sp, #112	@ 0x70
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
  int i=0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80010a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	223c      	movs	r2, #60	@ 0x3c
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fa11 	bl	80054e8 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff f894 	bl	80001f4 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a39      	ldr	r2, [pc, #228]	@ (80011b8 <esp_event+0x120>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4838      	ldr	r0, [pc, #224]	@ (80011bc <esp_event+0x124>)
 80010da:	f004 f895 	bl	8005208 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80010de:	4938      	ldr	r1, [pc, #224]	@ (80011c0 <esp_event+0x128>)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f004 fa29 	bl	8005538 <strtok>
 80010e6:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80010e8:	e011      	b.n	800110e <esp_event+0x76>
  {
    pArray[i] = pToken;
 80010ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3368      	adds	r3, #104	@ 0x68
 80010f0:	443b      	add	r3, r7
 80010f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010f4:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80010f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010fa:	3301      	adds	r3, #1
 80010fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80010fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001100:	2b04      	cmp	r3, #4
 8001102:	dc08      	bgt.n	8001116 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8001104:	492e      	ldr	r1, [pc, #184]	@ (80011c0 <esp_event+0x128>)
 8001106:	2000      	movs	r0, #0
 8001108:	f004 fa16 	bl	8005538 <strtok>
 800110c:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800110e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ea      	bne.n	80010ea <esp_event+0x52>
 8001114:	e000      	b.n	8001118 <esp_event+0x80>
      break;
 8001116:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8001118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800111a:	492a      	ldr	r1, [pc, #168]	@ (80011c4 <esp_event+0x12c>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f85f 	bl	80001e0 <strcmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d12c      	bne.n	8001182 <esp_event+0xea>
  {
  	if(!strcmp(pArray[2],"ON"))
 8001128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800112a:	4927      	ldr	r1, [pc, #156]	@ (80011c8 <esp_event+0x130>)
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f857 	bl	80001e0 <strcmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <esp_event+0xa8>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8001138:	2020      	movs	r0, #32
 800113a:	f7ff ff89 	bl	8001050 <MX_GPIO_LED_ON>
 800113e:	e00a      	b.n	8001156 <esp_event+0xbe>

  	}
		else if(!strcmp(pArray[2],"OFF"))
 8001140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001142:	4922      	ldr	r1, [pc, #136]	@ (80011cc <esp_event+0x134>)
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f84b 	bl	80001e0 <strcmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <esp_event+0xbe>
		{
				MX_GPIO_LED_OFF(LD2_Pin);
 8001150:	2020      	movs	r0, #32
 8001152:	f7ff ff8f 	bl	8001074 <MX_GPIO_LED_OFF>
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001156:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001158:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800115a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800115c:	f107 000c 	add.w	r0, r7, #12
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	460b      	mov	r3, r1
 8001164:	491a      	ldr	r1, [pc, #104]	@ (80011d0 <esp_event+0x138>)
 8001166:	f004 f8c7 	bl	80052f8 <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fc98 	bl	8000aa4 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <esp_event+0x13c>)
 800117c:	f004 f844 	bl	8005208 <iprintf>
 8001180:	e017      	b.n	80011b2 <esp_event+0x11a>
  else if(!strncmp(pArray[1]," New conn",8))
 8001182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001184:	2208      	movs	r2, #8
 8001186:	4914      	ldr	r1, [pc, #80]	@ (80011d8 <esp_event+0x140>)
 8001188:	4618      	mov	r0, r3
 800118a:	f004 f9c2 	bl	8005512 <strncmp>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <esp_event+0x114>
  else if(!strncmp(pArray[1]," Already log",8))
 8001194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001196:	2208      	movs	r2, #8
 8001198:	4910      	ldr	r1, [pc, #64]	@ (80011dc <esp_event+0x144>)
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f9b9 	bl	8005512 <strncmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <esp_event+0x118>
			esp_client_conn();
 80011a6:	f7ff faff 	bl	80007a8 <esp_client_conn>
      return;
 80011aa:	e002      	b.n	80011b2 <esp_event+0x11a>
     return;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <esp_event+0x11a>
      return;
 80011b0:	bf00      	nop
}
 80011b2:	3768      	adds	r7, #104	@ 0x68
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000a68 	.word	0x20000a68
 80011bc:	08006bdc 	.word	0x08006bdc
 80011c0:	08006bf0 	.word	0x08006bf0
 80011c4:	08006bf4 	.word	0x08006bf4
 80011c8:	08006bf8 	.word	0x08006bf8
 80011cc:	08006bfc 	.word	0x08006bfc
 80011d0:	08006c00 	.word	0x08006c00
 80011d4:	08006c28 	.word	0x08006c28
 80011d8:	08006c0c 	.word	0x08006c0c
 80011dc:	08006c18 	.word	0x08006c18

080011e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	tim3Cnt++;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011f0:	6013      	str	r3, [r2, #0]
	if(tim3Cnt == 1000) // 1ms * 1000 = 1sec
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011fa:	d10a      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800120a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
	}

}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000a5c 	.word	0x20000a5c
 8001224:	20000a54 	.word	0x20000a54
 8001228:	20000a58 	.word	0x20000a58

0800122c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000a60 	.word	0x20000a60

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 ffea 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d156      	bne.n	8001378 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN0_VAR_Pin|ADC1_IN0_CDS_Pin;
 8001302:	2303      	movs	r3, #3
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	481c      	ldr	r0, [pc, #112]	@ (8001388 <HAL_ADC_MspInit+0xe0>)
 8001316:	f001 fbef 	bl	8002af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 800131c:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_ADC_MspInit+0xe8>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800135c:	480b      	ldr	r0, [pc, #44]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 800135e:	f000 ffc9 	bl	80022f4 <HAL_DMA_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001368:	f7ff ff70 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
 8001372:	4a06      	ldr	r2, [pc, #24]	@ (800138c <HAL_ADC_MspInit+0xe4>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	200009ac 	.word	0x200009ac
 8001390:	40026410 	.word	0x40026410

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d115      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a0c      	ldr	r2, [pc, #48]	@ (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201d      	movs	r0, #29
 80013c8:	f000 ff5d 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013cc:	201d      	movs	r0, #29
 80013ce:	f000 ff76 	bl	80022be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40000400 	.word	0x40000400
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3a      	ldr	r2, [pc, #232]	@ (80014ec <HAL_UART_MspInit+0x108>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d134      	bne.n	8001470 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	4b39      	ldr	r3, [pc, #228]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a38      	ldr	r2, [pc, #224]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b36      	ldr	r3, [pc, #216]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a31      	ldr	r2, [pc, #196]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800143e:	230c      	movs	r3, #12
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	@ (80014f4 <HAL_UART_MspInit+0x110>)
 800145a:	f001 fb4d 	bl	8002af8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2026      	movs	r0, #38	@ 0x26
 8001464:	f000 ff0f 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001468:	2026      	movs	r0, #38	@ 0x26
 800146a:	f000 ff28 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800146e:	e038      	b.n	80014e2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a20      	ldr	r2, [pc, #128]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d133      	bne.n	80014e2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_UART_MspInit+0x10c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23c0      	movs	r3, #192	@ 0xc0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014c2:	2308      	movs	r3, #8
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	@ (80014fc <HAL_UART_MspInit+0x118>)
 80014ce:	f001 fb13 	bl	8002af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2047      	movs	r0, #71	@ 0x47
 80014d8:	f000 fed5 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014dc:	2047      	movs	r0, #71	@ 0x47
 80014de:	f000 feee 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	@ 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40020800 	.word	0x40020800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f97f 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <TIM3_IRQHandler+0x10>)
 8001566:	f002 f9af 	bl	80038c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000a0c 	.word	0x20000a0c

08001574 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <USART2_IRQHandler+0x10>)
 800157a:	f002 fe2d 	bl	80041d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000494 	.word	0x20000494

08001588 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DMA2_Stream0_IRQHandler+0x10>)
 800158e:	f001 f849 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200009ac 	.word	0x200009ac

0800159c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <USART6_IRQHandler+0x10>)
 80015a2:	f002 fe19 	bl	80041d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000918 	.word	0x20000918

080015b0 <_getpid>:
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	2301      	movs	r3, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	f004 f86d 	bl	80056a8 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
 80015f2:	bf00      	nop
 80015f4:	e7fd      	b.n	80015f2 <_exit+0x12>

080015f6 <_read>:
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e00a      	b.n	800161e <_read+0x28>
 8001608:	f3af 8000 	nop.w
 800160c:	4601      	mov	r1, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	b2ca      	uxtb	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbf0      	blt.n	8001608 <_read+0x12>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_write>:
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e009      	b.n	8001656 <_write+0x26>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fa92 	bl	8000b74 <__io_putchar>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf1      	blt.n	8001642 <_write+0x12>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_close>:
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_fstat>:
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	2300      	movs	r3, #0
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_isatty>:
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_lseek>:
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	2300      	movs	r3, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_sbrk>:
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
 8001700:	f003 ffd2 	bl	80056a8 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000aa8 	.word	0x20000aa8
 8001738:	20000c00 	.word	0x20000c00

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	@ (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001798 <LoopFillZerobss+0xe>
 8001764:	f7ff ffea 	bl	800173c <SystemInit>
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <LoopFillZerobss+0x12>)
 800176a:	490d      	ldr	r1, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x16>)
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x1a>)
 800176e:	2300      	movs	r3, #0
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:
 8001772:	58d4      	ldr	r4, [r2, r3]
 8001774:	50c4      	str	r4, [r0, r3]
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:
 8001778:	18c4      	adds	r4, r0, r3
 800177a:	428c      	cmp	r4, r1
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <LoopFillZerobss+0x1e>)
 8001780:	4c0a      	ldr	r4, [pc, #40]	@ (80017ac <LoopFillZerobss+0x22>)
 8001782:	2300      	movs	r3, #0
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:
 800178a:	42a2      	cmp	r2, r4
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>
 800178e:	f003 ff91 	bl	80056b4 <__libc_init_array>
 8001792:	f7ff fa07 	bl	8000ba4 <main>
 8001796:	4770      	bx	lr
 8001798:	20020000 	.word	0x20020000
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000068 	.word	0x20000068
 80017a4:	08006d4c 	.word	0x08006d4c
 80017a8:	20000068 	.word	0x20000068
 80017ac:	20000bfc 	.word	0x20000bfc

080017b0 <ADC_IRQHandler>:
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 fd47 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fd36 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fd5f 	bl	80022da <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 fd27 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	20000aac 	.word	0x20000aac

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000aac 	.word	0x20000aac

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e033      	b.n	800195e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fcd2 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001926:	f023 0302 	bic.w	r3, r3, #2
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fa4e 	bl	8001dd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
 800194e:	e001      	b.n	8001954 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Start_DMA+0x1e>
 8001982:	2302      	movs	r3, #2
 8001984:	e0ce      	b.n	8001b24 <HAL_ADC_Start_DMA+0x1bc>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d018      	beq.n	80019ce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ac:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_ADC_Start_DMA+0x1c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001b30 <HAL_ADC_Start_DMA+0x1c8>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9a      	lsrs	r2, r3, #18
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019dc:	d107      	bne.n	80019ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019ec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	f040 8086 	bne.w	8001b0a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a3c:	d106      	bne.n	8001a4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f023 0206 	bic.w	r2, r3, #6
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5a:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <HAL_ADC_Start_DMA+0x1cc>)
 8001a5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a62:	4a35      	ldr	r2, [pc, #212]	@ (8001b38 <HAL_ADC_Start_DMA+0x1d0>)
 8001a64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6a:	4a34      	ldr	r2, [pc, #208]	@ (8001b3c <HAL_ADC_Start_DMA+0x1d4>)
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a72:	4a33      	ldr	r2, [pc, #204]	@ (8001b40 <HAL_ADC_Start_DMA+0x1d8>)
 8001a74:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a8e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a9e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	334c      	adds	r3, #76	@ 0x4c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f000 fcce 	bl	8002450 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d129      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	e020      	b.n	8001b22 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_ADC_Start_DMA+0x1dc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d11b      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x1ba>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d114      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	e00b      	b.n	8001b22 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f043 0210 	orr.w	r2, r3, #16
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	431bde83 	.word	0x431bde83
 8001b34:	40012300 	.word	0x40012300
 8001b38:	08001fcd 	.word	0x08001fcd
 8001b3c:	08002087 	.word	0x08002087
 8001b40:	080020a3 	.word	0x080020a3
 8001b44:	40012000 	.word	0x40012000

08001b48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e113      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x244>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d925      	bls.n	8001be8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68d9      	ldr	r1, [r3, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4403      	add	r3, r0
 8001bda:	3b1e      	subs	r3, #30
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	e022      	b.n	8001c2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4403      	add	r3, r0
 8001c24:	409a      	lsls	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d824      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b05      	subs	r3, #5
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	400a      	ands	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b05      	subs	r3, #5
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c7e:	e04c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d824      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b23      	subs	r3, #35	@ 0x23
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b23      	subs	r3, #35	@ 0x23
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd0:	e023      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b41      	subs	r3, #65	@ 0x41
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b41      	subs	r3, #65	@ 0x41
 8001d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1a:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x250>)
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a28      	ldr	r2, [pc, #160]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x254>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10f      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1d8>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x254>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x258>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <HAL_ADC_ConfigChannel+0x1f4>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b11      	cmp	r3, #17
 8001d62:	d122      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x258>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_ADC_ConfigChannel+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x260>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	10000012 	.word	0x10000012
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ddc:	4b79      	ldr	r3, [pc, #484]	@ (8001fc4 <ADC_Init+0x1f0>)
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	021a      	lsls	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	4a58      	ldr	r2, [pc, #352]	@ (8001fc8 <ADC_Init+0x1f4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e00f      	b.n	8001ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0202 	bic.w	r2, r2, #2
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	035a      	lsls	r2, r3, #13
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e007      	b.n	8001f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	051a      	lsls	r2, r3, #20
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f8a:	025a      	lsls	r2, r3, #9
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	029a      	lsls	r2, r3, #10
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	0f000001 	.word	0x0f000001

08001fcc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d13c      	bne.n	8002060 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d12b      	bne.n	8002058 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d127      	bne.n	8002058 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002020:	2b00      	cmp	r3, #0
 8002022:	d119      	bne.n	8002058 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0220 	bic.w	r2, r2, #32
 8002032:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff f8e7 	bl	800122c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800205e:	e00e      	b.n	800207e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff fd75 	bl	8001b5c <HAL_ADC_ErrorCallback>
}
 8002072:	e004      	b.n	800207e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002092:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff fd57 	bl	8001b48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f043 0204 	orr.w	r2, r3, #4
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff fd4a 	bl	8001b5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fabe 	bl	8001880 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e099      	b.n	8002444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e00f      	b.n	8002352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff faa5 	bl	8001880 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d908      	bls.n	8002352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e078      	b.n	8002444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e8      	bne.n	8002332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4b38      	ldr	r3, [pc, #224]	@ (800244c <HAL_DMA_Init+0x158>)
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4313      	orrs	r3, r2
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d117      	bne.n	8002416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb01 	bl	8002a00 <DMA_CheckFifoParam>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002412:	2301      	movs	r3, #1
 8002414:	e016      	b.n	8002444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fab8 	bl	8002994 <DMA_CalcBaseAndBitshift>
 8002424:	4603      	mov	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	223f      	movs	r2, #63	@ 0x3f
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f010803f 	.word	0xf010803f

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Start_IT+0x26>
 8002472:	2302      	movs	r3, #2
 8002474:	e040      	b.n	80024f8 <HAL_DMA_Start_IT+0xa8>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12f      	bne.n	80024ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa4a 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	223f      	movs	r2, #63	@ 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0216 	orr.w	r2, r2, #22
 80024be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e005      	b.n	80024f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800250e:	f7ff f9b7 	bl	8001880 <HAL_GetTick>
 8002512:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d008      	beq.n	8002532 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e052      	b.n	80025d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0216 	bic.w	r2, r2, #22
 8002540:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002550:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <HAL_DMA_Abort+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0208 	bic.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002582:	e013      	b.n	80025ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002584:	f7ff f97c 	bl	8001880 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b05      	cmp	r3, #5
 8002590:	d90c      	bls.n	80025ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e015      	b.n	80025d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e4      	bne.n	8002584 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	223f      	movs	r2, #63	@ 0x3f
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x248>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x24c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808f 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8087 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	223f      	movs	r2, #63	@ 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e079      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d031      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000
 8002870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01e      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f2      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x2cc>
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800290c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d909      	bls.n	80029d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d4:	e007      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	08006c54 	.word	0x08006c54

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e159      	b.n	8002dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8148 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a2 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x202>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x1fe>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	@ (8002df8 <HAL_GPIO_Init+0x300>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x1f2>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f aea2 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e267      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b85      	ldr	r3, [pc, #532]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e242      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b69      	ldr	r3, [pc, #420]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fcc8 	bl	8001880 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fcc4 	bl	8001880 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e207      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fcb4 	bl	8001880 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fcb0 	bl	8001880 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f3      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c7      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fc69 	bl	8001880 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fc65 	bl	8001880 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a8      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fc48 	bl	8001880 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fc44 	bl	8001880 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e187      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fc28 	bl	8001880 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe fc24 	bl	8001880 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e167      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fc11 	bl	8001880 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fc0d 	bl	8001880 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e150      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7d      	ldr	r3, [pc, #500]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b7a      	ldr	r3, [pc, #488]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b77      	ldr	r3, [pc, #476]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b74      	ldr	r3, [pc, #464]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fbcd 	bl	8001880 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fbc9 	bl	8001880 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x2ea>
 8003110:	4b64      	ldr	r3, [pc, #400]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x30c>
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a5e      	ldr	r2, [pc, #376]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
 8003132:	4b5c      	ldr	r3, [pc, #368]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	4a5b      	ldr	r2, [pc, #364]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	@ 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 8003140:	4b58      	ldr	r3, [pc, #352]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a57      	ldr	r2, [pc, #348]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a54      	ldr	r2, [pc, #336]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fb8e 	bl	8001880 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe fb8a 	bl	8001880 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0cb      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b49      	ldr	r3, [pc, #292]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x334>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe fb78 	bl	8001880 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fb74 	bl	8001880 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b5      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	4a38      	ldr	r2, [pc, #224]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a1 	beq.w	8003314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d05c      	beq.n	8003298 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d141      	bne.n	800326a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fb48 	bl	8001880 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fb44 	bl	8001880 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e087      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	491b      	ldr	r1, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fb1d 	bl	8001880 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fb19 	bl	8001880 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x416>
 8003268:	e054      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fb06 	bl	8001880 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fb02 	bl	8001880 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e045      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e038      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fe fa34 	bl	8001880 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fe fa30 	bl	8001880 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f994 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08006c3c 	.word	0x08006c3c
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b094      	sub	sp, #80	@ 0x50
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b79      	ldr	r3, [pc, #484]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80e1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e0db      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003528:	e0db      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800352e:	e0d8      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b6d      	ldr	r3, [pc, #436]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003550:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	633b      	str	r3, [r7, #48]	@ 0x30
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
 800355e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4621      	mov	r1, r4
 800357c:	1a51      	subs	r1, r2, r1
 800357e:	6139      	str	r1, [r7, #16]
 8003580:	4629      	mov	r1, r5
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	018b      	lsls	r3, r1, #6
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800359e:	4651      	mov	r1, sl
 80035a0:	018a      	lsls	r2, r1, #6
 80035a2:	4651      	mov	r1, sl
 80035a4:	ebb2 0801 	subs.w	r8, r2, r1
 80035a8:	4659      	mov	r1, fp
 80035aa:	eb63 0901 	sbc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	462b      	mov	r3, r5
 80035d0:	eb49 0303 	adc.w	r3, r9, r3
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035e2:	4629      	mov	r1, r5
 80035e4:	024b      	lsls	r3, r1, #9
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ec:	4621      	mov	r1, r4
 80035ee:	024a      	lsls	r2, r1, #9
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003600:	f7fc fe56 	bl	80002b0 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360c:	e058      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	4618      	mov	r0, r3
 8003618:	4611      	mov	r1, r2
 800361a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
 8003624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	f04f 0000 	mov.w	r0, #0
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363a:	0150      	lsls	r0, r2, #5
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4641      	mov	r1, r8
 8003642:	ebb2 0a01 	subs.w	sl, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb63 0b01 	sbc.w	fp, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800365c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003660:	ebb2 040a 	subs.w	r4, r2, sl
 8003664:	eb63 050b 	sbc.w	r5, r3, fp
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	464b      	mov	r3, r9
 8003684:	eb45 0303 	adc.w	r3, r5, r3
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036aa:	2200      	movs	r2, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	f7fc fdfc 	bl	80002b0 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3750      	adds	r7, #80	@ 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff0 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	@ (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	08006c4c 	.word	0x08006c4c

0800373c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003740:	f7ff ffdc 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0b5b      	lsrs	r3, r3, #13
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	@ (8003760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	08006c4c 	.word	0x08006c4c

08003764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e041      	b.n	80037fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fe02 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f000 fa70 	bl	8003c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e044      	b.n	80038a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003846:	d013      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1a      	ldr	r2, [pc, #104]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a19      	ldr	r2, [pc, #100]	@ (80038bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x6c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x6c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d111      	bne.n	8003894 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b06      	cmp	r3, #6
 8003880:	d010      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003892:	e007      	b.n	80038a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40014000 	.word	0x40014000

080038c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0202 	mvn.w	r2, #2
 80038fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f999 	bl	8003c4a <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f98b 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f99c 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d020      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f973 	bl	8003c4a <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f965 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f976 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d020      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0208 	mvn.w	r2, #8
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f94d 	bl	8003c4a <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f93f 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f950 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0210 	mvn.w	r2, #16
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2208      	movs	r2, #8
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f927 	bl	8003c4a <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f919 	bl	8003c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f92a 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fbd6 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fab6 	bl	8003fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8fb 	bl	8003c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0220 	mvn.w	r2, #32
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa88 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0b4      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x186>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afc:	d03e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xd4>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b02:	f200 8087 	bhi.w	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0a:	f000 8086 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x172>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d87f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b70      	cmp	r3, #112	@ 0x70
 8003b16:	d01a      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xa6>
 8003b18:	2b70      	cmp	r3, #112	@ 0x70
 8003b1a:	d87b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b60      	cmp	r3, #96	@ 0x60
 8003b1e:	d050      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b20:	2b60      	cmp	r3, #96	@ 0x60
 8003b22:	d877      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b50      	cmp	r3, #80	@ 0x50
 8003b26:	d03c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8003b28:	2b50      	cmp	r3, #80	@ 0x50
 8003b2a:	d873      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b40      	cmp	r3, #64	@ 0x40
 8003b2e:	d058      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d86f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b30      	cmp	r3, #48	@ 0x30
 8003b36:	d064      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b30      	cmp	r3, #48	@ 0x30
 8003b3a:	d86b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d060      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d867      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d05a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	e062      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b5e:	f000 f999 	bl	8003e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	609a      	str	r2, [r3, #8]
      break;
 8003b7a:	e04f      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b8c:	f000 f982 	bl	8003e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e03c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f8f6 	bl	8003da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	@ 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f94f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e02c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f915 	bl	8003dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2160      	movs	r1, #96	@ 0x60
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f93f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003be0:	e01c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f8d6 	bl	8003da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	@ 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f92f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c00:	e00c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 f926 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d84 <TIM_Base_SetConfig+0xfc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0x38>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a37      	ldr	r2, [pc, #220]	@ (8003d88 <TIM_Base_SetConfig+0x100>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <TIM_Base_SetConfig+0x104>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a35      	ldr	r2, [pc, #212]	@ (8003d90 <TIM_Base_SetConfig+0x108>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d84 <TIM_Base_SetConfig+0xfc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01b      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce0:	d017      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a28      	ldr	r2, [pc, #160]	@ (8003d88 <TIM_Base_SetConfig+0x100>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a27      	ldr	r2, [pc, #156]	@ (8003d8c <TIM_Base_SetConfig+0x104>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00f      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	@ (8003d90 <TIM_Base_SetConfig+0x108>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a25      	ldr	r2, [pc, #148]	@ (8003d94 <TIM_Base_SetConfig+0x10c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a24      	ldr	r2, [pc, #144]	@ (8003d98 <TIM_Base_SetConfig+0x110>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_Base_SetConfig+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <TIM_Base_SetConfig+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d108      	bne.n	8003d24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d84 <TIM_Base_SetConfig+0xfc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f023 0201 	bic.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
  }
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800

08003da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	f023 0201 	bic.w	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 030a 	bic.w	r3, r3, #10
 8003ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b087      	sub	sp, #28
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0210 	bic.w	r2, r3, #16
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	031b      	lsls	r3, r3, #12
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e050      	b.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d018      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f38:	d013      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d10c      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40014000 	.word	0x40014000

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e042      	b.n	8004070 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd f9f0 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	@ 0x24
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800401a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fdbd 	bl	8004b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	@ 0x28
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d175      	bne.n	8004184 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Transmit+0x2c>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e06e      	b.n	8004186 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	@ 0x21
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fd fbe3 	bl	8001880 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Transmit+0x6c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ec:	e02e      	b.n	800414c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	@ 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fb1f 	bl	800473c <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e03a      	b.n	8004186 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e007      	b.n	800413e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cb      	bne.n	80040ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	@ 0x40
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 faeb 	bl	800473c <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e006      	b.n	8004186 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d112      	bne.n	80041ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Receive_IT+0x26>
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e00b      	b.n	80041d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb12 	bl	80047ee <UART_Start_Receive_IT>
 80041ca:	4603      	mov	r3, r0
 80041cc:	e000      	b.n	80041d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b0ba      	sub	sp, #232	@ 0xe8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_UART_IRQHandler+0x66>
 800422a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fbf2 	bl	8004a20 <UART_Receive_IT>
      return;
 800423c:	e25b      	b.n	80046f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800423e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80de 	beq.w	8004404 <HAL_UART_IRQHandler+0x22c>
 8004248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80d1 	beq.w	8004404 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_UART_IRQHandler+0xae>
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_UART_IRQHandler+0xd2>
 8004292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_UART_IRQHandler+0xf6>
 80042b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f043 0204 	orr.w	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_UART_IRQHandler+0x126>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f043 0208 	orr.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 81f2 	beq.w	80046ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_UART_IRQHandler+0x14e>
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb7d 	bl	8004a20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <HAL_UART_IRQHandler+0x17a>
 800434a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04f      	beq.n	80043f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa85 	bl	8004862 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	d141      	bne.n	80043ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800437c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004392:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800439e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1d9      	bne.n	8004366 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043be:	4a7e      	ldr	r2, [pc, #504]	@ (80045b8 <HAL_UART_IRQHandler+0x3e0>)
 80043c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe f90a 	bl	80025e0 <HAL_DMA_Abort_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043dc:	4610      	mov	r0, r2
 80043de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e00e      	b.n	8004400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f994 	bl	8004710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	e00a      	b.n	8004400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f990 	bl	8004710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	e006      	b.n	8004400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f98c 	bl	8004710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043fe:	e175      	b.n	80046ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	bf00      	nop
    return;
 8004402:	e173      	b.n	80046ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 814f 	bne.w	80046ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8148 	beq.w	80046ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8141 	beq.w	80046ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	f040 80b6 	bne.w	80045bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800445c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8145 	beq.w	80046f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800446a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800446e:	429a      	cmp	r2, r3
 8004470:	f080 813e 	bcs.w	80046f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800447a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	f000 8088 	beq.w	800459a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1d9      	bne.n	800448a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004502:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800450c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e1      	bne.n	80044d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004536:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004538:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800453c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e3      	bne.n	8004512 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800457c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800457e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004582:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800458a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e3      	bne.n	8004558 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	4618      	mov	r0, r3
 8004596:	f7fd ffb3 	bl	8002500 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8b7 	bl	8004724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b6:	e09b      	b.n	80046f0 <HAL_UART_IRQHandler+0x518>
 80045b8:	08004929 	.word	0x08004929
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 808e 	beq.w	80046f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8089 	beq.w	80046f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004606:	647a      	str	r2, [r7, #68]	@ 0x44
 8004608:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800460c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e3      	bne.n	80045e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	623b      	str	r3, [r7, #32]
   return(result);
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800463e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e3      	bne.n	800461a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	69b9      	ldr	r1, [r7, #24]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	617b      	str	r3, [r7, #20]
   return(result);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e3      	bne.n	8004660 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800469e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f83d 	bl	8004724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046aa:	e023      	b.n	80046f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <HAL_UART_IRQHandler+0x4f4>
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f943 	bl	8004950 <UART_Transmit_IT>
    return;
 80046ca:	e014      	b.n	80046f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00e      	beq.n	80046f6 <HAL_UART_IRQHandler+0x51e>
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f983 	bl	80049f0 <UART_EndTransmit_IT>
    return;
 80046ea:	e004      	b.n	80046f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80046ec:	bf00      	nop
 80046ee:	e002      	b.n	80046f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046f4:	bf00      	nop
  }
}
 80046f6:	37e8      	adds	r7, #232	@ 0xe8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474c:	e03b      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d037      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fd f893 	bl	8001880 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <UART_WaitOnFlagUntilTimeout+0x30>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e03a      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d023      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b80      	cmp	r3, #128	@ 0x80
 8004782:	d020      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d01d      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b08      	cmp	r3, #8
 8004796:	d116      	bne.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f857 	bl	8004862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2208      	movs	r2, #8
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00f      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d0b4      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	4613      	mov	r3, r2
 80047fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2222      	movs	r2, #34	@ 0x22
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004832:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0220 	orr.w	r2, r2, #32
 8004852:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004862:	b480      	push	{r7}
 8004864:	b095      	sub	sp, #84	@ 0x54
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800488a:	643a      	str	r2, [r7, #64]	@ 0x40
 800488c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e5      	bne.n	800486a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d119      	bne.n	800490e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048fa:	61ba      	str	r2, [r7, #24]
 80048fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	613b      	str	r3, [r7, #16]
   return(result);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800491c:	bf00      	nop
 800491e:	3754      	adds	r7, #84	@ 0x54
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fee4 	bl	8004710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b21      	cmp	r3, #33	@ 0x21
 8004962:	d13e      	bne.n	80049e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496c:	d114      	bne.n	8004998 <UART_Transmit_IT+0x48>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]
 8004996:	e008      	b.n	80049aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1c59      	adds	r1, r3, #1
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6211      	str	r1, [r2, #32]
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4619      	mov	r1, r3
 80049b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe73 	bl	80046fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	@ 0x30
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b22      	cmp	r3, #34	@ 0x22
 8004a32:	f040 80ae 	bne.w	8004b92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3e:	d117      	bne.n	8004a70 <UART_Receive_IT+0x50>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a6e:	e026      	b.n	8004abe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	d007      	beq.n	8004a94 <UART_Receive_IT+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <UART_Receive_IT+0x82>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e008      	b.n	8004ab4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d15d      	bne.n	8004b8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0220 	bic.w	r2, r2, #32
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d135      	bne.n	8004b84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 0310 	bic.w	r3, r3, #16
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	623a      	str	r2, [r7, #32]
 8004b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d10a      	bne.n	8004b76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fdd1 	bl	8004724 <HAL_UARTEx_RxEventCallback>
 8004b82:	e002      	b.n	8004b8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fb ff1b 	bl	80009c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e002      	b.n	8004b94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3730      	adds	r7, #48	@ 0x30
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b0c0      	sub	sp, #256	@ 0x100
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	68d9      	ldr	r1, [r3, #12]
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	ea40 0301 	orr.w	r3, r0, r1
 8004bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bf4:	f021 010c 	bic.w	r1, r1, #12
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c02:	430b      	orrs	r3, r1
 8004c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	6999      	ldr	r1, [r3, #24]
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	ea40 0301 	orr.w	r3, r0, r1
 8004c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e68 <UART_SetConfig+0x2cc>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d005      	beq.n	8004c3c <UART_SetConfig+0xa0>
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b8d      	ldr	r3, [pc, #564]	@ (8004e6c <UART_SetConfig+0x2d0>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d104      	bne.n	8004c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7fe fd7e 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 8004c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c44:	e003      	b.n	8004c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c46:	f7fe fd65 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8004c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c58:	f040 810c 	bne.w	8004e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c6e:	4622      	mov	r2, r4
 8004c70:	462b      	mov	r3, r5
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c76:	415b      	adcs	r3, r3
 8004c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c7e:	4621      	mov	r1, r4
 8004c80:	eb12 0801 	adds.w	r8, r2, r1
 8004c84:	4629      	mov	r1, r5
 8004c86:	eb43 0901 	adc.w	r9, r3, r1
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9e:	4690      	mov	r8, r2
 8004ca0:	4699      	mov	r9, r3
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	eb18 0303 	adds.w	r3, r8, r3
 8004ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cac:	462b      	mov	r3, r5
 8004cae:	eb49 0303 	adc.w	r3, r9, r3
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cca:	460b      	mov	r3, r1
 8004ccc:	18db      	adds	r3, r3, r3
 8004cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	eb42 0303 	adc.w	r3, r2, r3
 8004cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ce0:	f7fb fae6 	bl	80002b0 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	011c      	lsls	r4, r3, #4
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d14:	4641      	mov	r1, r8
 8004d16:	eb12 0a01 	adds.w	sl, r2, r1
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d34:	4692      	mov	sl, r2
 8004d36:	469b      	mov	fp, r3
 8004d38:	4643      	mov	r3, r8
 8004d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d42:	464b      	mov	r3, r9
 8004d44:	eb4b 0303 	adc.w	r3, fp, r3
 8004d48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d76:	f7fb fa9b 	bl	80002b0 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004d82:	fba3 2301 	umull	r2, r3, r3, r1
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2264      	movs	r2, #100	@ 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	1acb      	subs	r3, r1, r3
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004d98:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004da4:	441c      	add	r4, r3
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004db0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	18db      	adds	r3, r3, r3
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e22:	4613      	mov	r3, r2
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e32:	f7fb fa3d 	bl	80002b0 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	@ 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	3332      	adds	r3, #50	@ 0x32
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 0207 	and.w	r2, r3, #7
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4422      	add	r2, r4
 8004e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e64:	e106      	b.n	8005074 <UART_SetConfig+0x4d8>
 8004e66:	bf00      	nop
 8004e68:	40011000 	.word	0x40011000
 8004e6c:	40011400 	.word	0x40011400
 8004e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	1891      	adds	r1, r2, r2
 8004e8c:	6239      	str	r1, [r7, #32]
 8004e8e:	415b      	adcs	r3, r3
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e96:	4641      	mov	r1, r8
 8004e98:	1854      	adds	r4, r2, r1
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	00eb      	lsls	r3, r5, #3
 8004eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eae:	00e2      	lsls	r2, r4, #3
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	4643      	mov	r3, r8
 8004eb6:	18e3      	adds	r3, r4, r3
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	eb45 0303 	adc.w	r3, r5, r3
 8004ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	008b      	lsls	r3, r1, #2
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eec:	4621      	mov	r1, r4
 8004eee:	008a      	lsls	r2, r1, #2
 8004ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ef4:	f7fb f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b60      	ldr	r3, [pc, #384]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004efe:	fba3 2302 	umull	r2, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	011c      	lsls	r4, r3, #4
 8004f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	1891      	adds	r1, r2, r2
 8004f1e:	61b9      	str	r1, [r7, #24]
 8004f20:	415b      	adcs	r3, r3
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f28:	4641      	mov	r1, r8
 8004f2a:	1851      	adds	r1, r2, r1
 8004f2c:	6139      	str	r1, [r7, #16]
 8004f2e:	4649      	mov	r1, r9
 8004f30:	414b      	adcs	r3, r1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f40:	4659      	mov	r1, fp
 8004f42:	00cb      	lsls	r3, r1, #3
 8004f44:	4651      	mov	r1, sl
 8004f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	00ca      	lsls	r2, r1, #3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	4642      	mov	r2, r8
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	460a      	mov	r2, r1
 8004f60:	eb42 0303 	adc.w	r3, r2, r3
 8004f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f80:	4649      	mov	r1, r9
 8004f82:	008b      	lsls	r3, r1, #2
 8004f84:	4641      	mov	r1, r8
 8004f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	008a      	lsls	r2, r1, #2
 8004f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f92:	f7fb f98d 	bl	80002b0 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4b38      	ldr	r3, [pc, #224]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2264      	movs	r2, #100	@ 0x64
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	1acb      	subs	r3, r1, r3
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	3332      	adds	r3, #50	@ 0x32
 8004fb0:	4a33      	ldr	r2, [pc, #204]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fbc:	441c      	add	r4, r3
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	1851      	adds	r1, r2, r1
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4651      	mov	r1, sl
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4642      	mov	r2, r8
 800500a:	189b      	adds	r3, r3, r2
 800500c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500e:	464b      	mov	r3, r9
 8005010:	460a      	mov	r2, r1
 8005012:	eb42 0303 	adc.w	r3, r2, r3
 8005016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	663b      	str	r3, [r7, #96]	@ 0x60
 8005022:	667a      	str	r2, [r7, #100]	@ 0x64
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005030:	4649      	mov	r1, r9
 8005032:	008b      	lsls	r3, r1, #2
 8005034:	4641      	mov	r1, r8
 8005036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503a:	4641      	mov	r1, r8
 800503c:	008a      	lsls	r2, r1, #2
 800503e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005042:	f7fb f935 	bl	80002b0 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x4e4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x4e4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800507a:	46bd      	mov	sp, r7
 800507c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005080:	51eb851f 	.word	0x51eb851f

08005084 <std>:
 8005084:	2300      	movs	r3, #0
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	e9c0 3300 	strd	r3, r3, [r0]
 800508e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005092:	6083      	str	r3, [r0, #8]
 8005094:	8181      	strh	r1, [r0, #12]
 8005096:	6643      	str	r3, [r0, #100]	@ 0x64
 8005098:	81c2      	strh	r2, [r0, #14]
 800509a:	6183      	str	r3, [r0, #24]
 800509c:	4619      	mov	r1, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	305c      	adds	r0, #92	@ 0x5c
 80050a2:	f000 fa21 	bl	80054e8 <memset>
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <std+0x58>)
 80050a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <std+0x5c>)
 80050ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <std+0x60>)
 80050b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <std+0x64>)
 80050b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <std+0x68>)
 80050b8:	6224      	str	r4, [r4, #32]
 80050ba:	429c      	cmp	r4, r3
 80050bc:	d006      	beq.n	80050cc <std+0x48>
 80050be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050c2:	4294      	cmp	r4, r2
 80050c4:	d002      	beq.n	80050cc <std+0x48>
 80050c6:	33d0      	adds	r3, #208	@ 0xd0
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d105      	bne.n	80050d8 <std+0x54>
 80050cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d4:	f000 bb12 	b.w	80056fc <__retarget_lock_init_recursive>
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	08005339 	.word	0x08005339
 80050e0:	0800535b 	.word	0x0800535b
 80050e4:	08005393 	.word	0x08005393
 80050e8:	080053b7 	.word	0x080053b7
 80050ec:	20000ab0 	.word	0x20000ab0

080050f0 <stdio_exit_handler>:
 80050f0:	4a02      	ldr	r2, [pc, #8]	@ (80050fc <stdio_exit_handler+0xc>)
 80050f2:	4903      	ldr	r1, [pc, #12]	@ (8005100 <stdio_exit_handler+0x10>)
 80050f4:	4803      	ldr	r0, [pc, #12]	@ (8005104 <stdio_exit_handler+0x14>)
 80050f6:	f000 b869 	b.w	80051cc <_fwalk_sglue>
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	080062c5 	.word	0x080062c5
 8005104:	2000001c 	.word	0x2000001c

08005108 <cleanup_stdio>:
 8005108:	6841      	ldr	r1, [r0, #4]
 800510a:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <cleanup_stdio+0x34>)
 800510c:	4299      	cmp	r1, r3
 800510e:	b510      	push	{r4, lr}
 8005110:	4604      	mov	r4, r0
 8005112:	d001      	beq.n	8005118 <cleanup_stdio+0x10>
 8005114:	f001 f8d6 	bl	80062c4 <_fflush_r>
 8005118:	68a1      	ldr	r1, [r4, #8]
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <cleanup_stdio+0x38>)
 800511c:	4299      	cmp	r1, r3
 800511e:	d002      	beq.n	8005126 <cleanup_stdio+0x1e>
 8005120:	4620      	mov	r0, r4
 8005122:	f001 f8cf 	bl	80062c4 <_fflush_r>
 8005126:	68e1      	ldr	r1, [r4, #12]
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <cleanup_stdio+0x3c>)
 800512a:	4299      	cmp	r1, r3
 800512c:	d004      	beq.n	8005138 <cleanup_stdio+0x30>
 800512e:	4620      	mov	r0, r4
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	f001 b8c6 	b.w	80062c4 <_fflush_r>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	20000ab0 	.word	0x20000ab0
 8005140:	20000b18 	.word	0x20000b18
 8005144:	20000b80 	.word	0x20000b80

08005148 <global_stdio_init.part.0>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <global_stdio_init.part.0+0x30>)
 800514c:	4c0b      	ldr	r4, [pc, #44]	@ (800517c <global_stdio_init.part.0+0x34>)
 800514e:	4a0c      	ldr	r2, [pc, #48]	@ (8005180 <global_stdio_init.part.0+0x38>)
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	2200      	movs	r2, #0
 8005156:	2104      	movs	r1, #4
 8005158:	f7ff ff94 	bl	8005084 <std>
 800515c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005160:	2201      	movs	r2, #1
 8005162:	2109      	movs	r1, #9
 8005164:	f7ff ff8e 	bl	8005084 <std>
 8005168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800516c:	2202      	movs	r2, #2
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005172:	2112      	movs	r1, #18
 8005174:	f7ff bf86 	b.w	8005084 <std>
 8005178:	20000be8 	.word	0x20000be8
 800517c:	20000ab0 	.word	0x20000ab0
 8005180:	080050f1 	.word	0x080050f1

08005184 <__sfp_lock_acquire>:
 8005184:	4801      	ldr	r0, [pc, #4]	@ (800518c <__sfp_lock_acquire+0x8>)
 8005186:	f000 baba 	b.w	80056fe <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	20000bf1 	.word	0x20000bf1

08005190 <__sfp_lock_release>:
 8005190:	4801      	ldr	r0, [pc, #4]	@ (8005198 <__sfp_lock_release+0x8>)
 8005192:	f000 bab5 	b.w	8005700 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	20000bf1 	.word	0x20000bf1

0800519c <__sinit>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	f7ff fff0 	bl	8005184 <__sfp_lock_acquire>
 80051a4:	6a23      	ldr	r3, [r4, #32]
 80051a6:	b11b      	cbz	r3, 80051b0 <__sinit+0x14>
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ac:	f7ff bff0 	b.w	8005190 <__sfp_lock_release>
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <__sinit+0x28>)
 80051b2:	6223      	str	r3, [r4, #32]
 80051b4:	4b04      	ldr	r3, [pc, #16]	@ (80051c8 <__sinit+0x2c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f5      	bne.n	80051a8 <__sinit+0xc>
 80051bc:	f7ff ffc4 	bl	8005148 <global_stdio_init.part.0>
 80051c0:	e7f2      	b.n	80051a8 <__sinit+0xc>
 80051c2:	bf00      	nop
 80051c4:	08005109 	.word	0x08005109
 80051c8:	20000be8 	.word	0x20000be8

080051cc <_fwalk_sglue>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4607      	mov	r7, r0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	2600      	movs	r6, #0
 80051d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051dc:	f1b9 0901 	subs.w	r9, r9, #1
 80051e0:	d505      	bpl.n	80051ee <_fwalk_sglue+0x22>
 80051e2:	6824      	ldr	r4, [r4, #0]
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d1f7      	bne.n	80051d8 <_fwalk_sglue+0xc>
 80051e8:	4630      	mov	r0, r6
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <_fwalk_sglue+0x38>
 80051f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f8:	3301      	adds	r3, #1
 80051fa:	d003      	beq.n	8005204 <_fwalk_sglue+0x38>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	4306      	orrs	r6, r0
 8005204:	3568      	adds	r5, #104	@ 0x68
 8005206:	e7e9      	b.n	80051dc <_fwalk_sglue+0x10>

08005208 <iprintf>:
 8005208:	b40f      	push	{r0, r1, r2, r3}
 800520a:	b507      	push	{r0, r1, r2, lr}
 800520c:	4906      	ldr	r1, [pc, #24]	@ (8005228 <iprintf+0x20>)
 800520e:	ab04      	add	r3, sp, #16
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	f853 2b04 	ldr.w	r2, [r3], #4
 8005216:	6881      	ldr	r1, [r0, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f000 fd29 	bl	8005c70 <_vfiprintf_r>
 800521e:	b003      	add	sp, #12
 8005220:	f85d eb04 	ldr.w	lr, [sp], #4
 8005224:	b004      	add	sp, #16
 8005226:	4770      	bx	lr
 8005228:	20000018 	.word	0x20000018

0800522c <putchar>:
 800522c:	4b02      	ldr	r3, [pc, #8]	@ (8005238 <putchar+0xc>)
 800522e:	4601      	mov	r1, r0
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	6882      	ldr	r2, [r0, #8]
 8005234:	f001 b8e2 	b.w	80063fc <_putc_r>
 8005238:	20000018 	.word	0x20000018

0800523c <_puts_r>:
 800523c:	6a03      	ldr	r3, [r0, #32]
 800523e:	b570      	push	{r4, r5, r6, lr}
 8005240:	6884      	ldr	r4, [r0, #8]
 8005242:	4605      	mov	r5, r0
 8005244:	460e      	mov	r6, r1
 8005246:	b90b      	cbnz	r3, 800524c <_puts_r+0x10>
 8005248:	f7ff ffa8 	bl	800519c <__sinit>
 800524c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800524e:	07db      	lsls	r3, r3, #31
 8005250:	d405      	bmi.n	800525e <_puts_r+0x22>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	0598      	lsls	r0, r3, #22
 8005256:	d402      	bmi.n	800525e <_puts_r+0x22>
 8005258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800525a:	f000 fa50 	bl	80056fe <__retarget_lock_acquire_recursive>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	0719      	lsls	r1, r3, #28
 8005262:	d502      	bpl.n	800526a <_puts_r+0x2e>
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d135      	bne.n	80052d6 <_puts_r+0x9a>
 800526a:	4621      	mov	r1, r4
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f8e5 	bl	800543c <__swsetup_r>
 8005272:	b380      	cbz	r0, 80052d6 <_puts_r+0x9a>
 8005274:	f04f 35ff 	mov.w	r5, #4294967295
 8005278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800527a:	07da      	lsls	r2, r3, #31
 800527c:	d405      	bmi.n	800528a <_puts_r+0x4e>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	059b      	lsls	r3, r3, #22
 8005282:	d402      	bmi.n	800528a <_puts_r+0x4e>
 8005284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005286:	f000 fa3b 	bl	8005700 <__retarget_lock_release_recursive>
 800528a:	4628      	mov	r0, r5
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	2b00      	cmp	r3, #0
 8005290:	da04      	bge.n	800529c <_puts_r+0x60>
 8005292:	69a2      	ldr	r2, [r4, #24]
 8005294:	429a      	cmp	r2, r3
 8005296:	dc17      	bgt.n	80052c8 <_puts_r+0x8c>
 8005298:	290a      	cmp	r1, #10
 800529a:	d015      	beq.n	80052c8 <_puts_r+0x8c>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	7019      	strb	r1, [r3, #0]
 80052a4:	68a3      	ldr	r3, [r4, #8]
 80052a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60a3      	str	r3, [r4, #8]
 80052ae:	2900      	cmp	r1, #0
 80052b0:	d1ed      	bne.n	800528e <_puts_r+0x52>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da11      	bge.n	80052da <_puts_r+0x9e>
 80052b6:	4622      	mov	r2, r4
 80052b8:	210a      	movs	r1, #10
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f87f 	bl	80053be <__swbuf_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	d0d7      	beq.n	8005274 <_puts_r+0x38>
 80052c4:	250a      	movs	r5, #10
 80052c6:	e7d7      	b.n	8005278 <_puts_r+0x3c>
 80052c8:	4622      	mov	r2, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f877 	bl	80053be <__swbuf_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d1e7      	bne.n	80052a4 <_puts_r+0x68>
 80052d4:	e7ce      	b.n	8005274 <_puts_r+0x38>
 80052d6:	3e01      	subs	r6, #1
 80052d8:	e7e4      	b.n	80052a4 <_puts_r+0x68>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	220a      	movs	r2, #10
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e7ee      	b.n	80052c4 <_puts_r+0x88>
	...

080052e8 <puts>:
 80052e8:	4b02      	ldr	r3, [pc, #8]	@ (80052f4 <puts+0xc>)
 80052ea:	4601      	mov	r1, r0
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f7ff bfa5 	b.w	800523c <_puts_r>
 80052f2:	bf00      	nop
 80052f4:	20000018 	.word	0x20000018

080052f8 <siprintf>:
 80052f8:	b40e      	push	{r1, r2, r3}
 80052fa:	b500      	push	{lr}
 80052fc:	b09c      	sub	sp, #112	@ 0x70
 80052fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8005300:	9002      	str	r0, [sp, #8]
 8005302:	9006      	str	r0, [sp, #24]
 8005304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005308:	4809      	ldr	r0, [pc, #36]	@ (8005330 <siprintf+0x38>)
 800530a:	9107      	str	r1, [sp, #28]
 800530c:	9104      	str	r1, [sp, #16]
 800530e:	4909      	ldr	r1, [pc, #36]	@ (8005334 <siprintf+0x3c>)
 8005310:	f853 2b04 	ldr.w	r2, [r3], #4
 8005314:	9105      	str	r1, [sp, #20]
 8005316:	6800      	ldr	r0, [r0, #0]
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	a902      	add	r1, sp, #8
 800531c:	f000 fb82 	bl	8005a24 <_svfiprintf_r>
 8005320:	9b02      	ldr	r3, [sp, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	b01c      	add	sp, #112	@ 0x70
 8005328:	f85d eb04 	ldr.w	lr, [sp], #4
 800532c:	b003      	add	sp, #12
 800532e:	4770      	bx	lr
 8005330:	20000018 	.word	0x20000018
 8005334:	ffff0208 	.word	0xffff0208

08005338 <__sread>:
 8005338:	b510      	push	{r4, lr}
 800533a:	460c      	mov	r4, r1
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	f000 f98e 	bl	8005660 <_read_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	bfab      	itete	ge
 8005348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800534a:	89a3      	ldrhlt	r3, [r4, #12]
 800534c:	181b      	addge	r3, r3, r0
 800534e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005352:	bfac      	ite	ge
 8005354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005356:	81a3      	strhlt	r3, [r4, #12]
 8005358:	bd10      	pop	{r4, pc}

0800535a <__swrite>:
 800535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	461f      	mov	r7, r3
 8005360:	898b      	ldrh	r3, [r1, #12]
 8005362:	05db      	lsls	r3, r3, #23
 8005364:	4605      	mov	r5, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4616      	mov	r6, r2
 800536a:	d505      	bpl.n	8005378 <__swrite+0x1e>
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	2302      	movs	r3, #2
 8005372:	2200      	movs	r2, #0
 8005374:	f000 f962 	bl	800563c <_lseek_r>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	4628      	mov	r0, r5
 800538a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	f000 b979 	b.w	8005684 <_write_r>

08005392 <__sseek>:
 8005392:	b510      	push	{r4, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 f94f 	bl	800563c <_lseek_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	bf15      	itete	ne
 80053a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ae:	81a3      	strheq	r3, [r4, #12]
 80053b0:	bf18      	it	ne
 80053b2:	81a3      	strhne	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__sclose>:
 80053b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ba:	f000 b92f 	b.w	800561c <_close_r>

080053be <__swbuf_r>:
 80053be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c0:	460e      	mov	r6, r1
 80053c2:	4614      	mov	r4, r2
 80053c4:	4605      	mov	r5, r0
 80053c6:	b118      	cbz	r0, 80053d0 <__swbuf_r+0x12>
 80053c8:	6a03      	ldr	r3, [r0, #32]
 80053ca:	b90b      	cbnz	r3, 80053d0 <__swbuf_r+0x12>
 80053cc:	f7ff fee6 	bl	800519c <__sinit>
 80053d0:	69a3      	ldr	r3, [r4, #24]
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	071a      	lsls	r2, r3, #28
 80053d8:	d501      	bpl.n	80053de <__swbuf_r+0x20>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	b943      	cbnz	r3, 80053f0 <__swbuf_r+0x32>
 80053de:	4621      	mov	r1, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f82b 	bl	800543c <__swsetup_r>
 80053e6:	b118      	cbz	r0, 80053f0 <__swbuf_r+0x32>
 80053e8:	f04f 37ff 	mov.w	r7, #4294967295
 80053ec:	4638      	mov	r0, r7
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	6922      	ldr	r2, [r4, #16]
 80053f4:	1a98      	subs	r0, r3, r2
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	b2f6      	uxtb	r6, r6
 80053fa:	4283      	cmp	r3, r0
 80053fc:	4637      	mov	r7, r6
 80053fe:	dc05      	bgt.n	800540c <__swbuf_r+0x4e>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f000 ff5e 	bl	80062c4 <_fflush_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	d1ed      	bne.n	80053e8 <__swbuf_r+0x2a>
 800540c:	68a3      	ldr	r3, [r4, #8]
 800540e:	3b01      	subs	r3, #1
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	701e      	strb	r6, [r3, #0]
 800541a:	6962      	ldr	r2, [r4, #20]
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	429a      	cmp	r2, r3
 8005420:	d004      	beq.n	800542c <__swbuf_r+0x6e>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	07db      	lsls	r3, r3, #31
 8005426:	d5e1      	bpl.n	80053ec <__swbuf_r+0x2e>
 8005428:	2e0a      	cmp	r6, #10
 800542a:	d1df      	bne.n	80053ec <__swbuf_r+0x2e>
 800542c:	4621      	mov	r1, r4
 800542e:	4628      	mov	r0, r5
 8005430:	f000 ff48 	bl	80062c4 <_fflush_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	d0d9      	beq.n	80053ec <__swbuf_r+0x2e>
 8005438:	e7d6      	b.n	80053e8 <__swbuf_r+0x2a>
	...

0800543c <__swsetup_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4b29      	ldr	r3, [pc, #164]	@ (80054e4 <__swsetup_r+0xa8>)
 8005440:	4605      	mov	r5, r0
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	460c      	mov	r4, r1
 8005446:	b118      	cbz	r0, 8005450 <__swsetup_r+0x14>
 8005448:	6a03      	ldr	r3, [r0, #32]
 800544a:	b90b      	cbnz	r3, 8005450 <__swsetup_r+0x14>
 800544c:	f7ff fea6 	bl	800519c <__sinit>
 8005450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005454:	0719      	lsls	r1, r3, #28
 8005456:	d422      	bmi.n	800549e <__swsetup_r+0x62>
 8005458:	06da      	lsls	r2, r3, #27
 800545a:	d407      	bmi.n	800546c <__swsetup_r+0x30>
 800545c:	2209      	movs	r2, #9
 800545e:	602a      	str	r2, [r5, #0]
 8005460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	e033      	b.n	80054d4 <__swsetup_r+0x98>
 800546c:	0758      	lsls	r0, r3, #29
 800546e:	d512      	bpl.n	8005496 <__swsetup_r+0x5a>
 8005470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005472:	b141      	cbz	r1, 8005486 <__swsetup_r+0x4a>
 8005474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005478:	4299      	cmp	r1, r3
 800547a:	d002      	beq.n	8005482 <__swsetup_r+0x46>
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f975 	bl	800576c <_free_r>
 8005482:	2300      	movs	r3, #0
 8005484:	6363      	str	r3, [r4, #52]	@ 0x34
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f043 0308 	orr.w	r3, r3, #8
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	b94b      	cbnz	r3, 80054b6 <__swsetup_r+0x7a>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ac:	d003      	beq.n	80054b6 <__swsetup_r+0x7a>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 ff67 	bl	8006384 <__smakebuf_r>
 80054b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ba:	f013 0201 	ands.w	r2, r3, #1
 80054be:	d00a      	beq.n	80054d6 <__swsetup_r+0x9a>
 80054c0:	2200      	movs	r2, #0
 80054c2:	60a2      	str	r2, [r4, #8]
 80054c4:	6962      	ldr	r2, [r4, #20]
 80054c6:	4252      	negs	r2, r2
 80054c8:	61a2      	str	r2, [r4, #24]
 80054ca:	6922      	ldr	r2, [r4, #16]
 80054cc:	b942      	cbnz	r2, 80054e0 <__swsetup_r+0xa4>
 80054ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054d2:	d1c5      	bne.n	8005460 <__swsetup_r+0x24>
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
 80054d6:	0799      	lsls	r1, r3, #30
 80054d8:	bf58      	it	pl
 80054da:	6962      	ldrpl	r2, [r4, #20]
 80054dc:	60a2      	str	r2, [r4, #8]
 80054de:	e7f4      	b.n	80054ca <__swsetup_r+0x8e>
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7f7      	b.n	80054d4 <__swsetup_r+0x98>
 80054e4:	20000018 	.word	0x20000018

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <strchr>:
 80054f8:	b2c9      	uxtb	r1, r1
 80054fa:	4603      	mov	r3, r0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005502:	b112      	cbz	r2, 800550a <strchr+0x12>
 8005504:	428a      	cmp	r2, r1
 8005506:	d1f9      	bne.n	80054fc <strchr+0x4>
 8005508:	4770      	bx	lr
 800550a:	2900      	cmp	r1, #0
 800550c:	bf18      	it	ne
 800550e:	2000      	movne	r0, #0
 8005510:	4770      	bx	lr

08005512 <strncmp>:
 8005512:	b510      	push	{r4, lr}
 8005514:	b16a      	cbz	r2, 8005532 <strncmp+0x20>
 8005516:	3901      	subs	r1, #1
 8005518:	1884      	adds	r4, r0, r2
 800551a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005522:	429a      	cmp	r2, r3
 8005524:	d103      	bne.n	800552e <strncmp+0x1c>
 8005526:	42a0      	cmp	r0, r4
 8005528:	d001      	beq.n	800552e <strncmp+0x1c>
 800552a:	2a00      	cmp	r2, #0
 800552c:	d1f5      	bne.n	800551a <strncmp+0x8>
 800552e:	1ad0      	subs	r0, r2, r3
 8005530:	bd10      	pop	{r4, pc}
 8005532:	4610      	mov	r0, r2
 8005534:	e7fc      	b.n	8005530 <strncmp+0x1e>
	...

08005538 <strtok>:
 8005538:	4b16      	ldr	r3, [pc, #88]	@ (8005594 <strtok+0x5c>)
 800553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553e:	681f      	ldr	r7, [r3, #0]
 8005540:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005542:	4605      	mov	r5, r0
 8005544:	460e      	mov	r6, r1
 8005546:	b9ec      	cbnz	r4, 8005584 <strtok+0x4c>
 8005548:	2050      	movs	r0, #80	@ 0x50
 800554a:	f000 f959 	bl	8005800 <malloc>
 800554e:	4602      	mov	r2, r0
 8005550:	6478      	str	r0, [r7, #68]	@ 0x44
 8005552:	b920      	cbnz	r0, 800555e <strtok+0x26>
 8005554:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <strtok+0x60>)
 8005556:	4811      	ldr	r0, [pc, #68]	@ (800559c <strtok+0x64>)
 8005558:	215b      	movs	r1, #91	@ 0x5b
 800555a:	f000 f8e9 	bl	8005730 <__assert_func>
 800555e:	e9c0 4400 	strd	r4, r4, [r0]
 8005562:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005566:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800556a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800556e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005572:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005576:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800557a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800557e:	6184      	str	r4, [r0, #24]
 8005580:	7704      	strb	r4, [r0, #28]
 8005582:	6244      	str	r4, [r0, #36]	@ 0x24
 8005584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	2301      	movs	r3, #1
 800558c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	f000 b806 	b.w	80055a0 <__strtok_r>
 8005594:	20000018 	.word	0x20000018
 8005598:	08006c5c 	.word	0x08006c5c
 800559c:	08006c73 	.word	0x08006c73

080055a0 <__strtok_r>:
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a2:	4604      	mov	r4, r0
 80055a4:	b908      	cbnz	r0, 80055aa <__strtok_r+0xa>
 80055a6:	6814      	ldr	r4, [r2, #0]
 80055a8:	b144      	cbz	r4, 80055bc <__strtok_r+0x1c>
 80055aa:	4620      	mov	r0, r4
 80055ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80055b0:	460f      	mov	r7, r1
 80055b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80055b6:	b91e      	cbnz	r6, 80055c0 <__strtok_r+0x20>
 80055b8:	b965      	cbnz	r5, 80055d4 <__strtok_r+0x34>
 80055ba:	6015      	str	r5, [r2, #0]
 80055bc:	2000      	movs	r0, #0
 80055be:	e005      	b.n	80055cc <__strtok_r+0x2c>
 80055c0:	42b5      	cmp	r5, r6
 80055c2:	d1f6      	bne.n	80055b2 <__strtok_r+0x12>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f0      	bne.n	80055aa <__strtok_r+0xa>
 80055c8:	6014      	str	r4, [r2, #0]
 80055ca:	7003      	strb	r3, [r0, #0]
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	461c      	mov	r4, r3
 80055d0:	e00c      	b.n	80055ec <__strtok_r+0x4c>
 80055d2:	b915      	cbnz	r5, 80055da <__strtok_r+0x3a>
 80055d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055d8:	460e      	mov	r6, r1
 80055da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80055de:	42ab      	cmp	r3, r5
 80055e0:	d1f7      	bne.n	80055d2 <__strtok_r+0x32>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f3      	beq.n	80055ce <__strtok_r+0x2e>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	e7ed      	b.n	80055cc <__strtok_r+0x2c>

080055f0 <strstr>:
 80055f0:	780a      	ldrb	r2, [r1, #0]
 80055f2:	b570      	push	{r4, r5, r6, lr}
 80055f4:	b96a      	cbnz	r2, 8005612 <strstr+0x22>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d109      	bne.n	8005610 <strstr+0x20>
 80055fc:	460c      	mov	r4, r1
 80055fe:	4605      	mov	r5, r0
 8005600:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f6      	beq.n	80055f6 <strstr+0x6>
 8005608:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800560c:	429e      	cmp	r6, r3
 800560e:	d0f7      	beq.n	8005600 <strstr+0x10>
 8005610:	3001      	adds	r0, #1
 8005612:	7803      	ldrb	r3, [r0, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ef      	bne.n	80055f8 <strstr+0x8>
 8005618:	4618      	mov	r0, r3
 800561a:	e7ec      	b.n	80055f6 <strstr+0x6>

0800561c <_close_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	@ (8005638 <_close_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fc f81e 	bl	8001668 <_close>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_close_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_close_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000bec 	.word	0x20000bec

0800563c <_lseek_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_lseek_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fc f833 	bl	80016b6 <_lseek>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_lseek_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_lseek_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000bec 	.word	0x20000bec

08005660 <_read_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	@ (8005680 <_read_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fb ffc1 	bl	80015f6 <_read>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_read_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_read_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000bec 	.word	0x20000bec

08005684 <_write_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d07      	ldr	r5, [pc, #28]	@ (80056a4 <_write_r+0x20>)
 8005688:	4604      	mov	r4, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fb ffcc 	bl	8001630 <_write>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_write_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_write_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000bec 	.word	0x20000bec

080056a8 <__errno>:
 80056a8:	4b01      	ldr	r3, [pc, #4]	@ (80056b0 <__errno+0x8>)
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000018 	.word	0x20000018

080056b4 <__libc_init_array>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4d0d      	ldr	r5, [pc, #52]	@ (80056ec <__libc_init_array+0x38>)
 80056b8:	4c0d      	ldr	r4, [pc, #52]	@ (80056f0 <__libc_init_array+0x3c>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	2600      	movs	r6, #0
 80056c0:	42a6      	cmp	r6, r4
 80056c2:	d109      	bne.n	80056d8 <__libc_init_array+0x24>
 80056c4:	4d0b      	ldr	r5, [pc, #44]	@ (80056f4 <__libc_init_array+0x40>)
 80056c6:	4c0c      	ldr	r4, [pc, #48]	@ (80056f8 <__libc_init_array+0x44>)
 80056c8:	f000 ff9a 	bl	8006600 <_init>
 80056cc:	1b64      	subs	r4, r4, r5
 80056ce:	10a4      	asrs	r4, r4, #2
 80056d0:	2600      	movs	r6, #0
 80056d2:	42a6      	cmp	r6, r4
 80056d4:	d105      	bne.n	80056e2 <__libc_init_array+0x2e>
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056dc:	4798      	blx	r3
 80056de:	3601      	adds	r6, #1
 80056e0:	e7ee      	b.n	80056c0 <__libc_init_array+0xc>
 80056e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e6:	4798      	blx	r3
 80056e8:	3601      	adds	r6, #1
 80056ea:	e7f2      	b.n	80056d2 <__libc_init_array+0x1e>
 80056ec:	08006d44 	.word	0x08006d44
 80056f0:	08006d44 	.word	0x08006d44
 80056f4:	08006d44 	.word	0x08006d44
 80056f8:	08006d48 	.word	0x08006d48

080056fc <__retarget_lock_init_recursive>:
 80056fc:	4770      	bx	lr

080056fe <__retarget_lock_acquire_recursive>:
 80056fe:	4770      	bx	lr

08005700 <__retarget_lock_release_recursive>:
 8005700:	4770      	bx	lr

08005702 <strcpy>:
 8005702:	4603      	mov	r3, r0
 8005704:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005708:	f803 2b01 	strb.w	r2, [r3], #1
 800570c:	2a00      	cmp	r2, #0
 800570e:	d1f9      	bne.n	8005704 <strcpy+0x2>
 8005710:	4770      	bx	lr

08005712 <memcpy>:
 8005712:	440a      	add	r2, r1
 8005714:	4291      	cmp	r1, r2
 8005716:	f100 33ff 	add.w	r3, r0, #4294967295
 800571a:	d100      	bne.n	800571e <memcpy+0xc>
 800571c:	4770      	bx	lr
 800571e:	b510      	push	{r4, lr}
 8005720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	4291      	cmp	r1, r2
 800572a:	d1f9      	bne.n	8005720 <memcpy+0xe>
 800572c:	bd10      	pop	{r4, pc}
	...

08005730 <__assert_func>:
 8005730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005732:	4614      	mov	r4, r2
 8005734:	461a      	mov	r2, r3
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <__assert_func+0x2c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4605      	mov	r5, r0
 800573c:	68d8      	ldr	r0, [r3, #12]
 800573e:	b954      	cbnz	r4, 8005756 <__assert_func+0x26>
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <__assert_func+0x30>)
 8005742:	461c      	mov	r4, r3
 8005744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005748:	9100      	str	r1, [sp, #0]
 800574a:	462b      	mov	r3, r5
 800574c:	4905      	ldr	r1, [pc, #20]	@ (8005764 <__assert_func+0x34>)
 800574e:	f000 fde1 	bl	8006314 <fiprintf>
 8005752:	f000 fed3 	bl	80064fc <abort>
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__assert_func+0x38>)
 8005758:	e7f4      	b.n	8005744 <__assert_func+0x14>
 800575a:	bf00      	nop
 800575c:	20000018 	.word	0x20000018
 8005760:	08006d08 	.word	0x08006d08
 8005764:	08006cda 	.word	0x08006cda
 8005768:	08006ccd 	.word	0x08006ccd

0800576c <_free_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4605      	mov	r5, r0
 8005770:	2900      	cmp	r1, #0
 8005772:	d041      	beq.n	80057f8 <_free_r+0x8c>
 8005774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005778:	1f0c      	subs	r4, r1, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfb8      	it	lt
 800577e:	18e4      	addlt	r4, r4, r3
 8005780:	f000 f8e8 	bl	8005954 <__malloc_lock>
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <_free_r+0x90>)
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	b933      	cbnz	r3, 8005798 <_free_r+0x2c>
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	6014      	str	r4, [r2, #0]
 800578e:	4628      	mov	r0, r5
 8005790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005794:	f000 b8e4 	b.w	8005960 <__malloc_unlock>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d908      	bls.n	80057ae <_free_r+0x42>
 800579c:	6820      	ldr	r0, [r4, #0]
 800579e:	1821      	adds	r1, r4, r0
 80057a0:	428b      	cmp	r3, r1
 80057a2:	bf01      	itttt	eq
 80057a4:	6819      	ldreq	r1, [r3, #0]
 80057a6:	685b      	ldreq	r3, [r3, #4]
 80057a8:	1809      	addeq	r1, r1, r0
 80057aa:	6021      	streq	r1, [r4, #0]
 80057ac:	e7ed      	b.n	800578a <_free_r+0x1e>
 80057ae:	461a      	mov	r2, r3
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b10b      	cbz	r3, 80057b8 <_free_r+0x4c>
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d9fa      	bls.n	80057ae <_free_r+0x42>
 80057b8:	6811      	ldr	r1, [r2, #0]
 80057ba:	1850      	adds	r0, r2, r1
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d10b      	bne.n	80057d8 <_free_r+0x6c>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	4401      	add	r1, r0
 80057c4:	1850      	adds	r0, r2, r1
 80057c6:	4283      	cmp	r3, r0
 80057c8:	6011      	str	r1, [r2, #0]
 80057ca:	d1e0      	bne.n	800578e <_free_r+0x22>
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	6053      	str	r3, [r2, #4]
 80057d2:	4408      	add	r0, r1
 80057d4:	6010      	str	r0, [r2, #0]
 80057d6:	e7da      	b.n	800578e <_free_r+0x22>
 80057d8:	d902      	bls.n	80057e0 <_free_r+0x74>
 80057da:	230c      	movs	r3, #12
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	e7d6      	b.n	800578e <_free_r+0x22>
 80057e0:	6820      	ldr	r0, [r4, #0]
 80057e2:	1821      	adds	r1, r4, r0
 80057e4:	428b      	cmp	r3, r1
 80057e6:	bf04      	itt	eq
 80057e8:	6819      	ldreq	r1, [r3, #0]
 80057ea:	685b      	ldreq	r3, [r3, #4]
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	bf04      	itt	eq
 80057f0:	1809      	addeq	r1, r1, r0
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	6054      	str	r4, [r2, #4]
 80057f6:	e7ca      	b.n	800578e <_free_r+0x22>
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
 80057fa:	bf00      	nop
 80057fc:	20000bf8 	.word	0x20000bf8

08005800 <malloc>:
 8005800:	4b02      	ldr	r3, [pc, #8]	@ (800580c <malloc+0xc>)
 8005802:	4601      	mov	r1, r0
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	f000 b825 	b.w	8005854 <_malloc_r>
 800580a:	bf00      	nop
 800580c:	20000018 	.word	0x20000018

08005810 <sbrk_aligned>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4e0f      	ldr	r6, [pc, #60]	@ (8005850 <sbrk_aligned+0x40>)
 8005814:	460c      	mov	r4, r1
 8005816:	6831      	ldr	r1, [r6, #0]
 8005818:	4605      	mov	r5, r0
 800581a:	b911      	cbnz	r1, 8005822 <sbrk_aligned+0x12>
 800581c:	f000 fe5e 	bl	80064dc <_sbrk_r>
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 fe59 	bl	80064dc <_sbrk_r>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d103      	bne.n	8005836 <sbrk_aligned+0x26>
 800582e:	f04f 34ff 	mov.w	r4, #4294967295
 8005832:	4620      	mov	r0, r4
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d0f8      	beq.n	8005832 <sbrk_aligned+0x22>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fe4a 	bl	80064dc <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d1f2      	bne.n	8005832 <sbrk_aligned+0x22>
 800584c:	e7ef      	b.n	800582e <sbrk_aligned+0x1e>
 800584e:	bf00      	nop
 8005850:	20000bf4 	.word	0x20000bf4

08005854 <_malloc_r>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	1ccd      	adds	r5, r1, #3
 800585a:	f025 0503 	bic.w	r5, r5, #3
 800585e:	3508      	adds	r5, #8
 8005860:	2d0c      	cmp	r5, #12
 8005862:	bf38      	it	cc
 8005864:	250c      	movcc	r5, #12
 8005866:	2d00      	cmp	r5, #0
 8005868:	4606      	mov	r6, r0
 800586a:	db01      	blt.n	8005870 <_malloc_r+0x1c>
 800586c:	42a9      	cmp	r1, r5
 800586e:	d904      	bls.n	800587a <_malloc_r+0x26>
 8005870:	230c      	movs	r3, #12
 8005872:	6033      	str	r3, [r6, #0]
 8005874:	2000      	movs	r0, #0
 8005876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005950 <_malloc_r+0xfc>
 800587e:	f000 f869 	bl	8005954 <__malloc_lock>
 8005882:	f8d8 3000 	ldr.w	r3, [r8]
 8005886:	461c      	mov	r4, r3
 8005888:	bb44      	cbnz	r4, 80058dc <_malloc_r+0x88>
 800588a:	4629      	mov	r1, r5
 800588c:	4630      	mov	r0, r6
 800588e:	f7ff ffbf 	bl	8005810 <sbrk_aligned>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	4604      	mov	r4, r0
 8005896:	d158      	bne.n	800594a <_malloc_r+0xf6>
 8005898:	f8d8 4000 	ldr.w	r4, [r8]
 800589c:	4627      	mov	r7, r4
 800589e:	2f00      	cmp	r7, #0
 80058a0:	d143      	bne.n	800592a <_malloc_r+0xd6>
 80058a2:	2c00      	cmp	r4, #0
 80058a4:	d04b      	beq.n	800593e <_malloc_r+0xea>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	4639      	mov	r1, r7
 80058aa:	4630      	mov	r0, r6
 80058ac:	eb04 0903 	add.w	r9, r4, r3
 80058b0:	f000 fe14 	bl	80064dc <_sbrk_r>
 80058b4:	4581      	cmp	r9, r0
 80058b6:	d142      	bne.n	800593e <_malloc_r+0xea>
 80058b8:	6821      	ldr	r1, [r4, #0]
 80058ba:	1a6d      	subs	r5, r5, r1
 80058bc:	4629      	mov	r1, r5
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ffa6 	bl	8005810 <sbrk_aligned>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d03a      	beq.n	800593e <_malloc_r+0xea>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	442b      	add	r3, r5
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	f8d8 3000 	ldr.w	r3, [r8]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	bb62      	cbnz	r2, 8005930 <_malloc_r+0xdc>
 80058d6:	f8c8 7000 	str.w	r7, [r8]
 80058da:	e00f      	b.n	80058fc <_malloc_r+0xa8>
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	1b52      	subs	r2, r2, r5
 80058e0:	d420      	bmi.n	8005924 <_malloc_r+0xd0>
 80058e2:	2a0b      	cmp	r2, #11
 80058e4:	d917      	bls.n	8005916 <_malloc_r+0xc2>
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	6025      	str	r5, [r4, #0]
 80058ec:	bf18      	it	ne
 80058ee:	6059      	strne	r1, [r3, #4]
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	bf08      	it	eq
 80058f4:	f8c8 1000 	streq.w	r1, [r8]
 80058f8:	5162      	str	r2, [r4, r5]
 80058fa:	604b      	str	r3, [r1, #4]
 80058fc:	4630      	mov	r0, r6
 80058fe:	f000 f82f 	bl	8005960 <__malloc_unlock>
 8005902:	f104 000b 	add.w	r0, r4, #11
 8005906:	1d23      	adds	r3, r4, #4
 8005908:	f020 0007 	bic.w	r0, r0, #7
 800590c:	1ac2      	subs	r2, r0, r3
 800590e:	bf1c      	itt	ne
 8005910:	1a1b      	subne	r3, r3, r0
 8005912:	50a3      	strne	r3, [r4, r2]
 8005914:	e7af      	b.n	8005876 <_malloc_r+0x22>
 8005916:	6862      	ldr	r2, [r4, #4]
 8005918:	42a3      	cmp	r3, r4
 800591a:	bf0c      	ite	eq
 800591c:	f8c8 2000 	streq.w	r2, [r8]
 8005920:	605a      	strne	r2, [r3, #4]
 8005922:	e7eb      	b.n	80058fc <_malloc_r+0xa8>
 8005924:	4623      	mov	r3, r4
 8005926:	6864      	ldr	r4, [r4, #4]
 8005928:	e7ae      	b.n	8005888 <_malloc_r+0x34>
 800592a:	463c      	mov	r4, r7
 800592c:	687f      	ldr	r7, [r7, #4]
 800592e:	e7b6      	b.n	800589e <_malloc_r+0x4a>
 8005930:	461a      	mov	r2, r3
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	42a3      	cmp	r3, r4
 8005936:	d1fb      	bne.n	8005930 <_malloc_r+0xdc>
 8005938:	2300      	movs	r3, #0
 800593a:	6053      	str	r3, [r2, #4]
 800593c:	e7de      	b.n	80058fc <_malloc_r+0xa8>
 800593e:	230c      	movs	r3, #12
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	4630      	mov	r0, r6
 8005944:	f000 f80c 	bl	8005960 <__malloc_unlock>
 8005948:	e794      	b.n	8005874 <_malloc_r+0x20>
 800594a:	6005      	str	r5, [r0, #0]
 800594c:	e7d6      	b.n	80058fc <_malloc_r+0xa8>
 800594e:	bf00      	nop
 8005950:	20000bf8 	.word	0x20000bf8

08005954 <__malloc_lock>:
 8005954:	4801      	ldr	r0, [pc, #4]	@ (800595c <__malloc_lock+0x8>)
 8005956:	f7ff bed2 	b.w	80056fe <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	20000bf0 	.word	0x20000bf0

08005960 <__malloc_unlock>:
 8005960:	4801      	ldr	r0, [pc, #4]	@ (8005968 <__malloc_unlock+0x8>)
 8005962:	f7ff becd 	b.w	8005700 <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	20000bf0 	.word	0x20000bf0

0800596c <__ssputs_r>:
 800596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	688e      	ldr	r6, [r1, #8]
 8005972:	461f      	mov	r7, r3
 8005974:	42be      	cmp	r6, r7
 8005976:	680b      	ldr	r3, [r1, #0]
 8005978:	4682      	mov	sl, r0
 800597a:	460c      	mov	r4, r1
 800597c:	4690      	mov	r8, r2
 800597e:	d82d      	bhi.n	80059dc <__ssputs_r+0x70>
 8005980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005988:	d026      	beq.n	80059d8 <__ssputs_r+0x6c>
 800598a:	6965      	ldr	r5, [r4, #20]
 800598c:	6909      	ldr	r1, [r1, #16]
 800598e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005992:	eba3 0901 	sub.w	r9, r3, r1
 8005996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800599a:	1c7b      	adds	r3, r7, #1
 800599c:	444b      	add	r3, r9
 800599e:	106d      	asrs	r5, r5, #1
 80059a0:	429d      	cmp	r5, r3
 80059a2:	bf38      	it	cc
 80059a4:	461d      	movcc	r5, r3
 80059a6:	0553      	lsls	r3, r2, #21
 80059a8:	d527      	bpl.n	80059fa <__ssputs_r+0x8e>
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7ff ff52 	bl	8005854 <_malloc_r>
 80059b0:	4606      	mov	r6, r0
 80059b2:	b360      	cbz	r0, 8005a0e <__ssputs_r+0xa2>
 80059b4:	6921      	ldr	r1, [r4, #16]
 80059b6:	464a      	mov	r2, r9
 80059b8:	f7ff feab 	bl	8005712 <memcpy>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	6126      	str	r6, [r4, #16]
 80059ca:	6165      	str	r5, [r4, #20]
 80059cc:	444e      	add	r6, r9
 80059ce:	eba5 0509 	sub.w	r5, r5, r9
 80059d2:	6026      	str	r6, [r4, #0]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	463e      	mov	r6, r7
 80059d8:	42be      	cmp	r6, r7
 80059da:	d900      	bls.n	80059de <__ssputs_r+0x72>
 80059dc:	463e      	mov	r6, r7
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	4632      	mov	r2, r6
 80059e2:	4641      	mov	r1, r8
 80059e4:	f000 fd3e 	bl	8006464 <memmove>
 80059e8:	68a3      	ldr	r3, [r4, #8]
 80059ea:	1b9b      	subs	r3, r3, r6
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	4433      	add	r3, r6
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	2000      	movs	r0, #0
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	462a      	mov	r2, r5
 80059fc:	f000 fd85 	bl	800650a <_realloc_r>
 8005a00:	4606      	mov	r6, r0
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d1e0      	bne.n	80059c8 <__ssputs_r+0x5c>
 8005a06:	6921      	ldr	r1, [r4, #16]
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f7ff feaf 	bl	800576c <_free_r>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	f8ca 3000 	str.w	r3, [sl]
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	e7e9      	b.n	80059f6 <__ssputs_r+0x8a>
	...

08005a24 <_svfiprintf_r>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	4698      	mov	r8, r3
 8005a2a:	898b      	ldrh	r3, [r1, #12]
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	b09d      	sub	sp, #116	@ 0x74
 8005a30:	4607      	mov	r7, r0
 8005a32:	460d      	mov	r5, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	d510      	bpl.n	8005a5a <_svfiprintf_r+0x36>
 8005a38:	690b      	ldr	r3, [r1, #16]
 8005a3a:	b973      	cbnz	r3, 8005a5a <_svfiprintf_r+0x36>
 8005a3c:	2140      	movs	r1, #64	@ 0x40
 8005a3e:	f7ff ff09 	bl	8005854 <_malloc_r>
 8005a42:	6028      	str	r0, [r5, #0]
 8005a44:	6128      	str	r0, [r5, #16]
 8005a46:	b930      	cbnz	r0, 8005a56 <_svfiprintf_r+0x32>
 8005a48:	230c      	movs	r3, #12
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	b01d      	add	sp, #116	@ 0x74
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a56:	2340      	movs	r3, #64	@ 0x40
 8005a58:	616b      	str	r3, [r5, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5e:	2320      	movs	r3, #32
 8005a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a68:	2330      	movs	r3, #48	@ 0x30
 8005a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c08 <_svfiprintf_r+0x1e4>
 8005a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a72:	f04f 0901 	mov.w	r9, #1
 8005a76:	4623      	mov	r3, r4
 8005a78:	469a      	mov	sl, r3
 8005a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a7e:	b10a      	cbz	r2, 8005a84 <_svfiprintf_r+0x60>
 8005a80:	2a25      	cmp	r2, #37	@ 0x25
 8005a82:	d1f9      	bne.n	8005a78 <_svfiprintf_r+0x54>
 8005a84:	ebba 0b04 	subs.w	fp, sl, r4
 8005a88:	d00b      	beq.n	8005aa2 <_svfiprintf_r+0x7e>
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ff6b 	bl	800596c <__ssputs_r>
 8005a96:	3001      	adds	r0, #1
 8005a98:	f000 80a7 	beq.w	8005bea <_svfiprintf_r+0x1c6>
 8005a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a9e:	445a      	add	r2, fp
 8005aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 809f 	beq.w	8005bea <_svfiprintf_r+0x1c6>
 8005aac:	2300      	movs	r3, #0
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	9307      	str	r3, [sp, #28]
 8005abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ac4:	4654      	mov	r4, sl
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005acc:	484e      	ldr	r0, [pc, #312]	@ (8005c08 <_svfiprintf_r+0x1e4>)
 8005ace:	f7fa fb9f 	bl	8000210 <memchr>
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	b9d8      	cbnz	r0, 8005b0e <_svfiprintf_r+0xea>
 8005ad6:	06d0      	lsls	r0, r2, #27
 8005ad8:	bf44      	itt	mi
 8005ada:	2320      	movmi	r3, #32
 8005adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae0:	0711      	lsls	r1, r2, #28
 8005ae2:	bf44      	itt	mi
 8005ae4:	232b      	movmi	r3, #43	@ 0x2b
 8005ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aea:	f89a 3000 	ldrb.w	r3, [sl]
 8005aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af0:	d015      	beq.n	8005b1e <_svfiprintf_r+0xfa>
 8005af2:	9a07      	ldr	r2, [sp, #28]
 8005af4:	4654      	mov	r4, sl
 8005af6:	2000      	movs	r0, #0
 8005af8:	f04f 0c0a 	mov.w	ip, #10
 8005afc:	4621      	mov	r1, r4
 8005afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b02:	3b30      	subs	r3, #48	@ 0x30
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d94b      	bls.n	8005ba0 <_svfiprintf_r+0x17c>
 8005b08:	b1b0      	cbz	r0, 8005b38 <_svfiprintf_r+0x114>
 8005b0a:	9207      	str	r2, [sp, #28]
 8005b0c:	e014      	b.n	8005b38 <_svfiprintf_r+0x114>
 8005b0e:	eba0 0308 	sub.w	r3, r0, r8
 8005b12:	fa09 f303 	lsl.w	r3, r9, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	46a2      	mov	sl, r4
 8005b1c:	e7d2      	b.n	8005ac4 <_svfiprintf_r+0xa0>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	1d19      	adds	r1, r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9103      	str	r1, [sp, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfbb      	ittet	lt
 8005b2a:	425b      	neglt	r3, r3
 8005b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b30:	9307      	strge	r3, [sp, #28]
 8005b32:	9307      	strlt	r3, [sp, #28]
 8005b34:	bfb8      	it	lt
 8005b36:	9204      	strlt	r2, [sp, #16]
 8005b38:	7823      	ldrb	r3, [r4, #0]
 8005b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b3c:	d10a      	bne.n	8005b54 <_svfiprintf_r+0x130>
 8005b3e:	7863      	ldrb	r3, [r4, #1]
 8005b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b42:	d132      	bne.n	8005baa <_svfiprintf_r+0x186>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9203      	str	r2, [sp, #12]
 8005b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b50:	3402      	adds	r4, #2
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c18 <_svfiprintf_r+0x1f4>
 8005b58:	7821      	ldrb	r1, [r4, #0]
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	f7fa fb57 	bl	8000210 <memchr>
 8005b62:	b138      	cbz	r0, 8005b74 <_svfiprintf_r+0x150>
 8005b64:	9b04      	ldr	r3, [sp, #16]
 8005b66:	eba0 000a 	sub.w	r0, r0, sl
 8005b6a:	2240      	movs	r2, #64	@ 0x40
 8005b6c:	4082      	lsls	r2, r0
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	3401      	adds	r4, #1
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b78:	4824      	ldr	r0, [pc, #144]	@ (8005c0c <_svfiprintf_r+0x1e8>)
 8005b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b7e:	2206      	movs	r2, #6
 8005b80:	f7fa fb46 	bl	8000210 <memchr>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d036      	beq.n	8005bf6 <_svfiprintf_r+0x1d2>
 8005b88:	4b21      	ldr	r3, [pc, #132]	@ (8005c10 <_svfiprintf_r+0x1ec>)
 8005b8a:	bb1b      	cbnz	r3, 8005bd4 <_svfiprintf_r+0x1b0>
 8005b8c:	9b03      	ldr	r3, [sp, #12]
 8005b8e:	3307      	adds	r3, #7
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	3308      	adds	r3, #8
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9a:	4433      	add	r3, r6
 8005b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b9e:	e76a      	b.n	8005a76 <_svfiprintf_r+0x52>
 8005ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e7a8      	b.n	8005afc <_svfiprintf_r+0xd8>
 8005baa:	2300      	movs	r3, #0
 8005bac:	3401      	adds	r4, #1
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f04f 0c0a 	mov.w	ip, #10
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bbc:	3a30      	subs	r2, #48	@ 0x30
 8005bbe:	2a09      	cmp	r2, #9
 8005bc0:	d903      	bls.n	8005bca <_svfiprintf_r+0x1a6>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0c6      	beq.n	8005b54 <_svfiprintf_r+0x130>
 8005bc6:	9105      	str	r1, [sp, #20]
 8005bc8:	e7c4      	b.n	8005b54 <_svfiprintf_r+0x130>
 8005bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bce:	4604      	mov	r4, r0
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e7f0      	b.n	8005bb6 <_svfiprintf_r+0x192>
 8005bd4:	ab03      	add	r3, sp, #12
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	462a      	mov	r2, r5
 8005bda:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <_svfiprintf_r+0x1f0>)
 8005bdc:	a904      	add	r1, sp, #16
 8005bde:	4638      	mov	r0, r7
 8005be0:	f3af 8000 	nop.w
 8005be4:	1c42      	adds	r2, r0, #1
 8005be6:	4606      	mov	r6, r0
 8005be8:	d1d6      	bne.n	8005b98 <_svfiprintf_r+0x174>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	065b      	lsls	r3, r3, #25
 8005bee:	f53f af2d 	bmi.w	8005a4c <_svfiprintf_r+0x28>
 8005bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bf4:	e72c      	b.n	8005a50 <_svfiprintf_r+0x2c>
 8005bf6:	ab03      	add	r3, sp, #12
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <_svfiprintf_r+0x1f0>)
 8005bfe:	a904      	add	r1, sp, #16
 8005c00:	4638      	mov	r0, r7
 8005c02:	f000 f9bb 	bl	8005f7c <_printf_i>
 8005c06:	e7ed      	b.n	8005be4 <_svfiprintf_r+0x1c0>
 8005c08:	08006d09 	.word	0x08006d09
 8005c0c:	08006d13 	.word	0x08006d13
 8005c10:	00000000 	.word	0x00000000
 8005c14:	0800596d 	.word	0x0800596d
 8005c18:	08006d0f 	.word	0x08006d0f

08005c1c <__sfputc_r>:
 8005c1c:	6893      	ldr	r3, [r2, #8]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	b410      	push	{r4}
 8005c24:	6093      	str	r3, [r2, #8]
 8005c26:	da08      	bge.n	8005c3a <__sfputc_r+0x1e>
 8005c28:	6994      	ldr	r4, [r2, #24]
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	db01      	blt.n	8005c32 <__sfputc_r+0x16>
 8005c2e:	290a      	cmp	r1, #10
 8005c30:	d103      	bne.n	8005c3a <__sfputc_r+0x1e>
 8005c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c36:	f7ff bbc2 	b.w	80053be <__swbuf_r>
 8005c3a:	6813      	ldr	r3, [r2, #0]
 8005c3c:	1c58      	adds	r0, r3, #1
 8005c3e:	6010      	str	r0, [r2, #0]
 8005c40:	7019      	strb	r1, [r3, #0]
 8005c42:	4608      	mov	r0, r1
 8005c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <__sfputs_r>:
 8005c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	4614      	mov	r4, r2
 8005c52:	18d5      	adds	r5, r2, r3
 8005c54:	42ac      	cmp	r4, r5
 8005c56:	d101      	bne.n	8005c5c <__sfputs_r+0x12>
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e007      	b.n	8005c6c <__sfputs_r+0x22>
 8005c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c60:	463a      	mov	r2, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ffda 	bl	8005c1c <__sfputc_r>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d1f3      	bne.n	8005c54 <__sfputs_r+0xa>
 8005c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c70 <_vfiprintf_r>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	460d      	mov	r5, r1
 8005c76:	b09d      	sub	sp, #116	@ 0x74
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4698      	mov	r8, r3
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	b118      	cbz	r0, 8005c88 <_vfiprintf_r+0x18>
 8005c80:	6a03      	ldr	r3, [r0, #32]
 8005c82:	b90b      	cbnz	r3, 8005c88 <_vfiprintf_r+0x18>
 8005c84:	f7ff fa8a 	bl	800519c <__sinit>
 8005c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d405      	bmi.n	8005c9a <_vfiprintf_r+0x2a>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	059a      	lsls	r2, r3, #22
 8005c92:	d402      	bmi.n	8005c9a <_vfiprintf_r+0x2a>
 8005c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c96:	f7ff fd32 	bl	80056fe <__retarget_lock_acquire_recursive>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	071b      	lsls	r3, r3, #28
 8005c9e:	d501      	bpl.n	8005ca4 <_vfiprintf_r+0x34>
 8005ca0:	692b      	ldr	r3, [r5, #16]
 8005ca2:	b99b      	cbnz	r3, 8005ccc <_vfiprintf_r+0x5c>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7ff fbc8 	bl	800543c <__swsetup_r>
 8005cac:	b170      	cbz	r0, 8005ccc <_vfiprintf_r+0x5c>
 8005cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cb0:	07dc      	lsls	r4, r3, #31
 8005cb2:	d504      	bpl.n	8005cbe <_vfiprintf_r+0x4e>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	b01d      	add	sp, #116	@ 0x74
 8005cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbe:	89ab      	ldrh	r3, [r5, #12]
 8005cc0:	0598      	lsls	r0, r3, #22
 8005cc2:	d4f7      	bmi.n	8005cb4 <_vfiprintf_r+0x44>
 8005cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cc6:	f7ff fd1b 	bl	8005700 <__retarget_lock_release_recursive>
 8005cca:	e7f3      	b.n	8005cb4 <_vfiprintf_r+0x44>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cda:	2330      	movs	r3, #48	@ 0x30
 8005cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e8c <_vfiprintf_r+0x21c>
 8005ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ce4:	f04f 0901 	mov.w	r9, #1
 8005ce8:	4623      	mov	r3, r4
 8005cea:	469a      	mov	sl, r3
 8005cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf0:	b10a      	cbz	r2, 8005cf6 <_vfiprintf_r+0x86>
 8005cf2:	2a25      	cmp	r2, #37	@ 0x25
 8005cf4:	d1f9      	bne.n	8005cea <_vfiprintf_r+0x7a>
 8005cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfa:	d00b      	beq.n	8005d14 <_vfiprintf_r+0xa4>
 8005cfc:	465b      	mov	r3, fp
 8005cfe:	4622      	mov	r2, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ffa1 	bl	8005c4a <__sfputs_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f000 80a7 	beq.w	8005e5c <_vfiprintf_r+0x1ec>
 8005d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d10:	445a      	add	r2, fp
 8005d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d14:	f89a 3000 	ldrb.w	r3, [sl]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 809f 	beq.w	8005e5c <_vfiprintf_r+0x1ec>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d28:	f10a 0a01 	add.w	sl, sl, #1
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d36:	4654      	mov	r4, sl
 8005d38:	2205      	movs	r2, #5
 8005d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3e:	4853      	ldr	r0, [pc, #332]	@ (8005e8c <_vfiprintf_r+0x21c>)
 8005d40:	f7fa fa66 	bl	8000210 <memchr>
 8005d44:	9a04      	ldr	r2, [sp, #16]
 8005d46:	b9d8      	cbnz	r0, 8005d80 <_vfiprintf_r+0x110>
 8005d48:	06d1      	lsls	r1, r2, #27
 8005d4a:	bf44      	itt	mi
 8005d4c:	2320      	movmi	r3, #32
 8005d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d52:	0713      	lsls	r3, r2, #28
 8005d54:	bf44      	itt	mi
 8005d56:	232b      	movmi	r3, #43	@ 0x2b
 8005d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d62:	d015      	beq.n	8005d90 <_vfiprintf_r+0x120>
 8005d64:	9a07      	ldr	r2, [sp, #28]
 8005d66:	4654      	mov	r4, sl
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f04f 0c0a 	mov.w	ip, #10
 8005d6e:	4621      	mov	r1, r4
 8005d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d74:	3b30      	subs	r3, #48	@ 0x30
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d94b      	bls.n	8005e12 <_vfiprintf_r+0x1a2>
 8005d7a:	b1b0      	cbz	r0, 8005daa <_vfiprintf_r+0x13a>
 8005d7c:	9207      	str	r2, [sp, #28]
 8005d7e:	e014      	b.n	8005daa <_vfiprintf_r+0x13a>
 8005d80:	eba0 0308 	sub.w	r3, r0, r8
 8005d84:	fa09 f303 	lsl.w	r3, r9, r3
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	46a2      	mov	sl, r4
 8005d8e:	e7d2      	b.n	8005d36 <_vfiprintf_r+0xc6>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	1d19      	adds	r1, r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bfbb      	ittet	lt
 8005d9c:	425b      	neglt	r3, r3
 8005d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005da2:	9307      	strge	r3, [sp, #28]
 8005da4:	9307      	strlt	r3, [sp, #28]
 8005da6:	bfb8      	it	lt
 8005da8:	9204      	strlt	r2, [sp, #16]
 8005daa:	7823      	ldrb	r3, [r4, #0]
 8005dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dae:	d10a      	bne.n	8005dc6 <_vfiprintf_r+0x156>
 8005db0:	7863      	ldrb	r3, [r4, #1]
 8005db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db4:	d132      	bne.n	8005e1c <_vfiprintf_r+0x1ac>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	9203      	str	r2, [sp, #12]
 8005dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dc2:	3402      	adds	r4, #2
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e9c <_vfiprintf_r+0x22c>
 8005dca:	7821      	ldrb	r1, [r4, #0]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4650      	mov	r0, sl
 8005dd0:	f7fa fa1e 	bl	8000210 <memchr>
 8005dd4:	b138      	cbz	r0, 8005de6 <_vfiprintf_r+0x176>
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	eba0 000a 	sub.w	r0, r0, sl
 8005ddc:	2240      	movs	r2, #64	@ 0x40
 8005dde:	4082      	lsls	r2, r0
 8005de0:	4313      	orrs	r3, r2
 8005de2:	3401      	adds	r4, #1
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dea:	4829      	ldr	r0, [pc, #164]	@ (8005e90 <_vfiprintf_r+0x220>)
 8005dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005df0:	2206      	movs	r2, #6
 8005df2:	f7fa fa0d 	bl	8000210 <memchr>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d03f      	beq.n	8005e7a <_vfiprintf_r+0x20a>
 8005dfa:	4b26      	ldr	r3, [pc, #152]	@ (8005e94 <_vfiprintf_r+0x224>)
 8005dfc:	bb1b      	cbnz	r3, 8005e46 <_vfiprintf_r+0x1d6>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	3308      	adds	r3, #8
 8005e08:	9303      	str	r3, [sp, #12]
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	443b      	add	r3, r7
 8005e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e10:	e76a      	b.n	8005ce8 <_vfiprintf_r+0x78>
 8005e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e16:	460c      	mov	r4, r1
 8005e18:	2001      	movs	r0, #1
 8005e1a:	e7a8      	b.n	8005d6e <_vfiprintf_r+0xfe>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	3401      	adds	r4, #1
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	4619      	mov	r1, r3
 8005e24:	f04f 0c0a 	mov.w	ip, #10
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2e:	3a30      	subs	r2, #48	@ 0x30
 8005e30:	2a09      	cmp	r2, #9
 8005e32:	d903      	bls.n	8005e3c <_vfiprintf_r+0x1cc>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0c6      	beq.n	8005dc6 <_vfiprintf_r+0x156>
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	e7c4      	b.n	8005dc6 <_vfiprintf_r+0x156>
 8005e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e40:	4604      	mov	r4, r0
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7f0      	b.n	8005e28 <_vfiprintf_r+0x1b8>
 8005e46:	ab03      	add	r3, sp, #12
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <_vfiprintf_r+0x228>)
 8005e4e:	a904      	add	r1, sp, #16
 8005e50:	4630      	mov	r0, r6
 8005e52:	f3af 8000 	nop.w
 8005e56:	4607      	mov	r7, r0
 8005e58:	1c78      	adds	r0, r7, #1
 8005e5a:	d1d6      	bne.n	8005e0a <_vfiprintf_r+0x19a>
 8005e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e5e:	07d9      	lsls	r1, r3, #31
 8005e60:	d405      	bmi.n	8005e6e <_vfiprintf_r+0x1fe>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	059a      	lsls	r2, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_vfiprintf_r+0x1fe>
 8005e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e6a:	f7ff fc49 	bl	8005700 <__retarget_lock_release_recursive>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	065b      	lsls	r3, r3, #25
 8005e72:	f53f af1f 	bmi.w	8005cb4 <_vfiprintf_r+0x44>
 8005e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e78:	e71e      	b.n	8005cb8 <_vfiprintf_r+0x48>
 8005e7a:	ab03      	add	r3, sp, #12
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <_vfiprintf_r+0x228>)
 8005e82:	a904      	add	r1, sp, #16
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f879 	bl	8005f7c <_printf_i>
 8005e8a:	e7e4      	b.n	8005e56 <_vfiprintf_r+0x1e6>
 8005e8c:	08006d09 	.word	0x08006d09
 8005e90:	08006d13 	.word	0x08006d13
 8005e94:	00000000 	.word	0x00000000
 8005e98:	08005c4b 	.word	0x08005c4b
 8005e9c:	08006d0f 	.word	0x08006d0f

08005ea0 <_printf_common>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	4698      	mov	r8, r3
 8005ea8:	688a      	ldr	r2, [r1, #8]
 8005eaa:	690b      	ldr	r3, [r1, #16]
 8005eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bfb8      	it	lt
 8005eb4:	4613      	movlt	r3, r2
 8005eb6:	6033      	str	r3, [r6, #0]
 8005eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	b10a      	cbz	r2, 8005ec6 <_printf_common+0x26>
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	0699      	lsls	r1, r3, #26
 8005eca:	bf42      	ittt	mi
 8005ecc:	6833      	ldrmi	r3, [r6, #0]
 8005ece:	3302      	addmi	r3, #2
 8005ed0:	6033      	strmi	r3, [r6, #0]
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	f015 0506 	ands.w	r5, r5, #6
 8005ed8:	d106      	bne.n	8005ee8 <_printf_common+0x48>
 8005eda:	f104 0a19 	add.w	sl, r4, #25
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	6832      	ldr	r2, [r6, #0]
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	dc26      	bgt.n	8005f36 <_printf_common+0x96>
 8005ee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	3b00      	subs	r3, #0
 8005ef0:	bf18      	it	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	0692      	lsls	r2, r2, #26
 8005ef6:	d42b      	bmi.n	8005f50 <_printf_common+0xb0>
 8005ef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005efc:	4641      	mov	r1, r8
 8005efe:	4638      	mov	r0, r7
 8005f00:	47c8      	blx	r9
 8005f02:	3001      	adds	r0, #1
 8005f04:	d01e      	beq.n	8005f44 <_printf_common+0xa4>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	f003 0306 	and.w	r3, r3, #6
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	bf02      	ittt	eq
 8005f12:	68e5      	ldreq	r5, [r4, #12]
 8005f14:	6833      	ldreq	r3, [r6, #0]
 8005f16:	1aed      	subeq	r5, r5, r3
 8005f18:	68a3      	ldr	r3, [r4, #8]
 8005f1a:	bf0c      	ite	eq
 8005f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f20:	2500      	movne	r5, #0
 8005f22:	4293      	cmp	r3, r2
 8005f24:	bfc4      	itt	gt
 8005f26:	1a9b      	subgt	r3, r3, r2
 8005f28:	18ed      	addgt	r5, r5, r3
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	341a      	adds	r4, #26
 8005f2e:	42b5      	cmp	r5, r6
 8005f30:	d11a      	bne.n	8005f68 <_printf_common+0xc8>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e008      	b.n	8005f48 <_printf_common+0xa8>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4652      	mov	r2, sl
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	47c8      	blx	r9
 8005f40:	3001      	adds	r0, #1
 8005f42:	d103      	bne.n	8005f4c <_printf_common+0xac>
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	e7c6      	b.n	8005ede <_printf_common+0x3e>
 8005f50:	18e1      	adds	r1, r4, r3
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	2030      	movs	r0, #48	@ 0x30
 8005f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f5a:	4422      	add	r2, r4
 8005f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f64:	3302      	adds	r3, #2
 8005f66:	e7c7      	b.n	8005ef8 <_printf_common+0x58>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	4638      	mov	r0, r7
 8005f70:	47c8      	blx	r9
 8005f72:	3001      	adds	r0, #1
 8005f74:	d0e6      	beq.n	8005f44 <_printf_common+0xa4>
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7d9      	b.n	8005f2e <_printf_common+0x8e>
	...

08005f7c <_printf_i>:
 8005f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	7e0f      	ldrb	r7, [r1, #24]
 8005f82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f84:	2f78      	cmp	r7, #120	@ 0x78
 8005f86:	4691      	mov	r9, r2
 8005f88:	4680      	mov	r8, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f92:	d807      	bhi.n	8005fa4 <_printf_i+0x28>
 8005f94:	2f62      	cmp	r7, #98	@ 0x62
 8005f96:	d80a      	bhi.n	8005fae <_printf_i+0x32>
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	f000 80d2 	beq.w	8006142 <_printf_i+0x1c6>
 8005f9e:	2f58      	cmp	r7, #88	@ 0x58
 8005fa0:	f000 80b9 	beq.w	8006116 <_printf_i+0x19a>
 8005fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fac:	e03a      	b.n	8006024 <_printf_i+0xa8>
 8005fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fb2:	2b15      	cmp	r3, #21
 8005fb4:	d8f6      	bhi.n	8005fa4 <_printf_i+0x28>
 8005fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fbc <_printf_i+0x40>)
 8005fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006029 	.word	0x08006029
 8005fc4:	08005fa5 	.word	0x08005fa5
 8005fc8:	08005fa5 	.word	0x08005fa5
 8005fcc:	08005fa5 	.word	0x08005fa5
 8005fd0:	08005fa5 	.word	0x08005fa5
 8005fd4:	08006029 	.word	0x08006029
 8005fd8:	08005fa5 	.word	0x08005fa5
 8005fdc:	08005fa5 	.word	0x08005fa5
 8005fe0:	08005fa5 	.word	0x08005fa5
 8005fe4:	08005fa5 	.word	0x08005fa5
 8005fe8:	08006129 	.word	0x08006129
 8005fec:	08006053 	.word	0x08006053
 8005ff0:	080060e3 	.word	0x080060e3
 8005ff4:	08005fa5 	.word	0x08005fa5
 8005ff8:	08005fa5 	.word	0x08005fa5
 8005ffc:	0800614b 	.word	0x0800614b
 8006000:	08005fa5 	.word	0x08005fa5
 8006004:	08006053 	.word	0x08006053
 8006008:	08005fa5 	.word	0x08005fa5
 800600c:	08005fa5 	.word	0x08005fa5
 8006010:	080060eb 	.word	0x080060eb
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006024:	2301      	movs	r3, #1
 8006026:	e09d      	b.n	8006164 <_printf_i+0x1e8>
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	1d19      	adds	r1, r3, #4
 800602e:	6031      	str	r1, [r6, #0]
 8006030:	0606      	lsls	r6, r0, #24
 8006032:	d501      	bpl.n	8006038 <_printf_i+0xbc>
 8006034:	681d      	ldr	r5, [r3, #0]
 8006036:	e003      	b.n	8006040 <_printf_i+0xc4>
 8006038:	0645      	lsls	r5, r0, #25
 800603a:	d5fb      	bpl.n	8006034 <_printf_i+0xb8>
 800603c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006040:	2d00      	cmp	r5, #0
 8006042:	da03      	bge.n	800604c <_printf_i+0xd0>
 8006044:	232d      	movs	r3, #45	@ 0x2d
 8006046:	426d      	negs	r5, r5
 8006048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800604c:	4859      	ldr	r0, [pc, #356]	@ (80061b4 <_printf_i+0x238>)
 800604e:	230a      	movs	r3, #10
 8006050:	e011      	b.n	8006076 <_printf_i+0xfa>
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	0608      	lsls	r0, r1, #24
 8006058:	f853 5b04 	ldr.w	r5, [r3], #4
 800605c:	d402      	bmi.n	8006064 <_printf_i+0xe8>
 800605e:	0649      	lsls	r1, r1, #25
 8006060:	bf48      	it	mi
 8006062:	b2ad      	uxthmi	r5, r5
 8006064:	2f6f      	cmp	r7, #111	@ 0x6f
 8006066:	4853      	ldr	r0, [pc, #332]	@ (80061b4 <_printf_i+0x238>)
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	bf14      	ite	ne
 800606c:	230a      	movne	r3, #10
 800606e:	2308      	moveq	r3, #8
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006076:	6866      	ldr	r6, [r4, #4]
 8006078:	60a6      	str	r6, [r4, #8]
 800607a:	2e00      	cmp	r6, #0
 800607c:	bfa2      	ittt	ge
 800607e:	6821      	ldrge	r1, [r4, #0]
 8006080:	f021 0104 	bicge.w	r1, r1, #4
 8006084:	6021      	strge	r1, [r4, #0]
 8006086:	b90d      	cbnz	r5, 800608c <_printf_i+0x110>
 8006088:	2e00      	cmp	r6, #0
 800608a:	d04b      	beq.n	8006124 <_printf_i+0x1a8>
 800608c:	4616      	mov	r6, r2
 800608e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006092:	fb03 5711 	mls	r7, r3, r1, r5
 8006096:	5dc7      	ldrb	r7, [r0, r7]
 8006098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800609c:	462f      	mov	r7, r5
 800609e:	42bb      	cmp	r3, r7
 80060a0:	460d      	mov	r5, r1
 80060a2:	d9f4      	bls.n	800608e <_printf_i+0x112>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d10b      	bne.n	80060c0 <_printf_i+0x144>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07df      	lsls	r7, r3, #31
 80060ac:	d508      	bpl.n	80060c0 <_printf_i+0x144>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	6861      	ldr	r1, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	bfde      	ittt	le
 80060b6:	2330      	movle	r3, #48	@ 0x30
 80060b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060c0:	1b92      	subs	r2, r2, r6
 80060c2:	6122      	str	r2, [r4, #16]
 80060c4:	f8cd a000 	str.w	sl, [sp]
 80060c8:	464b      	mov	r3, r9
 80060ca:	aa03      	add	r2, sp, #12
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff fee6 	bl	8005ea0 <_printf_common>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d14a      	bne.n	800616e <_printf_i+0x1f2>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b004      	add	sp, #16
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f043 0320 	orr.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	4833      	ldr	r0, [pc, #204]	@ (80061b8 <_printf_i+0x23c>)
 80060ec:	2778      	movs	r7, #120	@ 0x78
 80060ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	6831      	ldr	r1, [r6, #0]
 80060f6:	061f      	lsls	r7, r3, #24
 80060f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80060fc:	d402      	bmi.n	8006104 <_printf_i+0x188>
 80060fe:	065f      	lsls	r7, r3, #25
 8006100:	bf48      	it	mi
 8006102:	b2ad      	uxthmi	r5, r5
 8006104:	6031      	str	r1, [r6, #0]
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	bf44      	itt	mi
 800610a:	f043 0320 	orrmi.w	r3, r3, #32
 800610e:	6023      	strmi	r3, [r4, #0]
 8006110:	b11d      	cbz	r5, 800611a <_printf_i+0x19e>
 8006112:	2310      	movs	r3, #16
 8006114:	e7ac      	b.n	8006070 <_printf_i+0xf4>
 8006116:	4827      	ldr	r0, [pc, #156]	@ (80061b4 <_printf_i+0x238>)
 8006118:	e7e9      	b.n	80060ee <_printf_i+0x172>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	f023 0320 	bic.w	r3, r3, #32
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	e7f6      	b.n	8006112 <_printf_i+0x196>
 8006124:	4616      	mov	r6, r2
 8006126:	e7bd      	b.n	80060a4 <_printf_i+0x128>
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	6961      	ldr	r1, [r4, #20]
 800612e:	1d18      	adds	r0, r3, #4
 8006130:	6030      	str	r0, [r6, #0]
 8006132:	062e      	lsls	r6, r5, #24
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	d501      	bpl.n	800613c <_printf_i+0x1c0>
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0x1c6>
 800613c:	0668      	lsls	r0, r5, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0x1bc>
 8006140:	8019      	strh	r1, [r3, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	4616      	mov	r6, r2
 8006148:	e7bc      	b.n	80060c4 <_printf_i+0x148>
 800614a:	6833      	ldr	r3, [r6, #0]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	6032      	str	r2, [r6, #0]
 8006150:	681e      	ldr	r6, [r3, #0]
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	2100      	movs	r1, #0
 8006156:	4630      	mov	r0, r6
 8006158:	f7fa f85a 	bl	8000210 <memchr>
 800615c:	b108      	cbz	r0, 8006162 <_printf_i+0x1e6>
 800615e:	1b80      	subs	r0, r0, r6
 8006160:	6060      	str	r0, [r4, #4]
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	2300      	movs	r3, #0
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616c:	e7aa      	b.n	80060c4 <_printf_i+0x148>
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	4632      	mov	r2, r6
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	47d0      	blx	sl
 8006178:	3001      	adds	r0, #1
 800617a:	d0ad      	beq.n	80060d8 <_printf_i+0x15c>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	079b      	lsls	r3, r3, #30
 8006180:	d413      	bmi.n	80061aa <_printf_i+0x22e>
 8006182:	68e0      	ldr	r0, [r4, #12]
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	4298      	cmp	r0, r3
 8006188:	bfb8      	it	lt
 800618a:	4618      	movlt	r0, r3
 800618c:	e7a6      	b.n	80060dc <_printf_i+0x160>
 800618e:	2301      	movs	r3, #1
 8006190:	4632      	mov	r2, r6
 8006192:	4649      	mov	r1, r9
 8006194:	4640      	mov	r0, r8
 8006196:	47d0      	blx	sl
 8006198:	3001      	adds	r0, #1
 800619a:	d09d      	beq.n	80060d8 <_printf_i+0x15c>
 800619c:	3501      	adds	r5, #1
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	9903      	ldr	r1, [sp, #12]
 80061a2:	1a5b      	subs	r3, r3, r1
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dcf2      	bgt.n	800618e <_printf_i+0x212>
 80061a8:	e7eb      	b.n	8006182 <_printf_i+0x206>
 80061aa:	2500      	movs	r5, #0
 80061ac:	f104 0619 	add.w	r6, r4, #25
 80061b0:	e7f5      	b.n	800619e <_printf_i+0x222>
 80061b2:	bf00      	nop
 80061b4:	08006d1a 	.word	0x08006d1a
 80061b8:	08006d2b 	.word	0x08006d2b

080061bc <__sflush_r>:
 80061bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c4:	0716      	lsls	r6, r2, #28
 80061c6:	4605      	mov	r5, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	d454      	bmi.n	8006276 <__sflush_r+0xba>
 80061cc:	684b      	ldr	r3, [r1, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dc02      	bgt.n	80061d8 <__sflush_r+0x1c>
 80061d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dd48      	ble.n	800626a <__sflush_r+0xae>
 80061d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061da:	2e00      	cmp	r6, #0
 80061dc:	d045      	beq.n	800626a <__sflush_r+0xae>
 80061de:	2300      	movs	r3, #0
 80061e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061e4:	682f      	ldr	r7, [r5, #0]
 80061e6:	6a21      	ldr	r1, [r4, #32]
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	d030      	beq.n	800624e <__sflush_r+0x92>
 80061ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	0759      	lsls	r1, r3, #29
 80061f2:	d505      	bpl.n	8006200 <__sflush_r+0x44>
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061fa:	b10b      	cbz	r3, 8006200 <__sflush_r+0x44>
 80061fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	2300      	movs	r3, #0
 8006202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006204:	6a21      	ldr	r1, [r4, #32]
 8006206:	4628      	mov	r0, r5
 8006208:	47b0      	blx	r6
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	d106      	bne.n	800621e <__sflush_r+0x62>
 8006210:	6829      	ldr	r1, [r5, #0]
 8006212:	291d      	cmp	r1, #29
 8006214:	d82b      	bhi.n	800626e <__sflush_r+0xb2>
 8006216:	4a2a      	ldr	r2, [pc, #168]	@ (80062c0 <__sflush_r+0x104>)
 8006218:	410a      	asrs	r2, r1
 800621a:	07d6      	lsls	r6, r2, #31
 800621c:	d427      	bmi.n	800626e <__sflush_r+0xb2>
 800621e:	2200      	movs	r2, #0
 8006220:	6062      	str	r2, [r4, #4]
 8006222:	04d9      	lsls	r1, r3, #19
 8006224:	6922      	ldr	r2, [r4, #16]
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	d504      	bpl.n	8006234 <__sflush_r+0x78>
 800622a:	1c42      	adds	r2, r0, #1
 800622c:	d101      	bne.n	8006232 <__sflush_r+0x76>
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	b903      	cbnz	r3, 8006234 <__sflush_r+0x78>
 8006232:	6560      	str	r0, [r4, #84]	@ 0x54
 8006234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006236:	602f      	str	r7, [r5, #0]
 8006238:	b1b9      	cbz	r1, 800626a <__sflush_r+0xae>
 800623a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800623e:	4299      	cmp	r1, r3
 8006240:	d002      	beq.n	8006248 <__sflush_r+0x8c>
 8006242:	4628      	mov	r0, r5
 8006244:	f7ff fa92 	bl	800576c <_free_r>
 8006248:	2300      	movs	r3, #0
 800624a:	6363      	str	r3, [r4, #52]	@ 0x34
 800624c:	e00d      	b.n	800626a <__sflush_r+0xae>
 800624e:	2301      	movs	r3, #1
 8006250:	4628      	mov	r0, r5
 8006252:	47b0      	blx	r6
 8006254:	4602      	mov	r2, r0
 8006256:	1c50      	adds	r0, r2, #1
 8006258:	d1c9      	bne.n	80061ee <__sflush_r+0x32>
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0c6      	beq.n	80061ee <__sflush_r+0x32>
 8006260:	2b1d      	cmp	r3, #29
 8006262:	d001      	beq.n	8006268 <__sflush_r+0xac>
 8006264:	2b16      	cmp	r3, #22
 8006266:	d11e      	bne.n	80062a6 <__sflush_r+0xea>
 8006268:	602f      	str	r7, [r5, #0]
 800626a:	2000      	movs	r0, #0
 800626c:	e022      	b.n	80062b4 <__sflush_r+0xf8>
 800626e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006272:	b21b      	sxth	r3, r3
 8006274:	e01b      	b.n	80062ae <__sflush_r+0xf2>
 8006276:	690f      	ldr	r7, [r1, #16]
 8006278:	2f00      	cmp	r7, #0
 800627a:	d0f6      	beq.n	800626a <__sflush_r+0xae>
 800627c:	0793      	lsls	r3, r2, #30
 800627e:	680e      	ldr	r6, [r1, #0]
 8006280:	bf08      	it	eq
 8006282:	694b      	ldreq	r3, [r1, #20]
 8006284:	600f      	str	r7, [r1, #0]
 8006286:	bf18      	it	ne
 8006288:	2300      	movne	r3, #0
 800628a:	eba6 0807 	sub.w	r8, r6, r7
 800628e:	608b      	str	r3, [r1, #8]
 8006290:	f1b8 0f00 	cmp.w	r8, #0
 8006294:	dde9      	ble.n	800626a <__sflush_r+0xae>
 8006296:	6a21      	ldr	r1, [r4, #32]
 8006298:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800629a:	4643      	mov	r3, r8
 800629c:	463a      	mov	r2, r7
 800629e:	4628      	mov	r0, r5
 80062a0:	47b0      	blx	r6
 80062a2:	2800      	cmp	r0, #0
 80062a4:	dc08      	bgt.n	80062b8 <__sflush_r+0xfc>
 80062a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	4407      	add	r7, r0
 80062ba:	eba8 0800 	sub.w	r8, r8, r0
 80062be:	e7e7      	b.n	8006290 <__sflush_r+0xd4>
 80062c0:	dfbffffe 	.word	0xdfbffffe

080062c4 <_fflush_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	4605      	mov	r5, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b913      	cbnz	r3, 80062d4 <_fflush_r+0x10>
 80062ce:	2500      	movs	r5, #0
 80062d0:	4628      	mov	r0, r5
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	b118      	cbz	r0, 80062de <_fflush_r+0x1a>
 80062d6:	6a03      	ldr	r3, [r0, #32]
 80062d8:	b90b      	cbnz	r3, 80062de <_fflush_r+0x1a>
 80062da:	f7fe ff5f 	bl	800519c <__sinit>
 80062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f3      	beq.n	80062ce <_fflush_r+0xa>
 80062e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	d404      	bmi.n	80062f6 <_fflush_r+0x32>
 80062ec:	0599      	lsls	r1, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_fflush_r+0x32>
 80062f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f2:	f7ff fa04 	bl	80056fe <__retarget_lock_acquire_recursive>
 80062f6:	4628      	mov	r0, r5
 80062f8:	4621      	mov	r1, r4
 80062fa:	f7ff ff5f 	bl	80061bc <__sflush_r>
 80062fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006300:	07da      	lsls	r2, r3, #31
 8006302:	4605      	mov	r5, r0
 8006304:	d4e4      	bmi.n	80062d0 <_fflush_r+0xc>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d4e1      	bmi.n	80062d0 <_fflush_r+0xc>
 800630c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630e:	f7ff f9f7 	bl	8005700 <__retarget_lock_release_recursive>
 8006312:	e7dd      	b.n	80062d0 <_fflush_r+0xc>

08006314 <fiprintf>:
 8006314:	b40e      	push	{r1, r2, r3}
 8006316:	b503      	push	{r0, r1, lr}
 8006318:	4601      	mov	r1, r0
 800631a:	ab03      	add	r3, sp, #12
 800631c:	4805      	ldr	r0, [pc, #20]	@ (8006334 <fiprintf+0x20>)
 800631e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006322:	6800      	ldr	r0, [r0, #0]
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	f7ff fca3 	bl	8005c70 <_vfiprintf_r>
 800632a:	b002      	add	sp, #8
 800632c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006330:	b003      	add	sp, #12
 8006332:	4770      	bx	lr
 8006334:	20000018 	.word	0x20000018

08006338 <__swhatbuf_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	2900      	cmp	r1, #0
 8006342:	b096      	sub	sp, #88	@ 0x58
 8006344:	4615      	mov	r5, r2
 8006346:	461e      	mov	r6, r3
 8006348:	da0d      	bge.n	8006366 <__swhatbuf_r+0x2e>
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	bf14      	ite	ne
 8006356:	2340      	movne	r3, #64	@ 0x40
 8006358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800635c:	2000      	movs	r0, #0
 800635e:	6031      	str	r1, [r6, #0]
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	b016      	add	sp, #88	@ 0x58
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	466a      	mov	r2, sp
 8006368:	f000 f896 	bl	8006498 <_fstat_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	dbec      	blt.n	800634a <__swhatbuf_r+0x12>
 8006370:	9901      	ldr	r1, [sp, #4]
 8006372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800637a:	4259      	negs	r1, r3
 800637c:	4159      	adcs	r1, r3
 800637e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006382:	e7eb      	b.n	800635c <__swhatbuf_r+0x24>

08006384 <__smakebuf_r>:
 8006384:	898b      	ldrh	r3, [r1, #12]
 8006386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006388:	079d      	lsls	r5, r3, #30
 800638a:	4606      	mov	r6, r0
 800638c:	460c      	mov	r4, r1
 800638e:	d507      	bpl.n	80063a0 <__smakebuf_r+0x1c>
 8006390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	2301      	movs	r3, #1
 800639a:	6163      	str	r3, [r4, #20]
 800639c:	b003      	add	sp, #12
 800639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a0:	ab01      	add	r3, sp, #4
 80063a2:	466a      	mov	r2, sp
 80063a4:	f7ff ffc8 	bl	8006338 <__swhatbuf_r>
 80063a8:	9f00      	ldr	r7, [sp, #0]
 80063aa:	4605      	mov	r5, r0
 80063ac:	4639      	mov	r1, r7
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff fa50 	bl	8005854 <_malloc_r>
 80063b4:	b948      	cbnz	r0, 80063ca <__smakebuf_r+0x46>
 80063b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ba:	059a      	lsls	r2, r3, #22
 80063bc:	d4ee      	bmi.n	800639c <__smakebuf_r+0x18>
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	f043 0302 	orr.w	r3, r3, #2
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	e7e2      	b.n	8006390 <__smakebuf_r+0xc>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	6020      	str	r0, [r4, #0]
 80063ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063da:	b15b      	cbz	r3, 80063f4 <__smakebuf_r+0x70>
 80063dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 f86b 	bl	80064bc <_isatty_r>
 80063e6:	b128      	cbz	r0, 80063f4 <__smakebuf_r+0x70>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	431d      	orrs	r5, r3
 80063f8:	81a5      	strh	r5, [r4, #12]
 80063fa:	e7cf      	b.n	800639c <__smakebuf_r+0x18>

080063fc <_putc_r>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	460d      	mov	r5, r1
 8006400:	4614      	mov	r4, r2
 8006402:	4606      	mov	r6, r0
 8006404:	b118      	cbz	r0, 800640e <_putc_r+0x12>
 8006406:	6a03      	ldr	r3, [r0, #32]
 8006408:	b90b      	cbnz	r3, 800640e <_putc_r+0x12>
 800640a:	f7fe fec7 	bl	800519c <__sinit>
 800640e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006410:	07d8      	lsls	r0, r3, #31
 8006412:	d405      	bmi.n	8006420 <_putc_r+0x24>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	0599      	lsls	r1, r3, #22
 8006418:	d402      	bmi.n	8006420 <_putc_r+0x24>
 800641a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641c:	f7ff f96f 	bl	80056fe <__retarget_lock_acquire_recursive>
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	3b01      	subs	r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	da05      	bge.n	8006436 <_putc_r+0x3a>
 800642a:	69a2      	ldr	r2, [r4, #24]
 800642c:	4293      	cmp	r3, r2
 800642e:	db12      	blt.n	8006456 <_putc_r+0x5a>
 8006430:	b2eb      	uxtb	r3, r5
 8006432:	2b0a      	cmp	r3, #10
 8006434:	d00f      	beq.n	8006456 <_putc_r+0x5a>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	701d      	strb	r5, [r3, #0]
 800643e:	b2ed      	uxtb	r5, r5
 8006440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d405      	bmi.n	8006452 <_putc_r+0x56>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	d402      	bmi.n	8006452 <_putc_r+0x56>
 800644c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800644e:	f7ff f957 	bl	8005700 <__retarget_lock_release_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	4629      	mov	r1, r5
 8006458:	4622      	mov	r2, r4
 800645a:	4630      	mov	r0, r6
 800645c:	f7fe ffaf 	bl	80053be <__swbuf_r>
 8006460:	4605      	mov	r5, r0
 8006462:	e7ed      	b.n	8006440 <_putc_r+0x44>

08006464 <memmove>:
 8006464:	4288      	cmp	r0, r1
 8006466:	b510      	push	{r4, lr}
 8006468:	eb01 0402 	add.w	r4, r1, r2
 800646c:	d902      	bls.n	8006474 <memmove+0x10>
 800646e:	4284      	cmp	r4, r0
 8006470:	4623      	mov	r3, r4
 8006472:	d807      	bhi.n	8006484 <memmove+0x20>
 8006474:	1e43      	subs	r3, r0, #1
 8006476:	42a1      	cmp	r1, r4
 8006478:	d008      	beq.n	800648c <memmove+0x28>
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006482:	e7f8      	b.n	8006476 <memmove+0x12>
 8006484:	4402      	add	r2, r0
 8006486:	4601      	mov	r1, r0
 8006488:	428a      	cmp	r2, r1
 800648a:	d100      	bne.n	800648e <memmove+0x2a>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006496:	e7f7      	b.n	8006488 <memmove+0x24>

08006498 <_fstat_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	@ (80064b8 <_fstat_r+0x20>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	f7fb f8eb 	bl	8001680 <_fstat>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d102      	bne.n	80064b4 <_fstat_r+0x1c>
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	b103      	cbz	r3, 80064b4 <_fstat_r+0x1c>
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	bd38      	pop	{r3, r4, r5, pc}
 80064b6:	bf00      	nop
 80064b8:	20000bec 	.word	0x20000bec

080064bc <_isatty_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	@ (80064d8 <_isatty_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fb f8ea 	bl	80016a0 <_isatty>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_isatty_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_isatty_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20000bec 	.word	0x20000bec

080064dc <_sbrk_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d06      	ldr	r5, [pc, #24]	@ (80064f8 <_sbrk_r+0x1c>)
 80064e0:	2300      	movs	r3, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	602b      	str	r3, [r5, #0]
 80064e8:	f7fb f8f2 	bl	80016d0 <_sbrk>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_sbrk_r+0x1a>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_sbrk_r+0x1a>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	20000bec 	.word	0x20000bec

080064fc <abort>:
 80064fc:	b508      	push	{r3, lr}
 80064fe:	2006      	movs	r0, #6
 8006500:	f000 f85a 	bl	80065b8 <raise>
 8006504:	2001      	movs	r0, #1
 8006506:	f7fb f86b 	bl	80015e0 <_exit>

0800650a <_realloc_r>:
 800650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	4680      	mov	r8, r0
 8006510:	4615      	mov	r5, r2
 8006512:	460c      	mov	r4, r1
 8006514:	b921      	cbnz	r1, 8006520 <_realloc_r+0x16>
 8006516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800651a:	4611      	mov	r1, r2
 800651c:	f7ff b99a 	b.w	8005854 <_malloc_r>
 8006520:	b92a      	cbnz	r2, 800652e <_realloc_r+0x24>
 8006522:	f7ff f923 	bl	800576c <_free_r>
 8006526:	2400      	movs	r4, #0
 8006528:	4620      	mov	r0, r4
 800652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652e:	f000 f85f 	bl	80065f0 <_malloc_usable_size_r>
 8006532:	4285      	cmp	r5, r0
 8006534:	4606      	mov	r6, r0
 8006536:	d802      	bhi.n	800653e <_realloc_r+0x34>
 8006538:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800653c:	d8f4      	bhi.n	8006528 <_realloc_r+0x1e>
 800653e:	4629      	mov	r1, r5
 8006540:	4640      	mov	r0, r8
 8006542:	f7ff f987 	bl	8005854 <_malloc_r>
 8006546:	4607      	mov	r7, r0
 8006548:	2800      	cmp	r0, #0
 800654a:	d0ec      	beq.n	8006526 <_realloc_r+0x1c>
 800654c:	42b5      	cmp	r5, r6
 800654e:	462a      	mov	r2, r5
 8006550:	4621      	mov	r1, r4
 8006552:	bf28      	it	cs
 8006554:	4632      	movcs	r2, r6
 8006556:	f7ff f8dc 	bl	8005712 <memcpy>
 800655a:	4621      	mov	r1, r4
 800655c:	4640      	mov	r0, r8
 800655e:	f7ff f905 	bl	800576c <_free_r>
 8006562:	463c      	mov	r4, r7
 8006564:	e7e0      	b.n	8006528 <_realloc_r+0x1e>

08006566 <_raise_r>:
 8006566:	291f      	cmp	r1, #31
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	460c      	mov	r4, r1
 800656e:	d904      	bls.n	800657a <_raise_r+0x14>
 8006570:	2316      	movs	r3, #22
 8006572:	6003      	str	r3, [r0, #0]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800657c:	b112      	cbz	r2, 8006584 <_raise_r+0x1e>
 800657e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006582:	b94b      	cbnz	r3, 8006598 <_raise_r+0x32>
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f831 	bl	80065ec <_getpid_r>
 800658a:	4622      	mov	r2, r4
 800658c:	4601      	mov	r1, r0
 800658e:	4628      	mov	r0, r5
 8006590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006594:	f000 b818 	b.w	80065c8 <_kill_r>
 8006598:	2b01      	cmp	r3, #1
 800659a:	d00a      	beq.n	80065b2 <_raise_r+0x4c>
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	d103      	bne.n	80065a8 <_raise_r+0x42>
 80065a0:	2316      	movs	r3, #22
 80065a2:	6003      	str	r3, [r0, #0]
 80065a4:	2001      	movs	r0, #1
 80065a6:	e7e7      	b.n	8006578 <_raise_r+0x12>
 80065a8:	2100      	movs	r1, #0
 80065aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065ae:	4620      	mov	r0, r4
 80065b0:	4798      	blx	r3
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7e0      	b.n	8006578 <_raise_r+0x12>
	...

080065b8 <raise>:
 80065b8:	4b02      	ldr	r3, [pc, #8]	@ (80065c4 <raise+0xc>)
 80065ba:	4601      	mov	r1, r0
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	f7ff bfd2 	b.w	8006566 <_raise_r>
 80065c2:	bf00      	nop
 80065c4:	20000018 	.word	0x20000018

080065c8 <_kill_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d07      	ldr	r5, [pc, #28]	@ (80065e8 <_kill_r+0x20>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	f7fa fff3 	bl	80015c0 <_kill>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d102      	bne.n	80065e4 <_kill_r+0x1c>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	b103      	cbz	r3, 80065e4 <_kill_r+0x1c>
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	bf00      	nop
 80065e8:	20000bec 	.word	0x20000bec

080065ec <_getpid_r>:
 80065ec:	f7fa bfe0 	b.w	80015b0 <_getpid>

080065f0 <_malloc_usable_size_r>:
 80065f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f4:	1f18      	subs	r0, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfbc      	itt	lt
 80065fa:	580b      	ldrlt	r3, [r1, r0]
 80065fc:	18c0      	addlt	r0, r0, r3
 80065fe:	4770      	bx	lr

08006600 <_init>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr

0800660c <_fini>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr
