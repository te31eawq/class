
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005958  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005dc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  08005e28  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005e28  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105cb  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002398  00000000  00000000  00017663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00019a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf0  00000000  00000000  0001aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6f  00000000  00000000  0001b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e2  00000000  00000000  000332c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b38  00000000  00000000  000466a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d91e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  000d9224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000de4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ae0 	.word	0x08005ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005ae0 	.word	0x08005ae0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <LCD_init+0x6c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ae:	2032      	movs	r0, #50	@ 0x32
 80005b0:	f001 f826 	bl	8001600 <HAL_Delay>
	LCD_cmdMode();
 80005b4:	f000 f89a 	bl	80006ec <LCD_cmdMode>
	LCD_writeMode();
 80005b8:	f000 f8b8 	bl	800072c <LCD_writeMode>
	LCD_sendData(0x30);
 80005bc:	2030      	movs	r0, #48	@ 0x30
 80005be:	f000 f849 	bl	8000654 <LCD_sendData>
	HAL_Delay(5);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f001 f81c 	bl	8001600 <HAL_Delay>
	LCD_sendData(0x30);
 80005c8:	2030      	movs	r0, #48	@ 0x30
 80005ca:	f000 f843 	bl	8000654 <LCD_sendData>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 f816 	bl	8001600 <HAL_Delay>
	LCD_sendData(0x30);
 80005d4:	2030      	movs	r0, #48	@ 0x30
 80005d6:	f000 f83d 	bl	8000654 <LCD_sendData>
	LCD_sendData(0x20);
 80005da:	2020      	movs	r0, #32
 80005dc:	f000 f83a 	bl	8000654 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 80005e0:	2028      	movs	r0, #40	@ 0x28
 80005e2:	f000 f85f 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 f85c 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 f859 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 80005f2:	2006      	movs	r0, #6
 80005f4:	f000 f856 	bl	80006a4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 80005f8:	200c      	movs	r0, #12
 80005fa:	f000 f853 	bl	80006a4 <LCD_sendByte>
	LCD_backLightOn();
 80005fe:	f000 f865 	bl	80006cc <LCD_backLightOn>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000088 	.word	0x20000088

08000610 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 800061a:	f000 f867 	bl	80006ec <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800061e:	f000 f885 	bl	800072c <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f83d 	bl	80006a4 <LCD_sendByte>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 800063c:	f000 f866 	bl	800070c <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 8000640:	f000 f874 	bl	800072c <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f82c 	bl	80006a4 <LCD_sendByte>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800065e:	f000 f875 	bl	800074c <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 8000662:	2002      	movs	r0, #2
 8000664:	f000 ffcc 	bl	8001600 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <LCD_sendData+0x4c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	b25a      	sxtb	r2, r3
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	b25b      	sxtb	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <LCD_sendData+0x4c>)
 8000686:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000688:	f000 f880 	bl	800078c <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 800068c:	f000 f86e 	bl	800076c <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 8000690:	2002      	movs	r0, #2
 8000692:	f000 ffb5 	bl	8001600 <HAL_Delay>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000084 	.word	0x20000084

080006a4 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffcf 	bl	8000654 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc8 	bl	8000654 <LCD_sendData>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LCD_backLightOn>:
void LCD_backLightOn() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LCD_backLightOn+0x1c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <LCD_backLightOn+0x1c>)
 80006dc:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006de:	f000 f855 	bl	800078c <LCD_sendDataToInterface>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000084 	.word	0x20000084

080006ec <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <LCD_cmdMode+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <LCD_cmdMode+0x1c>)
 80006fc:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006fe:	f000 f845 	bl	800078c <LCD_sendDataToInterface>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000084 	.word	0x20000084

0800070c <LCD_charMode>:

void LCD_charMode() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <LCD_charMode+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <LCD_charMode+0x1c>)
 800071c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800071e:	f000 f835 	bl	800078c <LCD_sendDataToInterface>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000084 	.word	0x20000084

0800072c <LCD_writeMode>:

void LCD_writeMode() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <LCD_writeMode+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f023 0302 	bic.w	r3, r3, #2
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <LCD_writeMode+0x1c>)
 800073c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800073e:	f000 f825 	bl	800078c <LCD_sendDataToInterface>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000084 	.word	0x20000084

0800074c <LCD_enableHigh>:

void LCD_enableHigh() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <LCD_enableHigh+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b03      	ldr	r3, [pc, #12]	@ (8000768 <LCD_enableHigh+0x1c>)
 800075c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800075e:	f000 f815 	bl	800078c <LCD_sendDataToInterface>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000084 	.word	0x20000084

0800076c <LCD_enableLow>:

void LCD_enableLow() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <LCD_enableLow+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f023 0304 	bic.w	r3, r3, #4
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <LCD_enableLow+0x1c>)
 800077c:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800077e:	f000 f805 	bl	800078c <LCD_sendDataToInterface>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000084 	.word	0x20000084

0800078c <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <LCD_sendDataToInterface+0x20>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <LCD_sendDataToInterface+0x24>)
 800079e:	214e      	movs	r1, #78	@ 0x4e
 80007a0:	f001 fbd8 	bl	8001f54 <HAL_I2C_Master_Transmit>
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000088 	.word	0x20000088
 80007b0:	20000084 	.word	0x20000084

080007b4 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e009      	b.n	80007d6 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff31 	bl	8000632 <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1ef      	bne.n	80007c2 <LCD_writeString+0xe>
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	019b      	lsls	r3, r3, #6
 8000810:	b2da      	uxtb	r2, r3
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	4413      	add	r3, r2
 8000816:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3b80      	subs	r3, #128	@ 0x80
 800081c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fef5 	bl	8000610 <LCD_writeCmdData>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	603a      	str	r2, [r7, #0]
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	460b      	mov	r3, r1
 800083c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffd1 	bl	80007ec <LCD_gotoXY>
	LCD_writeString(str);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff ffb2 	bl	80007b4 <LCD_writeString>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fe5e 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f84c 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f984 	bl	8000b70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000868:	f000 f92e 	bl	8000ac8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800086c:	f000 f956 	bl	8000b1c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000870:	f000 f8dc 	bl	8000a2c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000874:	f000 f8ac 	bl	80009d0 <MX_I2C1_Init>
  LCD_init(&hi2c1);
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <main+0x78>)
 800087a:	f7ff fe91 	bl	80005a0 <LCD_init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 800087e:	2201      	movs	r2, #1
 8000880:	4914      	ldr	r1, [pc, #80]	@ (80008d4 <main+0x7c>)
 8000882:	4815      	ldr	r0, [pc, #84]	@ (80008d8 <main+0x80>)
 8000884:	f002 fedd 	bl	8003642 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000888:	2201      	movs	r2, #1
 800088a:	4914      	ldr	r1, [pc, #80]	@ (80008dc <main+0x84>)
 800088c:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <main+0x88>)
 800088e:	f002 fed8 	bl	8003642 <HAL_UART_Receive_IT>
  printf("start main - project()\r\n");
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <main+0x8c>)
 8000894:	f004 f802 	bl	800489c <puts>
  LCD_writeStringXY(0, 0, "Waiting for User");
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <main+0x90>)
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ffc6 	bl	800082e <LCD_writeStringXY>
//  LCD_writeStringXY(0, 0, "hello lcd");
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <main+0x94>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <main+0x62>
	  {
			printf("recv2 : %s\r\n",rx2Data);
 80008ac:	4910      	ldr	r1, [pc, #64]	@ (80008f0 <main+0x98>)
 80008ae:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <main+0x9c>)
 80008b0:	f003 ff8c 	bl	80047cc <iprintf>
			rx2Flag =0;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <main+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <main+0xa0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0ee      	beq.n	80008a2 <main+0x4a>
	  {
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <main+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 80008ca:	f000 f9f9 	bl	8000cc0 <bluetooth_Event>
	  if(rx2Flag)
 80008ce:	e7e8      	b.n	80008a2 <main+0x4a>
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	200001b8 	.word	0x200001b8
 80008d8:	20000128 	.word	0x20000128
 80008dc:	200001ef 	.word	0x200001ef
 80008e0:	20000170 	.word	0x20000170
 80008e4:	08005af8 	.word	0x08005af8
 80008e8:	08005b10 	.word	0x08005b10
 80008ec:	200001b9 	.word	0x200001b9
 80008f0:	200001bc 	.word	0x200001bc
 80008f4:	08005b24 	.word	0x08005b24
 80008f8:	200001ee 	.word	0x200001ee

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	@ 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	@ 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f8c6 	bl	8004a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <SystemClock_Config+0xcc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000930:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <SystemClock_Config+0xd0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000970:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000976:	2304      	movs	r3, #4
 8000978:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097a:	2304      	movs	r3, #4
 800097c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fe40 	bl	8002608 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 fb59 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f8a2 	bl	8002af8 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ba:	f000 fb43 	bl	8001044 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	@ 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009d6:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <MX_I2C1_Init+0x58>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_I2C1_Init+0x54>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2C1_Init+0x54>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_I2C1_Init+0x54>)
 8000a10:	f001 f95c 	bl	8001ccc <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 fb13 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	40005400 	.word	0x40005400

08000a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <MX_TIM3_Init+0x98>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a50:	2253      	movs	r2, #83	@ 0x53
 8000a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a6e:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a70:	f002 fa62 	bl	8002f38 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 fae3 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000a8c:	f002 faa3 	bl	8002fd6 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 fad5 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <MX_TIM3_Init+0x94>)
 8000aa8:	f002 fc82 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ab2:	f000 fac7 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000e0 	.word	0x200000e0
 8000ac4:	40000400 	.word	0x40000400

08000ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <MX_USART2_UART_Init+0x50>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f002 fcc4 	bl	800348c <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0a:	f000 fa9b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000128 	.word	0x20000128
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <MX_USART6_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_USART6_UART_Init+0x4c>)
 8000b54:	f002 fc9a 	bl	800348c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 fa71 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000170 	.word	0x20000170
 8000b6c:	40011400 	.word	0x40011400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a37      	ldr	r2, [pc, #220]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a30      	ldr	r2, [pc, #192]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <MX_GPIO_Init+0xfc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <MX_GPIO_Init+0x100>)
 8000bfc:	f001 f84c 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c06:	481b      	ldr	r0, [pc, #108]	@ (8000c74 <MX_GPIO_Init+0x104>)
 8000c08:	f001 f846 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4814      	ldr	r0, [pc, #80]	@ (8000c74 <MX_GPIO_Init+0x104>)
 8000c24:	f000 feb4 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x100>)
 8000c40:	f000 fea6 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8000c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_GPIO_Init+0x104>)
 8000c5e:	f000 fe97 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <MX_GPIO_LED_ON+0x20>)
 8000c8a:	f001 f805 	bl	8001c98 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <MX_GPIO_LED_OFF+0x20>)
 8000cae:	f000 fff3 	bl	8001c98 <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <bluetooth_Event>:
void bluetooth_Event()
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b0ad      	sub	sp, #180	@ 0xb4
 8000cc4:	af00      	add	r7, sp, #0

  int i=0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000ccc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ce0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ce4:	222e      	movs	r2, #46	@ 0x2e
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fed7 	bl	8004a9c <memset>
  char sendBuf[CMD_SIZE]={0};
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	222e      	movs	r2, #46	@ 0x2e
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f003 fece 	bl	8004a9c <memset>
  strcpy(recvBuf,btData);
 8000d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d04:	4978      	ldr	r1, [pc, #480]	@ (8000ee8 <bluetooth_Event+0x228>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 ff9f 	bl	8004c4a <strcpy>

  printf("btData : %s\r\n",btData);
 8000d0c:	4976      	ldr	r1, [pc, #472]	@ (8000ee8 <bluetooth_Event+0x228>)
 8000d0e:	4877      	ldr	r0, [pc, #476]	@ (8000eec <bluetooth_Event+0x22c>)
 8000d10:	f003 fd5c 	bl	80047cc <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000d14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d18:	4975      	ldr	r1, [pc, #468]	@ (8000ef0 <bluetooth_Event+0x230>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fec6 	bl	8004aac <strtok>
 8000d20:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  while(pToken != NULL)
 8000d24:	e017      	b.n	8000d56 <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8000d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	33b0      	adds	r3, #176	@ 0xb0
 8000d2e:	443b      	add	r3, r7
 8000d30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000d34:	f843 2c28 	str.w	r2, [r3, #-40]
    if(++i >= ARR_CNT)
 8000d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	dc0a      	bgt.n	8000d60 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 8000d4a:	4969      	ldr	r1, [pc, #420]	@ (8000ef0 <bluetooth_Event+0x230>)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f003 fead 	bl	8004aac <strtok>
 8000d52:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  while(pToken != NULL)
 8000d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1e3      	bne.n	8000d26 <bluetooth_Event+0x66>
 8000d5e:	e000      	b.n	8000d62 <bluetooth_Event+0xa2>
      break;
 8000d60:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 8000d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d66:	4963      	ldr	r1, [pc, #396]	@ (8000ef4 <bluetooth_Event+0x234>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fa39 	bl	80001e0 <strcmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d124      	bne.n	8000dbe <bluetooth_Event+0xfe>
  {
		if(!strcmp(pArray[2],"ON"))
 8000d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d78:	495f      	ldr	r1, [pc, #380]	@ (8000ef8 <bluetooth_Event+0x238>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa30 	bl	80001e0 <strcmp>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <bluetooth_Event+0xda>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 8000d86:	2020      	movs	r0, #32
 8000d88:	f7ff ff76 	bl	8000c78 <MX_GPIO_LED_ON>
			HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d92:	485a      	ldr	r0, [pc, #360]	@ (8000efc <bluetooth_Event+0x23c>)
 8000d94:	f000 ff80 	bl	8001c98 <HAL_GPIO_WritePin>
 8000d98:	e011      	b.n	8000dbe <bluetooth_Event+0xfe>
		}
		else if(!strcmp(pArray[2],"OFF"))
 8000d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d9e:	4958      	ldr	r1, [pc, #352]	@ (8000f00 <bluetooth_Event+0x240>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa1d 	bl	80001e0 <strcmp>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <bluetooth_Event+0xfe>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 8000dac:	2020      	movs	r0, #32
 8000dae:	f7ff ff75 	bl	8000c9c <MX_GPIO_LED_OFF>
			HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db8:	4850      	ldr	r0, [pc, #320]	@ (8000efc <bluetooth_Event+0x23c>)
 8000dba:	f000 ff6d 	bl	8001c98 <HAL_GPIO_WritePin>
		}
  }
  if (!strcmp(pArray[2], "SENSOR"))
 8000dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dc2:	4950      	ldr	r1, [pc, #320]	@ (8000f04 <bluetooth_Event+0x244>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa0b 	bl	80001e0 <strcmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d174      	bne.n	8000eba <bluetooth_Event+0x1fa>
  {
    // 첫 번째 열에 user3 이름을 표시
	LCD_writeStringXY(0, 0, " ");
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f08 <bluetooth_Event+0x248>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fd2a 	bl	800082e <LCD_writeStringXY>
    LCD_writeStringXY(0, 1, pArray[1]);
 8000dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dde:	461a      	mov	r2, r3
 8000de0:	2101      	movs	r1, #1
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fd23 	bl	800082e <LCD_writeStringXY>
    LCD_writeStringXY(0, 6, " : SENSOR ");
 8000de8:	4a48      	ldr	r2, [pc, #288]	@ (8000f0c <bluetooth_Event+0x24c>)
 8000dea:	2106      	movs	r1, #6
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fd1e 	bl	800082e <LCD_writeStringXY>

    // pArray[3] 값이 게이지를 채우는데 사용됨
    int gauge_value = atoi(pArray[3]);  // pArray[3]을 숫자로 변환
 8000df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fb9e 	bl	8004538 <atoi>
 8000dfc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    if (gauge_value < 0) gauge_value = 0;
 8000e00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da02      	bge.n	8000e0e <bluetooth_Event+0x14e>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (gauge_value > 100) gauge_value = 100;
 8000e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e12:	2b64      	cmp	r3, #100	@ 0x64
 8000e14:	dd02      	ble.n	8000e1c <bluetooth_Event+0x15c>
 8000e16:	2364      	movs	r3, #100	@ 0x64
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    // LCD의 두 번째 열에 게이지 채우기
    int gauge_length = (gauge_value * 16) / 100;  // 0~100 범위를 0~16로 나누어 길이 계산 (16단위로 구분)
 8000e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4a3b      	ldr	r2, [pc, #236]	@ (8000f10 <bluetooth_Event+0x250>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1152      	asrs	r2, r2, #5
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    // 기존 게이지 지우기: 두 번째 줄에 공백으로 덮어씌운다.
    char blank[16] = "                ";  // 공백 16칸
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <bluetooth_Event+0x254>)
 8000e34:	f107 0410 	add.w	r4, r7, #16
 8000e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LCD_writeStringXY(1, 0, blank);  // 두 번째 줄을 공백으로 덮어씌움
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	461a      	mov	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fcf1 	bl	800082e <LCD_writeStringXY>

    // 새로운 게이지 그리기: 'l'은 채운 부분을 나타내고, 공백은 빈 공간을 나타냄
    char gauge[16] = {0};  // 최대 16칸의 게이지 표시
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
    for (int j = 0; j < gauge_length; j++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e60:	e00a      	b.n	8000e78 <bluetooth_Event+0x1b8>
      gauge[j] = '=';  // 채운 부분
 8000e62:	463a      	mov	r2, r7
 8000e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e68:	4413      	add	r3, r2
 8000e6a:	223d      	movs	r2, #61	@ 0x3d
 8000e6c:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < gauge_length; j++) {
 8000e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e72:	3301      	adds	r3, #1
 8000e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e78:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbee      	blt.n	8000e62 <bluetooth_Event+0x1a2>
    }
    LCD_writeStringXY(1, 0, gauge);  // 두 번째 열에 게이지 출력
 8000e84:	463b      	mov	r3, r7
 8000e86:	461a      	mov	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fccf 	bl	800082e <LCD_writeStringXY>
  }
  else
      return;

//  sprintf(sendBuf,"[%s]%s@%s%s\n",pArray[0],pArray[1],pArray[2]);
  sprintf(sendBuf,"[KSH_AND]Update Done....\n");
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4920      	ldr	r1, [pc, #128]	@ (8000f18 <bluetooth_Event+0x258>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fd08 	bl	80048ac <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f9a7 	bl	80001f4 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f107 0120 	add.w	r1, r7, #32
 8000eae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb2:	481a      	ldr	r0, [pc, #104]	@ (8000f1c <bluetooth_Event+0x25c>)
 8000eb4:	f002 fb3a 	bl	800352c <HAL_UART_Transmit>
 8000eb8:	e012      	b.n	8000ee0 <bluetooth_Event+0x220>
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 8000eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ebe:	4918      	ldr	r1, [pc, #96]	@ (8000f20 <bluetooth_Event+0x260>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f98d 	bl	80001e0 <strcmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <bluetooth_Event+0x21e>
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 8000ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ed0:	4914      	ldr	r1, [pc, #80]	@ (8000f24 <bluetooth_Event+0x264>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f984 	bl	80001e0 <strcmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
      return;
 8000edc:	e000      	b.n	8000ee0 <bluetooth_Event+0x220>
      return;
 8000ede:	bf00      	nop

}
 8000ee0:	37b4      	adds	r7, #180	@ 0xb4
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001f0 	.word	0x200001f0
 8000eec:	08005b34 	.word	0x08005b34
 8000ef0:	08005b44 	.word	0x08005b44
 8000ef4:	08005b48 	.word	0x08005b48
 8000ef8:	08005b4c 	.word	0x08005b4c
 8000efc:	40020800 	.word	0x40020800
 8000f00:	08005b50 	.word	0x08005b50
 8000f04:	08005b54 	.word	0x08005b54
 8000f08:	08005b5c 	.word	0x08005b5c
 8000f0c:	08005b60 	.word	0x08005b60
 8000f10:	51eb851f 	.word	0x51eb851f
 8000f14:	08005ba4 	.word	0x08005ba4
 8000f18:	08005b88 	.word	0x08005b88
 8000f1c:	20000170 	.word	0x20000170
 8000f20:	08005b6c 	.word	0x08005b6c
 8000f24:	08005b78 	.word	0x08005b78

08000f28 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f36:	2201      	movs	r2, #1
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <__io_putchar+0x20>)
 8000f3a:	f002 faf7 	bl	800352c <HAL_UART_Transmit>

  return ch;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000128 	.word	0x20000128

08000f4c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2e      	ldr	r2, [pc, #184]	@ (8001014 <HAL_UART_RxCpltCallback+0xc8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <HAL_UART_RxCpltCallback+0xd0>)
 8000f64:	7811      	ldrb	r1, [r2, #0]
 8000f66:	4a2e      	ldr	r2, [pc, #184]	@ (8001020 <HAL_UART_RxCpltCallback+0xd4>)
 8000f68:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001020 <HAL_UART_RxCpltCallback+0xd4>)
 8000f70:	5cd3      	ldrb	r3, [r2, r3]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b0d      	cmp	r3, #13
 8000f76:	d005      	beq.n	8000f84 <HAL_UART_RxCpltCallback+0x38>
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a29      	ldr	r2, [pc, #164]	@ (8001024 <HAL_UART_RxCpltCallback+0xd8>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d10b      	bne.n	8000f9c <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <HAL_UART_RxCpltCallback+0xd4>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <HAL_UART_RxCpltCallback+0xdc>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e004      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <HAL_UART_RxCpltCallback+0xcc>)
 8000fa4:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	491c      	ldr	r1, [pc, #112]	@ (800101c <HAL_UART_RxCpltCallback+0xd0>)
 8000faa:	4820      	ldr	r0, [pc, #128]	@ (800102c <HAL_UART_RxCpltCallback+0xe0>)
 8000fac:	f002 fb49 	bl	8003642 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <HAL_UART_RxCpltCallback+0xe4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d127      	bne.n	800100a <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <HAL_UART_RxCpltCallback+0xec>)
 8000fc0:	7811      	ldrb	r1, [r2, #0]
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <HAL_UART_RxCpltCallback+0xd8>)
 8000fc4:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <HAL_UART_RxCpltCallback+0xd8>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d005      	beq.n	8000fde <HAL_UART_RxCpltCallback+0x92>
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a13      	ldr	r2, [pc, #76]	@ (8001024 <HAL_UART_RxCpltCallback+0xd8>)
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	2b0d      	cmp	r3, #13
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_UART_RxCpltCallback+0xd8>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_UART_RxCpltCallback+0xf0>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e004      	b.n	8001000 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <HAL_UART_RxCpltCallback+0xe8>)
 8000ffe:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001000:	2201      	movs	r2, #1
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <HAL_UART_RxCpltCallback+0xec>)
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <HAL_UART_RxCpltCallback+0xf4>)
 8001006:	f002 fb1c 	bl	8003642 <HAL_UART_Receive_IT>
    }
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	20000254 	.word	0x20000254
 800101c:	200001b8 	.word	0x200001b8
 8001020:	200001bc 	.word	0x200001bc
 8001024:	200001f0 	.word	0x200001f0
 8001028:	200001b9 	.word	0x200001b9
 800102c:	20000128 	.word	0x20000128
 8001030:	40011400 	.word	0x40011400
 8001034:	20000258 	.word	0x20000258
 8001038:	200001ef 	.word	0x200001ef
 800103c:	200001ee 	.word	0x200001ee
 8001040:	20000170 	.word	0x20000170

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <Error_Handler+0x8>

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <HAL_MspInit+0x4c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001064:	6453      	str	r3, [r2, #68]	@ 0x44
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_MspInit+0x4c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	@ 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800108e:	2007      	movs	r0, #7
 8001090:	f000 fbaa 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	@ (8001124 <HAL_I2C_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	@ (800112c <HAL_I2C_MspInit+0x8c>)
 80010fc:	f000 fc48 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 800110a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800110e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_I2C_MspInit+0x88>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005400 	.word	0x40005400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_TIM_Base_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40000400 	.word	0x40000400
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3a      	ldr	r2, [pc, #232]	@ (800127c <HAL_UART_MspInit+0x108>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d134      	bne.n	8001200 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	@ (8001284 <HAL_UART_MspInit+0x110>)
 80011ea:	f000 fbd1 	bl	8001990 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2026      	movs	r0, #38	@ 0x26
 80011f4:	f000 fb03 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f8:	2026      	movs	r0, #38	@ 0x26
 80011fa:	f000 fb1c 	bl	8001836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011fe:	e038      	b.n	8001272 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a20      	ldr	r2, [pc, #128]	@ (8001288 <HAL_UART_MspInit+0x114>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d133      	bne.n	8001272 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_UART_MspInit+0x10c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23c0      	movs	r3, #192	@ 0xc0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001252:	2308      	movs	r3, #8
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	480b      	ldr	r0, [pc, #44]	@ (800128c <HAL_UART_MspInit+0x118>)
 800125e:	f000 fb97 	bl	8001990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2047      	movs	r0, #71	@ 0x47
 8001268:	f000 fac9 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800126c:	2047      	movs	r0, #71	@ 0x47
 800126e:	f000 fae2 	bl	8001836 <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	@ 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004400 	.word	0x40004400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000
 8001288:	40011400 	.word	0x40011400
 800128c:	40020800 	.word	0x40020800

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f96b 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <USART2_IRQHandler+0x10>)
 80012f6:	f002 f9c9 	bl	800368c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000128 	.word	0x20000128

08001304 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <USART6_IRQHandler+0x10>)
 800130a:	f002 f9bf 	bl	800368c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000170 	.word	0x20000170

08001318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_kill>:

int _kill(int pid, int sig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001332:	f003 fc5d 	bl	8004bf0 <__errno>
 8001336:	4603      	mov	r3, r0
 8001338:	2216      	movs	r2, #22
 800133a:	601a      	str	r2, [r3, #0]
  return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_exit>:

void _exit (int status)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffe7 	bl	8001328 <_kill>
  while (1) {}    /* Make sure we hang here */
 800135a:	bf00      	nop
 800135c:	e7fd      	b.n	800135a <_exit+0x12>

0800135e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e00a      	b.n	8001386 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001370:	f3af 8000 	nop.w
 8001374:	4601      	mov	r1, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	b2ca      	uxtb	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf0      	blt.n	8001370 <_read+0x12>
  }

  return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e009      	b.n	80013be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	60ba      	str	r2, [r7, #8]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdb8 	bl	8000f28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dbf1      	blt.n	80013aa <_write+0x12>
  }
  return len;
 80013c6:	687b      	ldr	r3, [r7, #4]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_close>:

int _close(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	605a      	str	r2, [r3, #4]
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_isatty>:

int _isatty(int file)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f003 fbc2 	bl	8004bf0 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20020000 	.word	0x20020000
 8001498:	00000400 	.word	0x00000400
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	200003b0 	.word	0x200003b0

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001500 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	@ (8001508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f003 fb81 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff f9ad 	bl	8000858 <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800150c:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 8001510:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001514:	200003b0 	.word	0x200003b0

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f94f 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fd7e 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f967 	bl	8001852 <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f92f 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000260 	.word	0x20000260

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000260 	.word	0x20000260

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_Delay+0x44>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff8e 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff29 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff3e 	bl	8001690 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff8e 	bl	800173c <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5d 	bl	80016e8 <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff31 	bl	80016ac <__NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffa2 	bl	80017a4 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff feb6 	bl	80015e8 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d008      	beq.n	800189c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2280      	movs	r2, #128	@ 0x80
 800188e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e052      	b.n	8001942 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0216 	bic.w	r2, r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <HAL_DMA_Abort+0x62>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0208 	bic.w	r2, r2, #8
 80018da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ec:	e013      	b.n	8001916 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ee:	f7ff fe7b 	bl	80015e8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d90c      	bls.n	8001916 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e015      	b.n	8001942 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e4      	bne.n	80018ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	223f      	movs	r2, #63	@ 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d004      	beq.n	8001968 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e00c      	b.n	8001982 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2205      	movs	r2, #5
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e159      	b.n	8001c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8148 	bne.w	8001c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a2 	beq.w	8001c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a56      	ldr	r2, [pc, #344]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b54      	ldr	r3, [pc, #336]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a49      	ldr	r2, [pc, #292]	@ (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x202>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_GPIO_Init+0x2f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x1fe>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1fa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <HAL_GPIO_Init+0x2fc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1f6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	@ (8001c90 <HAL_GPIO_Init+0x300>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1f2>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f aea2 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e12b      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff f9d4 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d30:	f001 f8da 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a81      	ldr	r2, [pc, #516]	@ (8001f40 <HAL_I2C_Init+0x274>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d807      	bhi.n	8001d50 <HAL_I2C_Init+0x84>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a80      	ldr	r2, [pc, #512]	@ (8001f44 <HAL_I2C_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e006      	b.n	8001d5e <HAL_I2C_Init+0x92>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a7d      	ldr	r2, [pc, #500]	@ (8001f48 <HAL_I2C_Init+0x27c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0e7      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a78      	ldr	r2, [pc, #480]	@ (8001f4c <HAL_I2C_Init+0x280>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9b      	lsrs	r3, r3, #18
 8001d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a6a      	ldr	r2, [pc, #424]	@ (8001f40 <HAL_I2C_Init+0x274>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d802      	bhi.n	8001da0 <HAL_I2C_Init+0xd4>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	e009      	b.n	8001db4 <HAL_I2C_Init+0xe8>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4a69      	ldr	r2, [pc, #420]	@ (8001f50 <HAL_I2C_Init+0x284>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	3301      	adds	r3, #1
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	495c      	ldr	r1, [pc, #368]	@ (8001f40 <HAL_I2C_Init+0x274>)
 8001dd0:	428b      	cmp	r3, r1
 8001dd2:	d819      	bhi.n	8001e08 <HAL_I2C_Init+0x13c>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001de8:	400b      	ands	r3, r1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_I2C_Init+0x138>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1e59      	subs	r1, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	e051      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e04f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <HAL_I2C_Init+0x168>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e012      	b.n	8001e5a <HAL_I2C_Init+0x18e>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Init+0x196>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e022      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <HAL_I2C_Init+0x1bc>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e58      	subs	r0, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	440b      	add	r3, r1
 8001e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e86:	e00f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6809      	ldr	r1, [r1, #0]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6911      	ldr	r1, [r2, #16]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	000186a0 	.word	0x000186a0
 8001f44:	001e847f 	.word	0x001e847f
 8001f48:	003d08ff 	.word	0x003d08ff
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	10624dd3 	.word	0x10624dd3

08001f54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	817b      	strh	r3, [r7, #10]
 8001f64:	4613      	mov	r3, r2
 8001f66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fb3e 	bl	80015e8 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 80e0 	bne.w	800213c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4970      	ldr	r1, [pc, #448]	@ (8002148 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f964 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0d3      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Master_Transmit+0x50>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0cc      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d007      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2221      	movs	r2, #33	@ 0x21
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	893a      	ldrh	r2, [r7, #8]
 8001ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a50      	ldr	r2, [pc, #320]	@ (800214c <HAL_I2C_Master_Transmit+0x1f8>)
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f89c 	bl	8002150 <I2C_MasterRequestWrite>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e08d      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002038:	e066      	b.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fa22 	bl	8002488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x188>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	6a39      	ldr	r1, [r7, #32]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa19 	bl	8002518 <I2C_WaitOnBTFFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002102:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e01a      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d194      	bne.n	800203a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000

08002150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d006      	beq.n	800217a <I2C_MasterRequestWrite+0x2a>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d003      	beq.n	800217a <I2C_MasterRequestWrite+0x2a>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002178:	d108      	bne.n	800218c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00b      	b.n	80021a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	2b12      	cmp	r3, #18
 8002192:	d107      	bne.n	80021a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f84f 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ca:	d103      	bne.n	80021d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e035      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e0:	d108      	bne.n	80021f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	e01b      	b.n	800222c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021f4:	897b      	ldrh	r3, [r7, #10]
 80021f6:	11db      	asrs	r3, r3, #7
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0306 	and.w	r3, r3, #6
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f063 030f 	orn	r3, r3, #15
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	490e      	ldr	r1, [pc, #56]	@ (800224c <I2C_MasterRequestWrite+0xfc>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f898 	bl	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e010      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4907      	ldr	r1, [pc, #28]	@ (8002250 <I2C_MasterRequestWrite+0x100>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f888 	bl	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	00010008 	.word	0x00010008
 8002250:	00010002 	.word	0x00010002

08002254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002264:	e048      	b.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d044      	beq.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7ff f9bb 	bl	80015e8 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d139      	bne.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10d      	bne.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	e00c      	b.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d116      	bne.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e023      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10d      	bne.n	800231e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	e00c      	b.n	8002338 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d093      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002356:	e071      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002366:	d123      	bne.n	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e067      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d041      	beq.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b8:	f7ff f916 	bl	80015e8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d136      	bne.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10c      	bne.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	e00b      	b.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e021      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10c      	bne.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e00b      	b.n	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f af6d 	bne.w	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002494:	e034      	b.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f886 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e034      	b.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d028      	beq.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f89b 	bl	80015e8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11d      	bne.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ce:	2b80      	cmp	r3, #128	@ 0x80
 80024d0:	d016      	beq.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e007      	b.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250a:	2b80      	cmp	r3, #128	@ 0x80
 800250c:	d1c3      	bne.n	8002496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002524:	e034      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f83e 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d028      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f853 	bl	80015e8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11d      	bne.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d016      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d1c3      	bne.n	8002526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025be:	d11b      	bne.n	80025f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e267      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d075      	beq.n	8002712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002626:	4b88      	ldr	r3, [pc, #544]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00c      	beq.n	800264c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b85      	ldr	r3, [pc, #532]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263a:	2b08      	cmp	r3, #8
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b82      	ldr	r3, [pc, #520]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800264a:	d10b      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	4b7e      	ldr	r3, [pc, #504]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05b      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e242      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b76      	ldr	r3, [pc, #472]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b70      	ldr	r3, [pc, #448]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6d      	ldr	r3, [pc, #436]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6c      	ldr	r2, [pc, #432]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 80026a0:	4b69      	ldr	r3, [pc, #420]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b66      	ldr	r3, [pc, #408]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe ff92 	bl	80015e8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe ff8e 	bl	80015e8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e207      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe ff7e 	bl	80015e8 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe ff7a 	bl	80015e8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1f3      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800271e:	4b4a      	ldr	r3, [pc, #296]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b44      	ldr	r3, [pc, #272]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1c7      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4937      	ldr	r1, [pc, #220]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b34      	ldr	r3, [pc, #208]	@ (800284c <HAL_RCC_OscConfig+0x244>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe ff33 	bl	80015e8 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe ff2f 	bl	80015e8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1a8      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4925      	ldr	r1, [pc, #148]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_RCC_OscConfig+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ff12 	bl	80015e8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe ff0e 	bl	80015e8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e187      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d036      	beq.n	8002860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_RCC_OscConfig+0x248>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fef2 	bl	80015e8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe feee 	bl	80015e8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e167      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x200>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_RCC_OscConfig+0x248>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fedb 	bl	80015e8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fed7 	bl	80015e8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e150      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8097 	beq.w	800299c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b7d      	ldr	r3, [pc, #500]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	4a7c      	ldr	r2, [pc, #496]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
 800288e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b77      	ldr	r3, [pc, #476]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b74      	ldr	r3, [pc, #464]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fe97 	bl	80015e8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe fe93 	bl	80015e8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e10c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2ea>
 80028e4:	4b64      	ldr	r3, [pc, #400]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a63      	ldr	r2, [pc, #396]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x30c>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	@ 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	@ 0x70
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 8002914:	4b58      	ldr	r3, [pc, #352]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a57      	ldr	r2, [pc, #348]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	4b55      	ldr	r3, [pc, #340]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a54      	ldr	r2, [pc, #336]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fe58 	bl	80015e8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fe54 	bl	80015e8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0cb      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b49      	ldr	r3, [pc, #292]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ee      	beq.n	800293c <HAL_RCC_OscConfig+0x334>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fe42 	bl	80015e8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe fe3e 	bl	80015e8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0b5      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ee      	bne.n	8002968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4a38      	ldr	r2, [pc, #224]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a1 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d05c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d141      	bne.n	8002a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fe12 	bl	80015e8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fe0e 	bl	80015e8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e087      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	491b      	ldr	r1, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fde7 	bl	80015e8 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fde3 	bl	80015e8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e05c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x416>
 8002a3c:	e054      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fdd0 	bl	80015e8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fdcc 	bl	80015e8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e045      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e038      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fcfe 	bl	80015e8 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fcfa 	bl	80015e8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fc5e 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08005bb4 	.word	0x08005bb4
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b094      	sub	sp, #80	@ 0x50
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b79      	ldr	r3, [pc, #484]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80e1 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e0db      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b73      	ldr	r3, [pc, #460]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfc:	e0db      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b73      	ldr	r3, [pc, #460]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d02:	e0d8      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4651      	mov	r1, sl
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4651      	mov	r1, sl
 8002d78:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	462b      	mov	r3, r5
 8002da4:	eb49 0303 	adc.w	r3, r9, r3
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db6:	4629      	mov	r1, r5
 8002db8:	024b      	lsls	r3, r1, #9
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	024a      	lsls	r2, r1, #9
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dd4:	f7fd fa6c 	bl	80002b0 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de0:	e058      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	2200      	movs	r2, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4641      	mov	r1, r8
 8002e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e34:	ebb2 040a 	subs.w	r4, r2, sl
 8002e38:	eb63 050b 	sbc.w	r5, r3, fp
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e88:	f7fd fa12 	bl	80002b0 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3750      	adds	r7, #80	@ 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08005bc4 	.word	0x08005bc4

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08005bc4 	.word	0x08005bc4

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e041      	b.n	8002fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe f8e6 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 f8f4 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_ConfigClockSource+0x1c>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0b4      	b.n	800315c <HAL_TIM_ConfigClockSource+0x186>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003010:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003018:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302a:	d03e      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xd4>
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003030:	f200 8087 	bhi.w	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003038:	f000 8086 	beq.w	8003148 <HAL_TIM_ConfigClockSource+0x172>
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003040:	d87f      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 8003042:	2b70      	cmp	r3, #112	@ 0x70
 8003044:	d01a      	beq.n	800307c <HAL_TIM_ConfigClockSource+0xa6>
 8003046:	2b70      	cmp	r3, #112	@ 0x70
 8003048:	d87b      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 800304a:	2b60      	cmp	r3, #96	@ 0x60
 800304c:	d050      	beq.n	80030f0 <HAL_TIM_ConfigClockSource+0x11a>
 800304e:	2b60      	cmp	r3, #96	@ 0x60
 8003050:	d877      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 8003052:	2b50      	cmp	r3, #80	@ 0x50
 8003054:	d03c      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xfa>
 8003056:	2b50      	cmp	r3, #80	@ 0x50
 8003058:	d873      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	2b40      	cmp	r3, #64	@ 0x40
 800305c:	d058      	beq.n	8003110 <HAL_TIM_ConfigClockSource+0x13a>
 800305e:	2b40      	cmp	r3, #64	@ 0x40
 8003060:	d86f      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 8003062:	2b30      	cmp	r3, #48	@ 0x30
 8003064:	d064      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x15a>
 8003066:	2b30      	cmp	r3, #48	@ 0x30
 8003068:	d86b      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 800306a:	2b20      	cmp	r3, #32
 800306c:	d060      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x15a>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d867      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d05c      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x15a>
 8003076:	2b10      	cmp	r3, #16
 8003078:	d05a      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x15a>
 800307a:	e062      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	f000 f970 	bl	8003370 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800309e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e04f      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	f000 f959 	bl	8003370 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e03c      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030dc:	461a      	mov	r2, r3
 80030de:	f000 f8cd 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2150      	movs	r1, #80	@ 0x50
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f926 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 80030ee:	e02c      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fc:	461a      	mov	r2, r3
 80030fe:	f000 f8ec 	bl	80032da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2160      	movs	r1, #96	@ 0x60
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f916 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 800310e:	e01c      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311c:	461a      	mov	r2, r3
 800311e:	f000 f8ad 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2140      	movs	r1, #64	@ 0x40
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f906 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 800312e:	e00c      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f000 f8fd 	bl	800333a <TIM_ITRx_SetConfig>
      break;
 8003140:	e003      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      break;
 8003146:	e000      	b.n	800314a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003148:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00f      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d00b      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a37      	ldr	r2, [pc, #220]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a36      	ldr	r2, [pc, #216]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <TIM_Base_SetConfig+0x108>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <TIM_Base_SetConfig+0x108>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	@ (8003270 <TIM_Base_SetConfig+0x10c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a24      	ldr	r2, [pc, #144]	@ (8003274 <TIM_Base_SetConfig+0x110>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	@ (8003278 <TIM_Base_SetConfig+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0e      	ldr	r2, [pc, #56]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]
  }
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 030a 	bic.w	r3, r3, #10
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 0210 	bic.w	r2, r3, #16
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003316:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	f043 0307 	orr.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800338a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	431a      	orrs	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e050      	b.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d018      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d013      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a13      	ldr	r2, [pc, #76]	@ (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10c      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fe5e 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	@ 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fdbd 	bl	8004050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d175      	bne.n	8003638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_UART_Transmit+0x2c>
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e06e      	b.n	800363a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2221      	movs	r2, #33	@ 0x21
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356a:	f7fe f83d 	bl	80015e8 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003584:	d108      	bne.n	8003598 <HAL_UART_Transmit+0x6c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e003      	b.n	80035a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a0:	e02e      	b.n	8003600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2200      	movs	r2, #0
 80035aa:	2180      	movs	r1, #128	@ 0x80
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fb1f 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e03a      	b.n	800363a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3302      	adds	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e007      	b.n	80035f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	3301      	adds	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1cb      	bne.n	80035a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2140      	movs	r1, #64	@ 0x40
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 faeb 	bl	8003bf0 <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e006      	b.n	800363a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	4613      	mov	r3, r2
 800364e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d112      	bne.n	8003682 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Receive_IT+0x26>
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e00b      	b.n	8003684 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	461a      	mov	r2, r3
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fb12 	bl	8003ca2 <UART_Start_Receive_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	e000      	b.n	8003684 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b0ba      	sub	sp, #232	@ 0xe8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_UART_IRQHandler+0x66>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fbf2 	bl	8003ed4 <UART_Receive_IT>
      return;
 80036f0:	e25b      	b.n	8003baa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80de 	beq.w	80038b8 <HAL_UART_IRQHandler+0x22c>
 80036fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80d1 	beq.w	80038b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_UART_IRQHandler+0xae>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xd2>
 8003746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xf6>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <HAL_UART_IRQHandler+0x126>
 800378e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 81f2 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_UART_IRQHandler+0x14e>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb7d 	bl	8003ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_UART_IRQHandler+0x17a>
 80037fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04f      	beq.n	80038a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa85 	bl	8003d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d141      	bne.n	800389e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800385e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1d9      	bne.n	800381a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d013      	beq.n	8003896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	4a7e      	ldr	r2, [pc, #504]	@ (8003a6c <HAL_UART_IRQHandler+0x3e0>)
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f865 	bl	800194a <HAL_DMA_Abort_IT>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e00e      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f994 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00a      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f990 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e006      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f98c 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038b2:	e175      	b.n	8003ba0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	bf00      	nop
    return;
 80038b6:	e173      	b.n	8003ba0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 814f 	bne.w	8003b60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8148 	beq.w	8003b60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8141 	beq.w	8003b60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b40      	cmp	r3, #64	@ 0x40
 8003900:	f040 80b6 	bne.w	8003a70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8145 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800391e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003922:	429a      	cmp	r2, r3
 8003924:	f080 813e 	bcs.w	8003ba4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800392e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	f000 8088 	beq.w	8003a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800395c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800396a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800396e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1d9      	bne.n	800393e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800399a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e1      	bne.n	800398a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e3      	bne.n	8003a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd ff0e 	bl	800186a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8b7 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a6a:	e09b      	b.n	8003ba4 <HAL_UART_IRQHandler+0x518>
 8003a6c:	08003ddd 	.word	0x08003ddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 808e 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8089 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8003abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e3      	bne.n	8003a96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b38:	61fa      	str	r2, [r7, #28]
 8003b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	617b      	str	r3, [r7, #20]
   return(result);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e3      	bne.n	8003b14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f83d 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b5e:	e023      	b.n	8003ba8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_UART_IRQHandler+0x4f4>
 8003b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f943 	bl	8003e04 <UART_Transmit_IT>
    return;
 8003b7e:	e014      	b.n	8003baa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_UART_IRQHandler+0x51e>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f983 	bl	8003ea4 <UART_EndTransmit_IT>
    return;
 8003b9e:	e004      	b.n	8003baa <HAL_UART_IRQHandler+0x51e>
    return;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ba8:	bf00      	nop
  }
}
 8003baa:	37e8      	adds	r7, #232	@ 0xe8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	e03b      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d037      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd fced 	bl	80015e8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e03a      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d023      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b80      	cmp	r3, #128	@ 0x80
 8003c36:	d020      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	d01d      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d116      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f857 	bl	8003d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00f      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d0b4      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	@ 0x22
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0220 	orr.w	r2, r2, #32
 8003d06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b095      	sub	sp, #84	@ 0x54
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d119      	bne.n	8003dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dae:	61ba      	str	r2, [r7, #24]
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dd0:	bf00      	nop
 8003dd2:	3754      	adds	r7, #84	@ 0x54
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff fee4 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	@ 0x21
 8003e16:	d13e      	bne.n	8003e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d114      	bne.n	8003e4c <UART_Transmit_IT+0x48>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]
 8003e4a:	e008      	b.n	8003e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	1c59      	adds	r1, r3, #1
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6211      	str	r1, [r2, #32]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fe73 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b22      	cmp	r3, #34	@ 0x22
 8003ee6:	f040 80ae 	bne.w	8004046 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d117      	bne.n	8003f24 <UART_Receive_IT+0x50>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f22:	e026      	b.n	8003f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	d007      	beq.n	8003f48 <UART_Receive_IT+0x74>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <UART_Receive_IT+0x82>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e008      	b.n	8003f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15d      	bne.n	8004042 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0220 	bic.w	r2, r2, #32
 8003f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d135      	bne.n	8004038 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff2:	623a      	str	r2, [r7, #32]
 8003ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	69f9      	ldr	r1, [r7, #28]
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d10a      	bne.n	800402a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fdd1 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
 8004036:	e002      	b.n	800403e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fc ff87 	bl	8000f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e002      	b.n	8004048 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3730      	adds	r7, #48	@ 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b0c0      	sub	sp, #256	@ 0x100
 8004056:	af00      	add	r7, sp, #0
 8004058:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	68d9      	ldr	r1, [r3, #12]
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	ea40 0301 	orr.w	r3, r0, r1
 8004078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040a8:	f021 010c 	bic.w	r1, r1, #12
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040b6:	430b      	orrs	r3, r1
 80040b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	6999      	ldr	r1, [r3, #24]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	ea40 0301 	orr.w	r3, r0, r1
 80040d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8f      	ldr	r3, [pc, #572]	@ (800431c <UART_SetConfig+0x2cc>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <UART_SetConfig+0xa0>
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004320 <UART_SetConfig+0x2d0>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d104      	bne.n	80040fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fe ff0e 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 80040f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040f8:	e003      	b.n	8004102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fa:	f7fe fef5 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 80040fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410c:	f040 810c 	bne.w	8004328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800411a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800411e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004122:	4622      	mov	r2, r4
 8004124:	462b      	mov	r3, r5
 8004126:	1891      	adds	r1, r2, r2
 8004128:	65b9      	str	r1, [r7, #88]	@ 0x58
 800412a:	415b      	adcs	r3, r3
 800412c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800412e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004132:	4621      	mov	r1, r4
 8004134:	eb12 0801 	adds.w	r8, r2, r1
 8004138:	4629      	mov	r1, r5
 800413a:	eb43 0901 	adc.w	r9, r3, r1
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004152:	4690      	mov	r8, r2
 8004154:	4699      	mov	r9, r3
 8004156:	4623      	mov	r3, r4
 8004158:	eb18 0303 	adds.w	r3, r8, r3
 800415c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004160:	462b      	mov	r3, r5
 8004162:	eb49 0303 	adc.w	r3, r9, r3
 8004166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004176:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800417a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800417e:	460b      	mov	r3, r1
 8004180:	18db      	adds	r3, r3, r3
 8004182:	653b      	str	r3, [r7, #80]	@ 0x50
 8004184:	4613      	mov	r3, r2
 8004186:	eb42 0303 	adc.w	r3, r2, r3
 800418a:	657b      	str	r3, [r7, #84]	@ 0x54
 800418c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004194:	f7fc f88c 	bl	80002b0 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <UART_SetConfig+0x2d4>)
 800419e:	fba3 2302 	umull	r2, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	011c      	lsls	r4, r3, #4
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041c0:	415b      	adcs	r3, r3
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041c8:	4641      	mov	r1, r8
 80041ca:	eb12 0a01 	adds.w	sl, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb43 0b01 	adc.w	fp, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e8:	4692      	mov	sl, r2
 80041ea:	469b      	mov	fp, r3
 80041ec:	4643      	mov	r3, r8
 80041ee:	eb1a 0303 	adds.w	r3, sl, r3
 80041f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f6:	464b      	mov	r3, r9
 80041f8:	eb4b 0303 	adc.w	r3, fp, r3
 80041fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800420c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	643b      	str	r3, [r7, #64]	@ 0x40
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	647b      	str	r3, [r7, #68]	@ 0x44
 8004222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800422a:	f7fc f841 	bl	80002b0 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4611      	mov	r1, r2
 8004234:	4b3b      	ldr	r3, [pc, #236]	@ (8004324 <UART_SetConfig+0x2d4>)
 8004236:	fba3 2301 	umull	r2, r3, r3, r1
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2264      	movs	r2, #100	@ 0x64
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	1acb      	subs	r3, r1, r3
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800424a:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <UART_SetConfig+0x2d4>)
 800424c:	fba3 2302 	umull	r2, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004258:	441c      	add	r4, r3
 800425a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004264:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004274:	415b      	adcs	r3, r3
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800427c:	4641      	mov	r1, r8
 800427e:	1851      	adds	r1, r2, r1
 8004280:	6339      	str	r1, [r7, #48]	@ 0x30
 8004282:	4649      	mov	r1, r9
 8004284:	414b      	adcs	r3, r1
 8004286:	637b      	str	r3, [r7, #52]	@ 0x34
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004294:	4659      	mov	r1, fp
 8004296:	00cb      	lsls	r3, r1, #3
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429e:	4651      	mov	r1, sl
 80042a0:	00ca      	lsls	r2, r1, #3
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	4642      	mov	r2, r8
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b0:	464b      	mov	r3, r9
 80042b2:	460a      	mov	r2, r1
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d0:	460b      	mov	r3, r1
 80042d2:	18db      	adds	r3, r3, r3
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d6:	4613      	mov	r3, r2
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042e6:	f7fb ffe3 	bl	80002b0 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <UART_SetConfig+0x2d4>)
 80042f0:	fba3 1302 	umull	r1, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2164      	movs	r1, #100	@ 0x64
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	3332      	adds	r3, #50	@ 0x32
 8004302:	4a08      	ldr	r2, [pc, #32]	@ (8004324 <UART_SetConfig+0x2d4>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 0207 	and.w	r2, r3, #7
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4422      	add	r2, r4
 8004316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004318:	e106      	b.n	8004528 <UART_SetConfig+0x4d8>
 800431a:	bf00      	nop
 800431c:	40011000 	.word	0x40011000
 8004320:	40011400 	.word	0x40011400
 8004324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004332:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800433a:	4642      	mov	r2, r8
 800433c:	464b      	mov	r3, r9
 800433e:	1891      	adds	r1, r2, r2
 8004340:	6239      	str	r1, [r7, #32]
 8004342:	415b      	adcs	r3, r3
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
 8004346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800434a:	4641      	mov	r1, r8
 800434c:	1854      	adds	r4, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb43 0501 	adc.w	r5, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	00eb      	lsls	r3, r5, #3
 800435e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	4643      	mov	r3, r8
 800436a:	18e3      	adds	r3, r4, r3
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004370:	464b      	mov	r3, r9
 8004372:	eb45 0303 	adc.w	r3, r5, r3
 8004376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004386:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004396:	4629      	mov	r1, r5
 8004398:	008b      	lsls	r3, r1, #2
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a0:	4621      	mov	r1, r4
 80043a2:	008a      	lsls	r2, r1, #2
 80043a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043a8:	f7fb ff82 	bl	80002b0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b60      	ldr	r3, [pc, #384]	@ (8004534 <UART_SetConfig+0x4e4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	61b9      	str	r1, [r7, #24]
 80043d4:	415b      	adcs	r3, r3
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6139      	str	r1, [r7, #16]
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004426:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004434:	4649      	mov	r1, r9
 8004436:	008b      	lsls	r3, r1, #2
 8004438:	4641      	mov	r1, r8
 800443a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800443e:	4641      	mov	r1, r8
 8004440:	008a      	lsls	r2, r1, #2
 8004442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004446:	f7fb ff33 	bl	80002b0 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4611      	mov	r1, r2
 8004450:	4b38      	ldr	r3, [pc, #224]	@ (8004534 <UART_SetConfig+0x4e4>)
 8004452:	fba3 2301 	umull	r2, r3, r3, r1
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2264      	movs	r2, #100	@ 0x64
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	1acb      	subs	r3, r1, r3
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	3332      	adds	r3, #50	@ 0x32
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <UART_SetConfig+0x4e4>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004470:	441c      	add	r4, r3
 8004472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004476:	2200      	movs	r2, #0
 8004478:	673b      	str	r3, [r7, #112]	@ 0x70
 800447a:	677a      	str	r2, [r7, #116]	@ 0x74
 800447c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	415b      	adcs	r3, r3
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c2:	464b      	mov	r3, r9
 80044c4:	460a      	mov	r2, r1
 80044c6:	eb42 0303 	adc.w	r3, r2, r3
 80044ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044e4:	4649      	mov	r1, r9
 80044e6:	008b      	lsls	r3, r1, #2
 80044e8:	4641      	mov	r1, r8
 80044ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ee:	4641      	mov	r1, r8
 80044f0:	008a      	lsls	r2, r1, #2
 80044f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044f6:	f7fb fedb 	bl	80002b0 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <UART_SetConfig+0x4e4>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	@ 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	3332      	adds	r3, #50	@ 0x32
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <UART_SetConfig+0x4e4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4422      	add	r2, r4
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800452e:	46bd      	mov	sp, r7
 8004530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <atoi>:
 8004538:	220a      	movs	r2, #10
 800453a:	2100      	movs	r1, #0
 800453c:	f000 b87a 	b.w	8004634 <strtol>

08004540 <_strtol_l.constprop.0>:
 8004540:	2b24      	cmp	r3, #36	@ 0x24
 8004542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004546:	4686      	mov	lr, r0
 8004548:	4690      	mov	r8, r2
 800454a:	d801      	bhi.n	8004550 <_strtol_l.constprop.0+0x10>
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <_strtol_l.constprop.0+0x1e>
 8004550:	f000 fb4e 	bl	8004bf0 <__errno>
 8004554:	2316      	movs	r3, #22
 8004556:	6003      	str	r3, [r0, #0]
 8004558:	2000      	movs	r0, #0
 800455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455e:	4834      	ldr	r0, [pc, #208]	@ (8004630 <_strtol_l.constprop.0+0xf0>)
 8004560:	460d      	mov	r5, r1
 8004562:	462a      	mov	r2, r5
 8004564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004568:	5d06      	ldrb	r6, [r0, r4]
 800456a:	f016 0608 	ands.w	r6, r6, #8
 800456e:	d1f8      	bne.n	8004562 <_strtol_l.constprop.0+0x22>
 8004570:	2c2d      	cmp	r4, #45	@ 0x2d
 8004572:	d12d      	bne.n	80045d0 <_strtol_l.constprop.0+0x90>
 8004574:	782c      	ldrb	r4, [r5, #0]
 8004576:	2601      	movs	r6, #1
 8004578:	1c95      	adds	r5, r2, #2
 800457a:	f033 0210 	bics.w	r2, r3, #16
 800457e:	d109      	bne.n	8004594 <_strtol_l.constprop.0+0x54>
 8004580:	2c30      	cmp	r4, #48	@ 0x30
 8004582:	d12a      	bne.n	80045da <_strtol_l.constprop.0+0x9a>
 8004584:	782a      	ldrb	r2, [r5, #0]
 8004586:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800458a:	2a58      	cmp	r2, #88	@ 0x58
 800458c:	d125      	bne.n	80045da <_strtol_l.constprop.0+0x9a>
 800458e:	786c      	ldrb	r4, [r5, #1]
 8004590:	2310      	movs	r3, #16
 8004592:	3502      	adds	r5, #2
 8004594:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004598:	f10c 3cff 	add.w	ip, ip, #4294967295
 800459c:	2200      	movs	r2, #0
 800459e:	fbbc f9f3 	udiv	r9, ip, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80045a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80045ac:	2f09      	cmp	r7, #9
 80045ae:	d81b      	bhi.n	80045e8 <_strtol_l.constprop.0+0xa8>
 80045b0:	463c      	mov	r4, r7
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	dd27      	ble.n	8004606 <_strtol_l.constprop.0+0xc6>
 80045b6:	1c57      	adds	r7, r2, #1
 80045b8:	d007      	beq.n	80045ca <_strtol_l.constprop.0+0x8a>
 80045ba:	4581      	cmp	r9, r0
 80045bc:	d320      	bcc.n	8004600 <_strtol_l.constprop.0+0xc0>
 80045be:	d101      	bne.n	80045c4 <_strtol_l.constprop.0+0x84>
 80045c0:	45a2      	cmp	sl, r4
 80045c2:	db1d      	blt.n	8004600 <_strtol_l.constprop.0+0xc0>
 80045c4:	fb00 4003 	mla	r0, r0, r3, r4
 80045c8:	2201      	movs	r2, #1
 80045ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045ce:	e7eb      	b.n	80045a8 <_strtol_l.constprop.0+0x68>
 80045d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80045d2:	bf04      	itt	eq
 80045d4:	782c      	ldrbeq	r4, [r5, #0]
 80045d6:	1c95      	addeq	r5, r2, #2
 80045d8:	e7cf      	b.n	800457a <_strtol_l.constprop.0+0x3a>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1da      	bne.n	8004594 <_strtol_l.constprop.0+0x54>
 80045de:	2c30      	cmp	r4, #48	@ 0x30
 80045e0:	bf0c      	ite	eq
 80045e2:	2308      	moveq	r3, #8
 80045e4:	230a      	movne	r3, #10
 80045e6:	e7d5      	b.n	8004594 <_strtol_l.constprop.0+0x54>
 80045e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80045ec:	2f19      	cmp	r7, #25
 80045ee:	d801      	bhi.n	80045f4 <_strtol_l.constprop.0+0xb4>
 80045f0:	3c37      	subs	r4, #55	@ 0x37
 80045f2:	e7de      	b.n	80045b2 <_strtol_l.constprop.0+0x72>
 80045f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80045f8:	2f19      	cmp	r7, #25
 80045fa:	d804      	bhi.n	8004606 <_strtol_l.constprop.0+0xc6>
 80045fc:	3c57      	subs	r4, #87	@ 0x57
 80045fe:	e7d8      	b.n	80045b2 <_strtol_l.constprop.0+0x72>
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	e7e1      	b.n	80045ca <_strtol_l.constprop.0+0x8a>
 8004606:	1c53      	adds	r3, r2, #1
 8004608:	d108      	bne.n	800461c <_strtol_l.constprop.0+0xdc>
 800460a:	2322      	movs	r3, #34	@ 0x22
 800460c:	f8ce 3000 	str.w	r3, [lr]
 8004610:	4660      	mov	r0, ip
 8004612:	f1b8 0f00 	cmp.w	r8, #0
 8004616:	d0a0      	beq.n	800455a <_strtol_l.constprop.0+0x1a>
 8004618:	1e69      	subs	r1, r5, #1
 800461a:	e006      	b.n	800462a <_strtol_l.constprop.0+0xea>
 800461c:	b106      	cbz	r6, 8004620 <_strtol_l.constprop.0+0xe0>
 800461e:	4240      	negs	r0, r0
 8004620:	f1b8 0f00 	cmp.w	r8, #0
 8004624:	d099      	beq.n	800455a <_strtol_l.constprop.0+0x1a>
 8004626:	2a00      	cmp	r2, #0
 8004628:	d1f6      	bne.n	8004618 <_strtol_l.constprop.0+0xd8>
 800462a:	f8c8 1000 	str.w	r1, [r8]
 800462e:	e794      	b.n	800455a <_strtol_l.constprop.0+0x1a>
 8004630:	08005bcd 	.word	0x08005bcd

08004634 <strtol>:
 8004634:	4613      	mov	r3, r2
 8004636:	460a      	mov	r2, r1
 8004638:	4601      	mov	r1, r0
 800463a:	4802      	ldr	r0, [pc, #8]	@ (8004644 <strtol+0x10>)
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f7ff bf7f 	b.w	8004540 <_strtol_l.constprop.0>
 8004642:	bf00      	nop
 8004644:	20000018 	.word	0x20000018

08004648 <std>:
 8004648:	2300      	movs	r3, #0
 800464a:	b510      	push	{r4, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	e9c0 3300 	strd	r3, r3, [r0]
 8004652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004656:	6083      	str	r3, [r0, #8]
 8004658:	8181      	strh	r1, [r0, #12]
 800465a:	6643      	str	r3, [r0, #100]	@ 0x64
 800465c:	81c2      	strh	r2, [r0, #14]
 800465e:	6183      	str	r3, [r0, #24]
 8004660:	4619      	mov	r1, r3
 8004662:	2208      	movs	r2, #8
 8004664:	305c      	adds	r0, #92	@ 0x5c
 8004666:	f000 fa19 	bl	8004a9c <memset>
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <std+0x58>)
 800466c:	6263      	str	r3, [r4, #36]	@ 0x24
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <std+0x5c>)
 8004670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <std+0x60>)
 8004674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <std+0x64>)
 8004678:	6323      	str	r3, [r4, #48]	@ 0x30
 800467a:	4b0d      	ldr	r3, [pc, #52]	@ (80046b0 <std+0x68>)
 800467c:	6224      	str	r4, [r4, #32]
 800467e:	429c      	cmp	r4, r3
 8004680:	d006      	beq.n	8004690 <std+0x48>
 8004682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004686:	4294      	cmp	r4, r2
 8004688:	d002      	beq.n	8004690 <std+0x48>
 800468a:	33d0      	adds	r3, #208	@ 0xd0
 800468c:	429c      	cmp	r4, r3
 800468e:	d105      	bne.n	800469c <std+0x54>
 8004690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 bad4 	b.w	8004c44 <__retarget_lock_init_recursive>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	080048ed 	.word	0x080048ed
 80046a4:	0800490f 	.word	0x0800490f
 80046a8:	08004947 	.word	0x08004947
 80046ac:	0800496b 	.word	0x0800496b
 80046b0:	20000264 	.word	0x20000264

080046b4 <stdio_exit_handler>:
 80046b4:	4a02      	ldr	r2, [pc, #8]	@ (80046c0 <stdio_exit_handler+0xc>)
 80046b6:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <stdio_exit_handler+0x10>)
 80046b8:	4803      	ldr	r0, [pc, #12]	@ (80046c8 <stdio_exit_handler+0x14>)
 80046ba:	f000 b869 	b.w	8004790 <_fwalk_sglue>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c
 80046c4:	080057f1 	.word	0x080057f1
 80046c8:	2000001c 	.word	0x2000001c

080046cc <cleanup_stdio>:
 80046cc:	6841      	ldr	r1, [r0, #4]
 80046ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <cleanup_stdio+0x34>)
 80046d0:	4299      	cmp	r1, r3
 80046d2:	b510      	push	{r4, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	d001      	beq.n	80046dc <cleanup_stdio+0x10>
 80046d8:	f001 f88a 	bl	80057f0 <_fflush_r>
 80046dc:	68a1      	ldr	r1, [r4, #8]
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <cleanup_stdio+0x38>)
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <cleanup_stdio+0x1e>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f001 f883 	bl	80057f0 <_fflush_r>
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <cleanup_stdio+0x3c>)
 80046ee:	4299      	cmp	r1, r3
 80046f0:	d004      	beq.n	80046fc <cleanup_stdio+0x30>
 80046f2:	4620      	mov	r0, r4
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f001 b87a 	b.w	80057f0 <_fflush_r>
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	20000264 	.word	0x20000264
 8004704:	200002cc 	.word	0x200002cc
 8004708:	20000334 	.word	0x20000334

0800470c <global_stdio_init.part.0>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <global_stdio_init.part.0+0x30>)
 8004710:	4c0b      	ldr	r4, [pc, #44]	@ (8004740 <global_stdio_init.part.0+0x34>)
 8004712:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <global_stdio_init.part.0+0x38>)
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	4620      	mov	r0, r4
 8004718:	2200      	movs	r2, #0
 800471a:	2104      	movs	r1, #4
 800471c:	f7ff ff94 	bl	8004648 <std>
 8004720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004724:	2201      	movs	r2, #1
 8004726:	2109      	movs	r1, #9
 8004728:	f7ff ff8e 	bl	8004648 <std>
 800472c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004730:	2202      	movs	r2, #2
 8004732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004736:	2112      	movs	r1, #18
 8004738:	f7ff bf86 	b.w	8004648 <std>
 800473c:	2000039c 	.word	0x2000039c
 8004740:	20000264 	.word	0x20000264
 8004744:	080046b5 	.word	0x080046b5

08004748 <__sfp_lock_acquire>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__sfp_lock_acquire+0x8>)
 800474a:	f000 ba7c 	b.w	8004c46 <__retarget_lock_acquire_recursive>
 800474e:	bf00      	nop
 8004750:	200003a5 	.word	0x200003a5

08004754 <__sfp_lock_release>:
 8004754:	4801      	ldr	r0, [pc, #4]	@ (800475c <__sfp_lock_release+0x8>)
 8004756:	f000 ba77 	b.w	8004c48 <__retarget_lock_release_recursive>
 800475a:	bf00      	nop
 800475c:	200003a5 	.word	0x200003a5

08004760 <__sinit>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4604      	mov	r4, r0
 8004764:	f7ff fff0 	bl	8004748 <__sfp_lock_acquire>
 8004768:	6a23      	ldr	r3, [r4, #32]
 800476a:	b11b      	cbz	r3, 8004774 <__sinit+0x14>
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f7ff bff0 	b.w	8004754 <__sfp_lock_release>
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <__sinit+0x28>)
 8004776:	6223      	str	r3, [r4, #32]
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <__sinit+0x2c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f5      	bne.n	800476c <__sinit+0xc>
 8004780:	f7ff ffc4 	bl	800470c <global_stdio_init.part.0>
 8004784:	e7f2      	b.n	800476c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	080046cd 	.word	0x080046cd
 800478c:	2000039c 	.word	0x2000039c

08004790 <_fwalk_sglue>:
 8004790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004794:	4607      	mov	r7, r0
 8004796:	4688      	mov	r8, r1
 8004798:	4614      	mov	r4, r2
 800479a:	2600      	movs	r6, #0
 800479c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a0:	f1b9 0901 	subs.w	r9, r9, #1
 80047a4:	d505      	bpl.n	80047b2 <_fwalk_sglue+0x22>
 80047a6:	6824      	ldr	r4, [r4, #0]
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d1f7      	bne.n	800479c <_fwalk_sglue+0xc>
 80047ac:	4630      	mov	r0, r6
 80047ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d907      	bls.n	80047c8 <_fwalk_sglue+0x38>
 80047b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047bc:	3301      	adds	r3, #1
 80047be:	d003      	beq.n	80047c8 <_fwalk_sglue+0x38>
 80047c0:	4629      	mov	r1, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	4306      	orrs	r6, r0
 80047c8:	3568      	adds	r5, #104	@ 0x68
 80047ca:	e7e9      	b.n	80047a0 <_fwalk_sglue+0x10>

080047cc <iprintf>:
 80047cc:	b40f      	push	{r0, r1, r2, r3}
 80047ce:	b507      	push	{r0, r1, r2, lr}
 80047d0:	4906      	ldr	r1, [pc, #24]	@ (80047ec <iprintf+0x20>)
 80047d2:	ab04      	add	r3, sp, #16
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047da:	6881      	ldr	r1, [r0, #8]
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	f000 fcdd 	bl	800519c <_vfiprintf_r>
 80047e2:	b003      	add	sp, #12
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b004      	add	sp, #16
 80047ea:	4770      	bx	lr
 80047ec:	20000018 	.word	0x20000018

080047f0 <_puts_r>:
 80047f0:	6a03      	ldr	r3, [r0, #32]
 80047f2:	b570      	push	{r4, r5, r6, lr}
 80047f4:	6884      	ldr	r4, [r0, #8]
 80047f6:	4605      	mov	r5, r0
 80047f8:	460e      	mov	r6, r1
 80047fa:	b90b      	cbnz	r3, 8004800 <_puts_r+0x10>
 80047fc:	f7ff ffb0 	bl	8004760 <__sinit>
 8004800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004802:	07db      	lsls	r3, r3, #31
 8004804:	d405      	bmi.n	8004812 <_puts_r+0x22>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	0598      	lsls	r0, r3, #22
 800480a:	d402      	bmi.n	8004812 <_puts_r+0x22>
 800480c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800480e:	f000 fa1a 	bl	8004c46 <__retarget_lock_acquire_recursive>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	0719      	lsls	r1, r3, #28
 8004816:	d502      	bpl.n	800481e <_puts_r+0x2e>
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d135      	bne.n	800488a <_puts_r+0x9a>
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	f000 f8e5 	bl	80049f0 <__swsetup_r>
 8004826:	b380      	cbz	r0, 800488a <_puts_r+0x9a>
 8004828:	f04f 35ff 	mov.w	r5, #4294967295
 800482c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d405      	bmi.n	800483e <_puts_r+0x4e>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	059b      	lsls	r3, r3, #22
 8004836:	d402      	bmi.n	800483e <_puts_r+0x4e>
 8004838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800483a:	f000 fa05 	bl	8004c48 <__retarget_lock_release_recursive>
 800483e:	4628      	mov	r0, r5
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	2b00      	cmp	r3, #0
 8004844:	da04      	bge.n	8004850 <_puts_r+0x60>
 8004846:	69a2      	ldr	r2, [r4, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	dc17      	bgt.n	800487c <_puts_r+0x8c>
 800484c:	290a      	cmp	r1, #10
 800484e:	d015      	beq.n	800487c <_puts_r+0x8c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	7019      	strb	r1, [r3, #0]
 8004858:	68a3      	ldr	r3, [r4, #8]
 800485a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800485e:	3b01      	subs	r3, #1
 8004860:	60a3      	str	r3, [r4, #8]
 8004862:	2900      	cmp	r1, #0
 8004864:	d1ed      	bne.n	8004842 <_puts_r+0x52>
 8004866:	2b00      	cmp	r3, #0
 8004868:	da11      	bge.n	800488e <_puts_r+0x9e>
 800486a:	4622      	mov	r2, r4
 800486c:	210a      	movs	r1, #10
 800486e:	4628      	mov	r0, r5
 8004870:	f000 f87f 	bl	8004972 <__swbuf_r>
 8004874:	3001      	adds	r0, #1
 8004876:	d0d7      	beq.n	8004828 <_puts_r+0x38>
 8004878:	250a      	movs	r5, #10
 800487a:	e7d7      	b.n	800482c <_puts_r+0x3c>
 800487c:	4622      	mov	r2, r4
 800487e:	4628      	mov	r0, r5
 8004880:	f000 f877 	bl	8004972 <__swbuf_r>
 8004884:	3001      	adds	r0, #1
 8004886:	d1e7      	bne.n	8004858 <_puts_r+0x68>
 8004888:	e7ce      	b.n	8004828 <_puts_r+0x38>
 800488a:	3e01      	subs	r6, #1
 800488c:	e7e4      	b.n	8004858 <_puts_r+0x68>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	220a      	movs	r2, #10
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e7ee      	b.n	8004878 <_puts_r+0x88>
	...

0800489c <puts>:
 800489c:	4b02      	ldr	r3, [pc, #8]	@ (80048a8 <puts+0xc>)
 800489e:	4601      	mov	r1, r0
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	f7ff bfa5 	b.w	80047f0 <_puts_r>
 80048a6:	bf00      	nop
 80048a8:	20000018 	.word	0x20000018

080048ac <siprintf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	b500      	push	{lr}
 80048b0:	b09c      	sub	sp, #112	@ 0x70
 80048b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048b4:	9002      	str	r0, [sp, #8]
 80048b6:	9006      	str	r0, [sp, #24]
 80048b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048bc:	4809      	ldr	r0, [pc, #36]	@ (80048e4 <siprintf+0x38>)
 80048be:	9107      	str	r1, [sp, #28]
 80048c0:	9104      	str	r1, [sp, #16]
 80048c2:	4909      	ldr	r1, [pc, #36]	@ (80048e8 <siprintf+0x3c>)
 80048c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	a902      	add	r1, sp, #8
 80048d0:	f000 fb3e 	bl	8004f50 <_svfiprintf_r>
 80048d4:	9b02      	ldr	r3, [sp, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	b01c      	add	sp, #112	@ 0x70
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	20000018 	.word	0x20000018
 80048e8:	ffff0208 	.word	0xffff0208

080048ec <__sread>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	460c      	mov	r4, r1
 80048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f4:	f000 f958 	bl	8004ba8 <_read_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	bfab      	itete	ge
 80048fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004900:	181b      	addge	r3, r3, r0
 8004902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004906:	bfac      	ite	ge
 8004908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800490a:	81a3      	strhlt	r3, [r4, #12]
 800490c:	bd10      	pop	{r4, pc}

0800490e <__swrite>:
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	461f      	mov	r7, r3
 8004914:	898b      	ldrh	r3, [r1, #12]
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	4605      	mov	r5, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4616      	mov	r6, r2
 800491e:	d505      	bpl.n	800492c <__swrite+0x1e>
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2302      	movs	r3, #2
 8004926:	2200      	movs	r2, #0
 8004928:	f000 f92c 	bl	8004b84 <_lseek_r>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	4628      	mov	r0, r5
 800493e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004942:	f000 b943 	b.w	8004bcc <_write_r>

08004946 <__sseek>:
 8004946:	b510      	push	{r4, lr}
 8004948:	460c      	mov	r4, r1
 800494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494e:	f000 f919 	bl	8004b84 <_lseek_r>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	bf15      	itete	ne
 8004958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800495a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800495e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004962:	81a3      	strheq	r3, [r4, #12]
 8004964:	bf18      	it	ne
 8004966:	81a3      	strhne	r3, [r4, #12]
 8004968:	bd10      	pop	{r4, pc}

0800496a <__sclose>:
 800496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496e:	f000 b8f9 	b.w	8004b64 <_close_r>

08004972 <__swbuf_r>:
 8004972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004974:	460e      	mov	r6, r1
 8004976:	4614      	mov	r4, r2
 8004978:	4605      	mov	r5, r0
 800497a:	b118      	cbz	r0, 8004984 <__swbuf_r+0x12>
 800497c:	6a03      	ldr	r3, [r0, #32]
 800497e:	b90b      	cbnz	r3, 8004984 <__swbuf_r+0x12>
 8004980:	f7ff feee 	bl	8004760 <__sinit>
 8004984:	69a3      	ldr	r3, [r4, #24]
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	071a      	lsls	r2, r3, #28
 800498c:	d501      	bpl.n	8004992 <__swbuf_r+0x20>
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	b943      	cbnz	r3, 80049a4 <__swbuf_r+0x32>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f82b 	bl	80049f0 <__swsetup_r>
 800499a:	b118      	cbz	r0, 80049a4 <__swbuf_r+0x32>
 800499c:	f04f 37ff 	mov.w	r7, #4294967295
 80049a0:	4638      	mov	r0, r7
 80049a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	6922      	ldr	r2, [r4, #16]
 80049a8:	1a98      	subs	r0, r3, r2
 80049aa:	6963      	ldr	r3, [r4, #20]
 80049ac:	b2f6      	uxtb	r6, r6
 80049ae:	4283      	cmp	r3, r0
 80049b0:	4637      	mov	r7, r6
 80049b2:	dc05      	bgt.n	80049c0 <__swbuf_r+0x4e>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 ff1a 	bl	80057f0 <_fflush_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d1ed      	bne.n	800499c <__swbuf_r+0x2a>
 80049c0:	68a3      	ldr	r3, [r4, #8]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	701e      	strb	r6, [r3, #0]
 80049ce:	6962      	ldr	r2, [r4, #20]
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d004      	beq.n	80049e0 <__swbuf_r+0x6e>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	07db      	lsls	r3, r3, #31
 80049da:	d5e1      	bpl.n	80049a0 <__swbuf_r+0x2e>
 80049dc:	2e0a      	cmp	r6, #10
 80049de:	d1df      	bne.n	80049a0 <__swbuf_r+0x2e>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 ff04 	bl	80057f0 <_fflush_r>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d0d9      	beq.n	80049a0 <__swbuf_r+0x2e>
 80049ec:	e7d6      	b.n	800499c <__swbuf_r+0x2a>
	...

080049f0 <__swsetup_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <__swsetup_r+0xa8>)
 80049f4:	4605      	mov	r5, r0
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	460c      	mov	r4, r1
 80049fa:	b118      	cbz	r0, 8004a04 <__swsetup_r+0x14>
 80049fc:	6a03      	ldr	r3, [r0, #32]
 80049fe:	b90b      	cbnz	r3, 8004a04 <__swsetup_r+0x14>
 8004a00:	f7ff feae 	bl	8004760 <__sinit>
 8004a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a08:	0719      	lsls	r1, r3, #28
 8004a0a:	d422      	bmi.n	8004a52 <__swsetup_r+0x62>
 8004a0c:	06da      	lsls	r2, r3, #27
 8004a0e:	d407      	bmi.n	8004a20 <__swsetup_r+0x30>
 8004a10:	2209      	movs	r2, #9
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	e033      	b.n	8004a88 <__swsetup_r+0x98>
 8004a20:	0758      	lsls	r0, r3, #29
 8004a22:	d512      	bpl.n	8004a4a <__swsetup_r+0x5a>
 8004a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a26:	b141      	cbz	r1, 8004a3a <__swsetup_r+0x4a>
 8004a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	d002      	beq.n	8004a36 <__swsetup_r+0x46>
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 f931 	bl	8004c98 <_free_r>
 8004a36:	2300      	movs	r3, #0
 8004a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	2300      	movs	r3, #0
 8004a44:	6063      	str	r3, [r4, #4]
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	b94b      	cbnz	r3, 8004a6a <__swsetup_r+0x7a>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a60:	d003      	beq.n	8004a6a <__swsetup_r+0x7a>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	f000 ff23 	bl	80058b0 <__smakebuf_r>
 8004a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6e:	f013 0201 	ands.w	r2, r3, #1
 8004a72:	d00a      	beq.n	8004a8a <__swsetup_r+0x9a>
 8004a74:	2200      	movs	r2, #0
 8004a76:	60a2      	str	r2, [r4, #8]
 8004a78:	6962      	ldr	r2, [r4, #20]
 8004a7a:	4252      	negs	r2, r2
 8004a7c:	61a2      	str	r2, [r4, #24]
 8004a7e:	6922      	ldr	r2, [r4, #16]
 8004a80:	b942      	cbnz	r2, 8004a94 <__swsetup_r+0xa4>
 8004a82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a86:	d1c5      	bne.n	8004a14 <__swsetup_r+0x24>
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	0799      	lsls	r1, r3, #30
 8004a8c:	bf58      	it	pl
 8004a8e:	6962      	ldrpl	r2, [r4, #20]
 8004a90:	60a2      	str	r2, [r4, #8]
 8004a92:	e7f4      	b.n	8004a7e <__swsetup_r+0x8e>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e7f7      	b.n	8004a88 <__swsetup_r+0x98>
 8004a98:	20000018 	.word	0x20000018

08004a9c <memset>:
 8004a9c:	4402      	add	r2, r0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <memset+0xa>
 8004aa4:	4770      	bx	lr
 8004aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aaa:	e7f9      	b.n	8004aa0 <memset+0x4>

08004aac <strtok>:
 8004aac:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <strtok+0x5c>)
 8004aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab2:	681f      	ldr	r7, [r3, #0]
 8004ab4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	460e      	mov	r6, r1
 8004aba:	b9ec      	cbnz	r4, 8004af8 <strtok+0x4c>
 8004abc:	2050      	movs	r0, #80	@ 0x50
 8004abe:	f000 f935 	bl	8004d2c <malloc>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6478      	str	r0, [r7, #68]	@ 0x44
 8004ac6:	b920      	cbnz	r0, 8004ad2 <strtok+0x26>
 8004ac8:	4b10      	ldr	r3, [pc, #64]	@ (8004b0c <strtok+0x60>)
 8004aca:	4811      	ldr	r0, [pc, #68]	@ (8004b10 <strtok+0x64>)
 8004acc:	215b      	movs	r1, #91	@ 0x5b
 8004ace:	f000 f8c5 	bl	8004c5c <__assert_func>
 8004ad2:	e9c0 4400 	strd	r4, r4, [r0]
 8004ad6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ada:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ade:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004ae2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004ae6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004aea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004aee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004af2:	6184      	str	r4, [r0, #24]
 8004af4:	7704      	strb	r4, [r0, #28]
 8004af6:	6244      	str	r4, [r0, #36]	@ 0x24
 8004af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	2301      	movs	r3, #1
 8004b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b04:	f000 b806 	b.w	8004b14 <__strtok_r>
 8004b08:	20000018 	.word	0x20000018
 8004b0c:	08005ccd 	.word	0x08005ccd
 8004b10:	08005ce4 	.word	0x08005ce4

08004b14 <__strtok_r>:
 8004b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b16:	4604      	mov	r4, r0
 8004b18:	b908      	cbnz	r0, 8004b1e <__strtok_r+0xa>
 8004b1a:	6814      	ldr	r4, [r2, #0]
 8004b1c:	b144      	cbz	r4, 8004b30 <__strtok_r+0x1c>
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b24:	460f      	mov	r7, r1
 8004b26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b2a:	b91e      	cbnz	r6, 8004b34 <__strtok_r+0x20>
 8004b2c:	b965      	cbnz	r5, 8004b48 <__strtok_r+0x34>
 8004b2e:	6015      	str	r5, [r2, #0]
 8004b30:	2000      	movs	r0, #0
 8004b32:	e005      	b.n	8004b40 <__strtok_r+0x2c>
 8004b34:	42b5      	cmp	r5, r6
 8004b36:	d1f6      	bne.n	8004b26 <__strtok_r+0x12>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <__strtok_r+0xa>
 8004b3c:	6014      	str	r4, [r2, #0]
 8004b3e:	7003      	strb	r3, [r0, #0]
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	461c      	mov	r4, r3
 8004b44:	e00c      	b.n	8004b60 <__strtok_r+0x4c>
 8004b46:	b915      	cbnz	r5, 8004b4e <__strtok_r+0x3a>
 8004b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b4c:	460e      	mov	r6, r1
 8004b4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b52:	42ab      	cmp	r3, r5
 8004b54:	d1f7      	bne.n	8004b46 <__strtok_r+0x32>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f3      	beq.n	8004b42 <__strtok_r+0x2e>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004b60:	6014      	str	r4, [r2, #0]
 8004b62:	e7ed      	b.n	8004b40 <__strtok_r+0x2c>

08004b64 <_close_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d06      	ldr	r5, [pc, #24]	@ (8004b80 <_close_r+0x1c>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fc fc2e 	bl	80013d0 <_close>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_close_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_close_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200003a0 	.word	0x200003a0

08004b84 <_lseek_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	@ (8004ba4 <_lseek_r+0x20>)
 8004b88:	4604      	mov	r4, r0
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	602a      	str	r2, [r5, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f7fc fc43 	bl	800141e <_lseek>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_lseek_r+0x1e>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_lseek_r+0x1e>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	200003a0 	.word	0x200003a0

08004ba8 <_read_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d07      	ldr	r5, [pc, #28]	@ (8004bc8 <_read_r+0x20>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7fc fbd1 	bl	800135e <_read>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_read_r+0x1e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_read_r+0x1e>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200003a0 	.word	0x200003a0

08004bcc <_write_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d07      	ldr	r5, [pc, #28]	@ (8004bec <_write_r+0x20>)
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	602a      	str	r2, [r5, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fc fbdc 	bl	8001398 <_write>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_write_r+0x1e>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_write_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200003a0 	.word	0x200003a0

08004bf0 <__errno>:
 8004bf0:	4b01      	ldr	r3, [pc, #4]	@ (8004bf8 <__errno+0x8>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000018 	.word	0x20000018

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	@ (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c40 <__libc_init_array+0x44>)
 8004c10:	f000 ff66 	bl	8005ae0 <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08005db8 	.word	0x08005db8
 8004c38:	08005db8 	.word	0x08005db8
 8004c3c:	08005db8 	.word	0x08005db8
 8004c40:	08005dbc 	.word	0x08005dbc

08004c44 <__retarget_lock_init_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__retarget_lock_acquire_recursive>:
 8004c46:	4770      	bx	lr

08004c48 <__retarget_lock_release_recursive>:
 8004c48:	4770      	bx	lr

08004c4a <strcpy>:
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c50:	f803 2b01 	strb.w	r2, [r3], #1
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	d1f9      	bne.n	8004c4c <strcpy+0x2>
 8004c58:	4770      	bx	lr
	...

08004c5c <__assert_func>:
 8004c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c5e:	4614      	mov	r4, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <__assert_func+0x2c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4605      	mov	r5, r0
 8004c68:	68d8      	ldr	r0, [r3, #12]
 8004c6a:	b954      	cbnz	r4, 8004c82 <__assert_func+0x26>
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <__assert_func+0x30>)
 8004c6e:	461c      	mov	r4, r3
 8004c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c74:	9100      	str	r1, [sp, #0]
 8004c76:	462b      	mov	r3, r5
 8004c78:	4905      	ldr	r1, [pc, #20]	@ (8004c90 <__assert_func+0x34>)
 8004c7a:	f000 fde1 	bl	8005840 <fiprintf>
 8004c7e:	f000 fead 	bl	80059dc <abort>
 8004c82:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <__assert_func+0x38>)
 8004c84:	e7f4      	b.n	8004c70 <__assert_func+0x14>
 8004c86:	bf00      	nop
 8004c88:	20000018 	.word	0x20000018
 8004c8c:	08005d79 	.word	0x08005d79
 8004c90:	08005d4b 	.word	0x08005d4b
 8004c94:	08005d3e 	.word	0x08005d3e

08004c98 <_free_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d041      	beq.n	8004d24 <_free_r+0x8c>
 8004ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca4:	1f0c      	subs	r4, r1, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bfb8      	it	lt
 8004caa:	18e4      	addlt	r4, r4, r3
 8004cac:	f000 f8e8 	bl	8004e80 <__malloc_lock>
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <_free_r+0x90>)
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	b933      	cbnz	r3, 8004cc4 <_free_r+0x2c>
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	6014      	str	r4, [r2, #0]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc0:	f000 b8e4 	b.w	8004e8c <__malloc_unlock>
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d908      	bls.n	8004cda <_free_r+0x42>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	1821      	adds	r1, r4, r0
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	bf01      	itttt	eq
 8004cd0:	6819      	ldreq	r1, [r3, #0]
 8004cd2:	685b      	ldreq	r3, [r3, #4]
 8004cd4:	1809      	addeq	r1, r1, r0
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	e7ed      	b.n	8004cb6 <_free_r+0x1e>
 8004cda:	461a      	mov	r2, r3
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b10b      	cbz	r3, 8004ce4 <_free_r+0x4c>
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	d9fa      	bls.n	8004cda <_free_r+0x42>
 8004ce4:	6811      	ldr	r1, [r2, #0]
 8004ce6:	1850      	adds	r0, r2, r1
 8004ce8:	42a0      	cmp	r0, r4
 8004cea:	d10b      	bne.n	8004d04 <_free_r+0x6c>
 8004cec:	6820      	ldr	r0, [r4, #0]
 8004cee:	4401      	add	r1, r0
 8004cf0:	1850      	adds	r0, r2, r1
 8004cf2:	4283      	cmp	r3, r0
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	d1e0      	bne.n	8004cba <_free_r+0x22>
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	6053      	str	r3, [r2, #4]
 8004cfe:	4408      	add	r0, r1
 8004d00:	6010      	str	r0, [r2, #0]
 8004d02:	e7da      	b.n	8004cba <_free_r+0x22>
 8004d04:	d902      	bls.n	8004d0c <_free_r+0x74>
 8004d06:	230c      	movs	r3, #12
 8004d08:	602b      	str	r3, [r5, #0]
 8004d0a:	e7d6      	b.n	8004cba <_free_r+0x22>
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	1821      	adds	r1, r4, r0
 8004d10:	428b      	cmp	r3, r1
 8004d12:	bf04      	itt	eq
 8004d14:	6819      	ldreq	r1, [r3, #0]
 8004d16:	685b      	ldreq	r3, [r3, #4]
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	bf04      	itt	eq
 8004d1c:	1809      	addeq	r1, r1, r0
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	6054      	str	r4, [r2, #4]
 8004d22:	e7ca      	b.n	8004cba <_free_r+0x22>
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	bf00      	nop
 8004d28:	200003ac 	.word	0x200003ac

08004d2c <malloc>:
 8004d2c:	4b02      	ldr	r3, [pc, #8]	@ (8004d38 <malloc+0xc>)
 8004d2e:	4601      	mov	r1, r0
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f000 b825 	b.w	8004d80 <_malloc_r>
 8004d36:	bf00      	nop
 8004d38:	20000018 	.word	0x20000018

08004d3c <sbrk_aligned>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004d7c <sbrk_aligned+0x40>)
 8004d40:	460c      	mov	r4, r1
 8004d42:	6831      	ldr	r1, [r6, #0]
 8004d44:	4605      	mov	r5, r0
 8004d46:	b911      	cbnz	r1, 8004d4e <sbrk_aligned+0x12>
 8004d48:	f000 fe2a 	bl	80059a0 <_sbrk_r>
 8004d4c:	6030      	str	r0, [r6, #0]
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 fe25 	bl	80059a0 <_sbrk_r>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	d103      	bne.n	8004d62 <sbrk_aligned+0x26>
 8004d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d5e:	4620      	mov	r0, r4
 8004d60:	bd70      	pop	{r4, r5, r6, pc}
 8004d62:	1cc4      	adds	r4, r0, #3
 8004d64:	f024 0403 	bic.w	r4, r4, #3
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d0f8      	beq.n	8004d5e <sbrk_aligned+0x22>
 8004d6c:	1a21      	subs	r1, r4, r0
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fe16 	bl	80059a0 <_sbrk_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d1f2      	bne.n	8004d5e <sbrk_aligned+0x22>
 8004d78:	e7ef      	b.n	8004d5a <sbrk_aligned+0x1e>
 8004d7a:	bf00      	nop
 8004d7c:	200003a8 	.word	0x200003a8

08004d80 <_malloc_r>:
 8004d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d84:	1ccd      	adds	r5, r1, #3
 8004d86:	f025 0503 	bic.w	r5, r5, #3
 8004d8a:	3508      	adds	r5, #8
 8004d8c:	2d0c      	cmp	r5, #12
 8004d8e:	bf38      	it	cc
 8004d90:	250c      	movcc	r5, #12
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	4606      	mov	r6, r0
 8004d96:	db01      	blt.n	8004d9c <_malloc_r+0x1c>
 8004d98:	42a9      	cmp	r1, r5
 8004d9a:	d904      	bls.n	8004da6 <_malloc_r+0x26>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	2000      	movs	r0, #0
 8004da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e7c <_malloc_r+0xfc>
 8004daa:	f000 f869 	bl	8004e80 <__malloc_lock>
 8004dae:	f8d8 3000 	ldr.w	r3, [r8]
 8004db2:	461c      	mov	r4, r3
 8004db4:	bb44      	cbnz	r4, 8004e08 <_malloc_r+0x88>
 8004db6:	4629      	mov	r1, r5
 8004db8:	4630      	mov	r0, r6
 8004dba:	f7ff ffbf 	bl	8004d3c <sbrk_aligned>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	d158      	bne.n	8004e76 <_malloc_r+0xf6>
 8004dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8004dc8:	4627      	mov	r7, r4
 8004dca:	2f00      	cmp	r7, #0
 8004dcc:	d143      	bne.n	8004e56 <_malloc_r+0xd6>
 8004dce:	2c00      	cmp	r4, #0
 8004dd0:	d04b      	beq.n	8004e6a <_malloc_r+0xea>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	eb04 0903 	add.w	r9, r4, r3
 8004ddc:	f000 fde0 	bl	80059a0 <_sbrk_r>
 8004de0:	4581      	cmp	r9, r0
 8004de2:	d142      	bne.n	8004e6a <_malloc_r+0xea>
 8004de4:	6821      	ldr	r1, [r4, #0]
 8004de6:	1a6d      	subs	r5, r5, r1
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ffa6 	bl	8004d3c <sbrk_aligned>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d03a      	beq.n	8004e6a <_malloc_r+0xea>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	442b      	add	r3, r5
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	bb62      	cbnz	r2, 8004e5c <_malloc_r+0xdc>
 8004e02:	f8c8 7000 	str.w	r7, [r8]
 8004e06:	e00f      	b.n	8004e28 <_malloc_r+0xa8>
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	1b52      	subs	r2, r2, r5
 8004e0c:	d420      	bmi.n	8004e50 <_malloc_r+0xd0>
 8004e0e:	2a0b      	cmp	r2, #11
 8004e10:	d917      	bls.n	8004e42 <_malloc_r+0xc2>
 8004e12:	1961      	adds	r1, r4, r5
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	6025      	str	r5, [r4, #0]
 8004e18:	bf18      	it	ne
 8004e1a:	6059      	strne	r1, [r3, #4]
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	bf08      	it	eq
 8004e20:	f8c8 1000 	streq.w	r1, [r8]
 8004e24:	5162      	str	r2, [r4, r5]
 8004e26:	604b      	str	r3, [r1, #4]
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f000 f82f 	bl	8004e8c <__malloc_unlock>
 8004e2e:	f104 000b 	add.w	r0, r4, #11
 8004e32:	1d23      	adds	r3, r4, #4
 8004e34:	f020 0007 	bic.w	r0, r0, #7
 8004e38:	1ac2      	subs	r2, r0, r3
 8004e3a:	bf1c      	itt	ne
 8004e3c:	1a1b      	subne	r3, r3, r0
 8004e3e:	50a3      	strne	r3, [r4, r2]
 8004e40:	e7af      	b.n	8004da2 <_malloc_r+0x22>
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	bf0c      	ite	eq
 8004e48:	f8c8 2000 	streq.w	r2, [r8]
 8004e4c:	605a      	strne	r2, [r3, #4]
 8004e4e:	e7eb      	b.n	8004e28 <_malloc_r+0xa8>
 8004e50:	4623      	mov	r3, r4
 8004e52:	6864      	ldr	r4, [r4, #4]
 8004e54:	e7ae      	b.n	8004db4 <_malloc_r+0x34>
 8004e56:	463c      	mov	r4, r7
 8004e58:	687f      	ldr	r7, [r7, #4]
 8004e5a:	e7b6      	b.n	8004dca <_malloc_r+0x4a>
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d1fb      	bne.n	8004e5c <_malloc_r+0xdc>
 8004e64:	2300      	movs	r3, #0
 8004e66:	6053      	str	r3, [r2, #4]
 8004e68:	e7de      	b.n	8004e28 <_malloc_r+0xa8>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f80c 	bl	8004e8c <__malloc_unlock>
 8004e74:	e794      	b.n	8004da0 <_malloc_r+0x20>
 8004e76:	6005      	str	r5, [r0, #0]
 8004e78:	e7d6      	b.n	8004e28 <_malloc_r+0xa8>
 8004e7a:	bf00      	nop
 8004e7c:	200003ac 	.word	0x200003ac

08004e80 <__malloc_lock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	@ (8004e88 <__malloc_lock+0x8>)
 8004e82:	f7ff bee0 	b.w	8004c46 <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	200003a4 	.word	0x200003a4

08004e8c <__malloc_unlock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	@ (8004e94 <__malloc_unlock+0x8>)
 8004e8e:	f7ff bedb 	b.w	8004c48 <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	200003a4 	.word	0x200003a4

08004e98 <__ssputs_r>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	688e      	ldr	r6, [r1, #8]
 8004e9e:	461f      	mov	r7, r3
 8004ea0:	42be      	cmp	r6, r7
 8004ea2:	680b      	ldr	r3, [r1, #0]
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4690      	mov	r8, r2
 8004eaa:	d82d      	bhi.n	8004f08 <__ssputs_r+0x70>
 8004eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004eb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004eb4:	d026      	beq.n	8004f04 <__ssputs_r+0x6c>
 8004eb6:	6965      	ldr	r5, [r4, #20]
 8004eb8:	6909      	ldr	r1, [r1, #16]
 8004eba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ebe:	eba3 0901 	sub.w	r9, r3, r1
 8004ec2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ec6:	1c7b      	adds	r3, r7, #1
 8004ec8:	444b      	add	r3, r9
 8004eca:	106d      	asrs	r5, r5, #1
 8004ecc:	429d      	cmp	r5, r3
 8004ece:	bf38      	it	cc
 8004ed0:	461d      	movcc	r5, r3
 8004ed2:	0553      	lsls	r3, r2, #21
 8004ed4:	d527      	bpl.n	8004f26 <__ssputs_r+0x8e>
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7ff ff52 	bl	8004d80 <_malloc_r>
 8004edc:	4606      	mov	r6, r0
 8004ede:	b360      	cbz	r0, 8004f3a <__ssputs_r+0xa2>
 8004ee0:	6921      	ldr	r1, [r4, #16]
 8004ee2:	464a      	mov	r2, r9
 8004ee4:	f000 fd6c 	bl	80059c0 <memcpy>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	6126      	str	r6, [r4, #16]
 8004ef6:	6165      	str	r5, [r4, #20]
 8004ef8:	444e      	add	r6, r9
 8004efa:	eba5 0509 	sub.w	r5, r5, r9
 8004efe:	6026      	str	r6, [r4, #0]
 8004f00:	60a5      	str	r5, [r4, #8]
 8004f02:	463e      	mov	r6, r7
 8004f04:	42be      	cmp	r6, r7
 8004f06:	d900      	bls.n	8004f0a <__ssputs_r+0x72>
 8004f08:	463e      	mov	r6, r7
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	4632      	mov	r2, r6
 8004f0e:	4641      	mov	r1, r8
 8004f10:	f000 fd0a 	bl	8005928 <memmove>
 8004f14:	68a3      	ldr	r3, [r4, #8]
 8004f16:	1b9b      	subs	r3, r3, r6
 8004f18:	60a3      	str	r3, [r4, #8]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	4433      	add	r3, r6
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	2000      	movs	r0, #0
 8004f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f26:	462a      	mov	r2, r5
 8004f28:	f000 fd5f 	bl	80059ea <_realloc_r>
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d1e0      	bne.n	8004ef4 <__ssputs_r+0x5c>
 8004f32:	6921      	ldr	r1, [r4, #16]
 8004f34:	4650      	mov	r0, sl
 8004f36:	f7ff feaf 	bl	8004c98 <_free_r>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	f8ca 3000 	str.w	r3, [sl]
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e7e9      	b.n	8004f22 <__ssputs_r+0x8a>
	...

08004f50 <_svfiprintf_r>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	4698      	mov	r8, r3
 8004f56:	898b      	ldrh	r3, [r1, #12]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	b09d      	sub	sp, #116	@ 0x74
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	460d      	mov	r5, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	d510      	bpl.n	8004f86 <_svfiprintf_r+0x36>
 8004f64:	690b      	ldr	r3, [r1, #16]
 8004f66:	b973      	cbnz	r3, 8004f86 <_svfiprintf_r+0x36>
 8004f68:	2140      	movs	r1, #64	@ 0x40
 8004f6a:	f7ff ff09 	bl	8004d80 <_malloc_r>
 8004f6e:	6028      	str	r0, [r5, #0]
 8004f70:	6128      	str	r0, [r5, #16]
 8004f72:	b930      	cbnz	r0, 8004f82 <_svfiprintf_r+0x32>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	b01d      	add	sp, #116	@ 0x74
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	2340      	movs	r3, #64	@ 0x40
 8004f84:	616b      	str	r3, [r5, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8a:	2320      	movs	r3, #32
 8004f8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f94:	2330      	movs	r3, #48	@ 0x30
 8004f96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005134 <_svfiprintf_r+0x1e4>
 8004f9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f9e:	f04f 0901 	mov.w	r9, #1
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	469a      	mov	sl, r3
 8004fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004faa:	b10a      	cbz	r2, 8004fb0 <_svfiprintf_r+0x60>
 8004fac:	2a25      	cmp	r2, #37	@ 0x25
 8004fae:	d1f9      	bne.n	8004fa4 <_svfiprintf_r+0x54>
 8004fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb4:	d00b      	beq.n	8004fce <_svfiprintf_r+0x7e>
 8004fb6:	465b      	mov	r3, fp
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f7ff ff6b 	bl	8004e98 <__ssputs_r>
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f000 80a7 	beq.w	8005116 <_svfiprintf_r+0x1c6>
 8004fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fca:	445a      	add	r2, fp
 8004fcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fce:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 809f 	beq.w	8005116 <_svfiprintf_r+0x1c6>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f04f 32ff 	mov.w	r2, #4294967295
 8004fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fe2:	f10a 0a01 	add.w	sl, sl, #1
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	9307      	str	r3, [sp, #28]
 8004fea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ff0:	4654      	mov	r4, sl
 8004ff2:	2205      	movs	r2, #5
 8004ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff8:	484e      	ldr	r0, [pc, #312]	@ (8005134 <_svfiprintf_r+0x1e4>)
 8004ffa:	f7fb f909 	bl	8000210 <memchr>
 8004ffe:	9a04      	ldr	r2, [sp, #16]
 8005000:	b9d8      	cbnz	r0, 800503a <_svfiprintf_r+0xea>
 8005002:	06d0      	lsls	r0, r2, #27
 8005004:	bf44      	itt	mi
 8005006:	2320      	movmi	r3, #32
 8005008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800500c:	0711      	lsls	r1, r2, #28
 800500e:	bf44      	itt	mi
 8005010:	232b      	movmi	r3, #43	@ 0x2b
 8005012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005016:	f89a 3000 	ldrb.w	r3, [sl]
 800501a:	2b2a      	cmp	r3, #42	@ 0x2a
 800501c:	d015      	beq.n	800504a <_svfiprintf_r+0xfa>
 800501e:	9a07      	ldr	r2, [sp, #28]
 8005020:	4654      	mov	r4, sl
 8005022:	2000      	movs	r0, #0
 8005024:	f04f 0c0a 	mov.w	ip, #10
 8005028:	4621      	mov	r1, r4
 800502a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502e:	3b30      	subs	r3, #48	@ 0x30
 8005030:	2b09      	cmp	r3, #9
 8005032:	d94b      	bls.n	80050cc <_svfiprintf_r+0x17c>
 8005034:	b1b0      	cbz	r0, 8005064 <_svfiprintf_r+0x114>
 8005036:	9207      	str	r2, [sp, #28]
 8005038:	e014      	b.n	8005064 <_svfiprintf_r+0x114>
 800503a:	eba0 0308 	sub.w	r3, r0, r8
 800503e:	fa09 f303 	lsl.w	r3, r9, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	46a2      	mov	sl, r4
 8005048:	e7d2      	b.n	8004ff0 <_svfiprintf_r+0xa0>
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	1d19      	adds	r1, r3, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	9103      	str	r1, [sp, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	bfbb      	ittet	lt
 8005056:	425b      	neglt	r3, r3
 8005058:	f042 0202 	orrlt.w	r2, r2, #2
 800505c:	9307      	strge	r3, [sp, #28]
 800505e:	9307      	strlt	r3, [sp, #28]
 8005060:	bfb8      	it	lt
 8005062:	9204      	strlt	r2, [sp, #16]
 8005064:	7823      	ldrb	r3, [r4, #0]
 8005066:	2b2e      	cmp	r3, #46	@ 0x2e
 8005068:	d10a      	bne.n	8005080 <_svfiprintf_r+0x130>
 800506a:	7863      	ldrb	r3, [r4, #1]
 800506c:	2b2a      	cmp	r3, #42	@ 0x2a
 800506e:	d132      	bne.n	80050d6 <_svfiprintf_r+0x186>
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	1d1a      	adds	r2, r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	9203      	str	r2, [sp, #12]
 8005078:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800507c:	3402      	adds	r4, #2
 800507e:	9305      	str	r3, [sp, #20]
 8005080:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005144 <_svfiprintf_r+0x1f4>
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	4650      	mov	r0, sl
 800508a:	f7fb f8c1 	bl	8000210 <memchr>
 800508e:	b138      	cbz	r0, 80050a0 <_svfiprintf_r+0x150>
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	eba0 000a 	sub.w	r0, r0, sl
 8005096:	2240      	movs	r2, #64	@ 0x40
 8005098:	4082      	lsls	r2, r0
 800509a:	4313      	orrs	r3, r2
 800509c:	3401      	adds	r4, #1
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a4:	4824      	ldr	r0, [pc, #144]	@ (8005138 <_svfiprintf_r+0x1e8>)
 80050a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050aa:	2206      	movs	r2, #6
 80050ac:	f7fb f8b0 	bl	8000210 <memchr>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d036      	beq.n	8005122 <_svfiprintf_r+0x1d2>
 80050b4:	4b21      	ldr	r3, [pc, #132]	@ (800513c <_svfiprintf_r+0x1ec>)
 80050b6:	bb1b      	cbnz	r3, 8005100 <_svfiprintf_r+0x1b0>
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	3307      	adds	r3, #7
 80050bc:	f023 0307 	bic.w	r3, r3, #7
 80050c0:	3308      	adds	r3, #8
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c6:	4433      	add	r3, r6
 80050c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ca:	e76a      	b.n	8004fa2 <_svfiprintf_r+0x52>
 80050cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d0:	460c      	mov	r4, r1
 80050d2:	2001      	movs	r0, #1
 80050d4:	e7a8      	b.n	8005028 <_svfiprintf_r+0xd8>
 80050d6:	2300      	movs	r3, #0
 80050d8:	3401      	adds	r4, #1
 80050da:	9305      	str	r3, [sp, #20]
 80050dc:	4619      	mov	r1, r3
 80050de:	f04f 0c0a 	mov.w	ip, #10
 80050e2:	4620      	mov	r0, r4
 80050e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e8:	3a30      	subs	r2, #48	@ 0x30
 80050ea:	2a09      	cmp	r2, #9
 80050ec:	d903      	bls.n	80050f6 <_svfiprintf_r+0x1a6>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0c6      	beq.n	8005080 <_svfiprintf_r+0x130>
 80050f2:	9105      	str	r1, [sp, #20]
 80050f4:	e7c4      	b.n	8005080 <_svfiprintf_r+0x130>
 80050f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050fa:	4604      	mov	r4, r0
 80050fc:	2301      	movs	r3, #1
 80050fe:	e7f0      	b.n	80050e2 <_svfiprintf_r+0x192>
 8005100:	ab03      	add	r3, sp, #12
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	462a      	mov	r2, r5
 8005106:	4b0e      	ldr	r3, [pc, #56]	@ (8005140 <_svfiprintf_r+0x1f0>)
 8005108:	a904      	add	r1, sp, #16
 800510a:	4638      	mov	r0, r7
 800510c:	f3af 8000 	nop.w
 8005110:	1c42      	adds	r2, r0, #1
 8005112:	4606      	mov	r6, r0
 8005114:	d1d6      	bne.n	80050c4 <_svfiprintf_r+0x174>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	065b      	lsls	r3, r3, #25
 800511a:	f53f af2d 	bmi.w	8004f78 <_svfiprintf_r+0x28>
 800511e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005120:	e72c      	b.n	8004f7c <_svfiprintf_r+0x2c>
 8005122:	ab03      	add	r3, sp, #12
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	462a      	mov	r2, r5
 8005128:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <_svfiprintf_r+0x1f0>)
 800512a:	a904      	add	r1, sp, #16
 800512c:	4638      	mov	r0, r7
 800512e:	f000 f9bb 	bl	80054a8 <_printf_i>
 8005132:	e7ed      	b.n	8005110 <_svfiprintf_r+0x1c0>
 8005134:	08005d7a 	.word	0x08005d7a
 8005138:	08005d84 	.word	0x08005d84
 800513c:	00000000 	.word	0x00000000
 8005140:	08004e99 	.word	0x08004e99
 8005144:	08005d80 	.word	0x08005d80

08005148 <__sfputc_r>:
 8005148:	6893      	ldr	r3, [r2, #8]
 800514a:	3b01      	subs	r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	b410      	push	{r4}
 8005150:	6093      	str	r3, [r2, #8]
 8005152:	da08      	bge.n	8005166 <__sfputc_r+0x1e>
 8005154:	6994      	ldr	r4, [r2, #24]
 8005156:	42a3      	cmp	r3, r4
 8005158:	db01      	blt.n	800515e <__sfputc_r+0x16>
 800515a:	290a      	cmp	r1, #10
 800515c:	d103      	bne.n	8005166 <__sfputc_r+0x1e>
 800515e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005162:	f7ff bc06 	b.w	8004972 <__swbuf_r>
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	1c58      	adds	r0, r3, #1
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	7019      	strb	r1, [r3, #0]
 800516e:	4608      	mov	r0, r1
 8005170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005174:	4770      	bx	lr

08005176 <__sfputs_r>:
 8005176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005178:	4606      	mov	r6, r0
 800517a:	460f      	mov	r7, r1
 800517c:	4614      	mov	r4, r2
 800517e:	18d5      	adds	r5, r2, r3
 8005180:	42ac      	cmp	r4, r5
 8005182:	d101      	bne.n	8005188 <__sfputs_r+0x12>
 8005184:	2000      	movs	r0, #0
 8005186:	e007      	b.n	8005198 <__sfputs_r+0x22>
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	463a      	mov	r2, r7
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff ffda 	bl	8005148 <__sfputc_r>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d1f3      	bne.n	8005180 <__sfputs_r+0xa>
 8005198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800519c <_vfiprintf_r>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	460d      	mov	r5, r1
 80051a2:	b09d      	sub	sp, #116	@ 0x74
 80051a4:	4614      	mov	r4, r2
 80051a6:	4698      	mov	r8, r3
 80051a8:	4606      	mov	r6, r0
 80051aa:	b118      	cbz	r0, 80051b4 <_vfiprintf_r+0x18>
 80051ac:	6a03      	ldr	r3, [r0, #32]
 80051ae:	b90b      	cbnz	r3, 80051b4 <_vfiprintf_r+0x18>
 80051b0:	f7ff fad6 	bl	8004760 <__sinit>
 80051b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051b6:	07d9      	lsls	r1, r3, #31
 80051b8:	d405      	bmi.n	80051c6 <_vfiprintf_r+0x2a>
 80051ba:	89ab      	ldrh	r3, [r5, #12]
 80051bc:	059a      	lsls	r2, r3, #22
 80051be:	d402      	bmi.n	80051c6 <_vfiprintf_r+0x2a>
 80051c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051c2:	f7ff fd40 	bl	8004c46 <__retarget_lock_acquire_recursive>
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	071b      	lsls	r3, r3, #28
 80051ca:	d501      	bpl.n	80051d0 <_vfiprintf_r+0x34>
 80051cc:	692b      	ldr	r3, [r5, #16]
 80051ce:	b99b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x5c>
 80051d0:	4629      	mov	r1, r5
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff fc0c 	bl	80049f0 <__swsetup_r>
 80051d8:	b170      	cbz	r0, 80051f8 <_vfiprintf_r+0x5c>
 80051da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051dc:	07dc      	lsls	r4, r3, #31
 80051de:	d504      	bpl.n	80051ea <_vfiprintf_r+0x4e>
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	b01d      	add	sp, #116	@ 0x74
 80051e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	0598      	lsls	r0, r3, #22
 80051ee:	d4f7      	bmi.n	80051e0 <_vfiprintf_r+0x44>
 80051f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f2:	f7ff fd29 	bl	8004c48 <__retarget_lock_release_recursive>
 80051f6:	e7f3      	b.n	80051e0 <_vfiprintf_r+0x44>
 80051f8:	2300      	movs	r3, #0
 80051fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80051fc:	2320      	movs	r3, #32
 80051fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005202:	f8cd 800c 	str.w	r8, [sp, #12]
 8005206:	2330      	movs	r3, #48	@ 0x30
 8005208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053b8 <_vfiprintf_r+0x21c>
 800520c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005210:	f04f 0901 	mov.w	r9, #1
 8005214:	4623      	mov	r3, r4
 8005216:	469a      	mov	sl, r3
 8005218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800521c:	b10a      	cbz	r2, 8005222 <_vfiprintf_r+0x86>
 800521e:	2a25      	cmp	r2, #37	@ 0x25
 8005220:	d1f9      	bne.n	8005216 <_vfiprintf_r+0x7a>
 8005222:	ebba 0b04 	subs.w	fp, sl, r4
 8005226:	d00b      	beq.n	8005240 <_vfiprintf_r+0xa4>
 8005228:	465b      	mov	r3, fp
 800522a:	4622      	mov	r2, r4
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff ffa1 	bl	8005176 <__sfputs_r>
 8005234:	3001      	adds	r0, #1
 8005236:	f000 80a7 	beq.w	8005388 <_vfiprintf_r+0x1ec>
 800523a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800523c:	445a      	add	r2, fp
 800523e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005240:	f89a 3000 	ldrb.w	r3, [sl]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 809f 	beq.w	8005388 <_vfiprintf_r+0x1ec>
 800524a:	2300      	movs	r3, #0
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005254:	f10a 0a01 	add.w	sl, sl, #1
 8005258:	9304      	str	r3, [sp, #16]
 800525a:	9307      	str	r3, [sp, #28]
 800525c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005260:	931a      	str	r3, [sp, #104]	@ 0x68
 8005262:	4654      	mov	r4, sl
 8005264:	2205      	movs	r2, #5
 8005266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526a:	4853      	ldr	r0, [pc, #332]	@ (80053b8 <_vfiprintf_r+0x21c>)
 800526c:	f7fa ffd0 	bl	8000210 <memchr>
 8005270:	9a04      	ldr	r2, [sp, #16]
 8005272:	b9d8      	cbnz	r0, 80052ac <_vfiprintf_r+0x110>
 8005274:	06d1      	lsls	r1, r2, #27
 8005276:	bf44      	itt	mi
 8005278:	2320      	movmi	r3, #32
 800527a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800527e:	0713      	lsls	r3, r2, #28
 8005280:	bf44      	itt	mi
 8005282:	232b      	movmi	r3, #43	@ 0x2b
 8005284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005288:	f89a 3000 	ldrb.w	r3, [sl]
 800528c:	2b2a      	cmp	r3, #42	@ 0x2a
 800528e:	d015      	beq.n	80052bc <_vfiprintf_r+0x120>
 8005290:	9a07      	ldr	r2, [sp, #28]
 8005292:	4654      	mov	r4, sl
 8005294:	2000      	movs	r0, #0
 8005296:	f04f 0c0a 	mov.w	ip, #10
 800529a:	4621      	mov	r1, r4
 800529c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052a0:	3b30      	subs	r3, #48	@ 0x30
 80052a2:	2b09      	cmp	r3, #9
 80052a4:	d94b      	bls.n	800533e <_vfiprintf_r+0x1a2>
 80052a6:	b1b0      	cbz	r0, 80052d6 <_vfiprintf_r+0x13a>
 80052a8:	9207      	str	r2, [sp, #28]
 80052aa:	e014      	b.n	80052d6 <_vfiprintf_r+0x13a>
 80052ac:	eba0 0308 	sub.w	r3, r0, r8
 80052b0:	fa09 f303 	lsl.w	r3, r9, r3
 80052b4:	4313      	orrs	r3, r2
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	46a2      	mov	sl, r4
 80052ba:	e7d2      	b.n	8005262 <_vfiprintf_r+0xc6>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	1d19      	adds	r1, r3, #4
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	9103      	str	r1, [sp, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bfbb      	ittet	lt
 80052c8:	425b      	neglt	r3, r3
 80052ca:	f042 0202 	orrlt.w	r2, r2, #2
 80052ce:	9307      	strge	r3, [sp, #28]
 80052d0:	9307      	strlt	r3, [sp, #28]
 80052d2:	bfb8      	it	lt
 80052d4:	9204      	strlt	r2, [sp, #16]
 80052d6:	7823      	ldrb	r3, [r4, #0]
 80052d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80052da:	d10a      	bne.n	80052f2 <_vfiprintf_r+0x156>
 80052dc:	7863      	ldrb	r3, [r4, #1]
 80052de:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e0:	d132      	bne.n	8005348 <_vfiprintf_r+0x1ac>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	1d1a      	adds	r2, r3, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	9203      	str	r2, [sp, #12]
 80052ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ee:	3402      	adds	r4, #2
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053c8 <_vfiprintf_r+0x22c>
 80052f6:	7821      	ldrb	r1, [r4, #0]
 80052f8:	2203      	movs	r2, #3
 80052fa:	4650      	mov	r0, sl
 80052fc:	f7fa ff88 	bl	8000210 <memchr>
 8005300:	b138      	cbz	r0, 8005312 <_vfiprintf_r+0x176>
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	eba0 000a 	sub.w	r0, r0, sl
 8005308:	2240      	movs	r2, #64	@ 0x40
 800530a:	4082      	lsls	r2, r0
 800530c:	4313      	orrs	r3, r2
 800530e:	3401      	adds	r4, #1
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005316:	4829      	ldr	r0, [pc, #164]	@ (80053bc <_vfiprintf_r+0x220>)
 8005318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800531c:	2206      	movs	r2, #6
 800531e:	f7fa ff77 	bl	8000210 <memchr>
 8005322:	2800      	cmp	r0, #0
 8005324:	d03f      	beq.n	80053a6 <_vfiprintf_r+0x20a>
 8005326:	4b26      	ldr	r3, [pc, #152]	@ (80053c0 <_vfiprintf_r+0x224>)
 8005328:	bb1b      	cbnz	r3, 8005372 <_vfiprintf_r+0x1d6>
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	3307      	adds	r3, #7
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	3308      	adds	r3, #8
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005338:	443b      	add	r3, r7
 800533a:	9309      	str	r3, [sp, #36]	@ 0x24
 800533c:	e76a      	b.n	8005214 <_vfiprintf_r+0x78>
 800533e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005342:	460c      	mov	r4, r1
 8005344:	2001      	movs	r0, #1
 8005346:	e7a8      	b.n	800529a <_vfiprintf_r+0xfe>
 8005348:	2300      	movs	r3, #0
 800534a:	3401      	adds	r4, #1
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	4619      	mov	r1, r3
 8005350:	f04f 0c0a 	mov.w	ip, #10
 8005354:	4620      	mov	r0, r4
 8005356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800535a:	3a30      	subs	r2, #48	@ 0x30
 800535c:	2a09      	cmp	r2, #9
 800535e:	d903      	bls.n	8005368 <_vfiprintf_r+0x1cc>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0c6      	beq.n	80052f2 <_vfiprintf_r+0x156>
 8005364:	9105      	str	r1, [sp, #20]
 8005366:	e7c4      	b.n	80052f2 <_vfiprintf_r+0x156>
 8005368:	fb0c 2101 	mla	r1, ip, r1, r2
 800536c:	4604      	mov	r4, r0
 800536e:	2301      	movs	r3, #1
 8005370:	e7f0      	b.n	8005354 <_vfiprintf_r+0x1b8>
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <_vfiprintf_r+0x228>)
 800537a:	a904      	add	r1, sp, #16
 800537c:	4630      	mov	r0, r6
 800537e:	f3af 8000 	nop.w
 8005382:	4607      	mov	r7, r0
 8005384:	1c78      	adds	r0, r7, #1
 8005386:	d1d6      	bne.n	8005336 <_vfiprintf_r+0x19a>
 8005388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	d405      	bmi.n	800539a <_vfiprintf_r+0x1fe>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	059a      	lsls	r2, r3, #22
 8005392:	d402      	bmi.n	800539a <_vfiprintf_r+0x1fe>
 8005394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005396:	f7ff fc57 	bl	8004c48 <__retarget_lock_release_recursive>
 800539a:	89ab      	ldrh	r3, [r5, #12]
 800539c:	065b      	lsls	r3, r3, #25
 800539e:	f53f af1f 	bmi.w	80051e0 <_vfiprintf_r+0x44>
 80053a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053a4:	e71e      	b.n	80051e4 <_vfiprintf_r+0x48>
 80053a6:	ab03      	add	r3, sp, #12
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	462a      	mov	r2, r5
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <_vfiprintf_r+0x228>)
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f879 	bl	80054a8 <_printf_i>
 80053b6:	e7e4      	b.n	8005382 <_vfiprintf_r+0x1e6>
 80053b8:	08005d7a 	.word	0x08005d7a
 80053bc:	08005d84 	.word	0x08005d84
 80053c0:	00000000 	.word	0x00000000
 80053c4:	08005177 	.word	0x08005177
 80053c8:	08005d80 	.word	0x08005d80

080053cc <_printf_common>:
 80053cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	4616      	mov	r6, r2
 80053d2:	4698      	mov	r8, r3
 80053d4:	688a      	ldr	r2, [r1, #8]
 80053d6:	690b      	ldr	r3, [r1, #16]
 80053d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053dc:	4293      	cmp	r3, r2
 80053de:	bfb8      	it	lt
 80053e0:	4613      	movlt	r3, r2
 80053e2:	6033      	str	r3, [r6, #0]
 80053e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053e8:	4607      	mov	r7, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	b10a      	cbz	r2, 80053f2 <_printf_common+0x26>
 80053ee:	3301      	adds	r3, #1
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	0699      	lsls	r1, r3, #26
 80053f6:	bf42      	ittt	mi
 80053f8:	6833      	ldrmi	r3, [r6, #0]
 80053fa:	3302      	addmi	r3, #2
 80053fc:	6033      	strmi	r3, [r6, #0]
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	f015 0506 	ands.w	r5, r5, #6
 8005404:	d106      	bne.n	8005414 <_printf_common+0x48>
 8005406:	f104 0a19 	add.w	sl, r4, #25
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	6832      	ldr	r2, [r6, #0]
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	42ab      	cmp	r3, r5
 8005412:	dc26      	bgt.n	8005462 <_printf_common+0x96>
 8005414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	3b00      	subs	r3, #0
 800541c:	bf18      	it	ne
 800541e:	2301      	movne	r3, #1
 8005420:	0692      	lsls	r2, r2, #26
 8005422:	d42b      	bmi.n	800547c <_printf_common+0xb0>
 8005424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005428:	4641      	mov	r1, r8
 800542a:	4638      	mov	r0, r7
 800542c:	47c8      	blx	r9
 800542e:	3001      	adds	r0, #1
 8005430:	d01e      	beq.n	8005470 <_printf_common+0xa4>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	f003 0306 	and.w	r3, r3, #6
 800543a:	2b04      	cmp	r3, #4
 800543c:	bf02      	ittt	eq
 800543e:	68e5      	ldreq	r5, [r4, #12]
 8005440:	6833      	ldreq	r3, [r6, #0]
 8005442:	1aed      	subeq	r5, r5, r3
 8005444:	68a3      	ldr	r3, [r4, #8]
 8005446:	bf0c      	ite	eq
 8005448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800544c:	2500      	movne	r5, #0
 800544e:	4293      	cmp	r3, r2
 8005450:	bfc4      	itt	gt
 8005452:	1a9b      	subgt	r3, r3, r2
 8005454:	18ed      	addgt	r5, r5, r3
 8005456:	2600      	movs	r6, #0
 8005458:	341a      	adds	r4, #26
 800545a:	42b5      	cmp	r5, r6
 800545c:	d11a      	bne.n	8005494 <_printf_common+0xc8>
 800545e:	2000      	movs	r0, #0
 8005460:	e008      	b.n	8005474 <_printf_common+0xa8>
 8005462:	2301      	movs	r3, #1
 8005464:	4652      	mov	r2, sl
 8005466:	4641      	mov	r1, r8
 8005468:	4638      	mov	r0, r7
 800546a:	47c8      	blx	r9
 800546c:	3001      	adds	r0, #1
 800546e:	d103      	bne.n	8005478 <_printf_common+0xac>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005478:	3501      	adds	r5, #1
 800547a:	e7c6      	b.n	800540a <_printf_common+0x3e>
 800547c:	18e1      	adds	r1, r4, r3
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	2030      	movs	r0, #48	@ 0x30
 8005482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005486:	4422      	add	r2, r4
 8005488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800548c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005490:	3302      	adds	r3, #2
 8005492:	e7c7      	b.n	8005424 <_printf_common+0x58>
 8005494:	2301      	movs	r3, #1
 8005496:	4622      	mov	r2, r4
 8005498:	4641      	mov	r1, r8
 800549a:	4638      	mov	r0, r7
 800549c:	47c8      	blx	r9
 800549e:	3001      	adds	r0, #1
 80054a0:	d0e6      	beq.n	8005470 <_printf_common+0xa4>
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7d9      	b.n	800545a <_printf_common+0x8e>
	...

080054a8 <_printf_i>:
 80054a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	7e0f      	ldrb	r7, [r1, #24]
 80054ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054b0:	2f78      	cmp	r7, #120	@ 0x78
 80054b2:	4691      	mov	r9, r2
 80054b4:	4680      	mov	r8, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	469a      	mov	sl, r3
 80054ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054be:	d807      	bhi.n	80054d0 <_printf_i+0x28>
 80054c0:	2f62      	cmp	r7, #98	@ 0x62
 80054c2:	d80a      	bhi.n	80054da <_printf_i+0x32>
 80054c4:	2f00      	cmp	r7, #0
 80054c6:	f000 80d2 	beq.w	800566e <_printf_i+0x1c6>
 80054ca:	2f58      	cmp	r7, #88	@ 0x58
 80054cc:	f000 80b9 	beq.w	8005642 <_printf_i+0x19a>
 80054d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054d8:	e03a      	b.n	8005550 <_printf_i+0xa8>
 80054da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054de:	2b15      	cmp	r3, #21
 80054e0:	d8f6      	bhi.n	80054d0 <_printf_i+0x28>
 80054e2:	a101      	add	r1, pc, #4	@ (adr r1, 80054e8 <_printf_i+0x40>)
 80054e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054e8:	08005541 	.word	0x08005541
 80054ec:	08005555 	.word	0x08005555
 80054f0:	080054d1 	.word	0x080054d1
 80054f4:	080054d1 	.word	0x080054d1
 80054f8:	080054d1 	.word	0x080054d1
 80054fc:	080054d1 	.word	0x080054d1
 8005500:	08005555 	.word	0x08005555
 8005504:	080054d1 	.word	0x080054d1
 8005508:	080054d1 	.word	0x080054d1
 800550c:	080054d1 	.word	0x080054d1
 8005510:	080054d1 	.word	0x080054d1
 8005514:	08005655 	.word	0x08005655
 8005518:	0800557f 	.word	0x0800557f
 800551c:	0800560f 	.word	0x0800560f
 8005520:	080054d1 	.word	0x080054d1
 8005524:	080054d1 	.word	0x080054d1
 8005528:	08005677 	.word	0x08005677
 800552c:	080054d1 	.word	0x080054d1
 8005530:	0800557f 	.word	0x0800557f
 8005534:	080054d1 	.word	0x080054d1
 8005538:	080054d1 	.word	0x080054d1
 800553c:	08005617 	.word	0x08005617
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6032      	str	r2, [r6, #0]
 8005548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800554c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005550:	2301      	movs	r3, #1
 8005552:	e09d      	b.n	8005690 <_printf_i+0x1e8>
 8005554:	6833      	ldr	r3, [r6, #0]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	1d19      	adds	r1, r3, #4
 800555a:	6031      	str	r1, [r6, #0]
 800555c:	0606      	lsls	r6, r0, #24
 800555e:	d501      	bpl.n	8005564 <_printf_i+0xbc>
 8005560:	681d      	ldr	r5, [r3, #0]
 8005562:	e003      	b.n	800556c <_printf_i+0xc4>
 8005564:	0645      	lsls	r5, r0, #25
 8005566:	d5fb      	bpl.n	8005560 <_printf_i+0xb8>
 8005568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800556c:	2d00      	cmp	r5, #0
 800556e:	da03      	bge.n	8005578 <_printf_i+0xd0>
 8005570:	232d      	movs	r3, #45	@ 0x2d
 8005572:	426d      	negs	r5, r5
 8005574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005578:	4859      	ldr	r0, [pc, #356]	@ (80056e0 <_printf_i+0x238>)
 800557a:	230a      	movs	r3, #10
 800557c:	e011      	b.n	80055a2 <_printf_i+0xfa>
 800557e:	6821      	ldr	r1, [r4, #0]
 8005580:	6833      	ldr	r3, [r6, #0]
 8005582:	0608      	lsls	r0, r1, #24
 8005584:	f853 5b04 	ldr.w	r5, [r3], #4
 8005588:	d402      	bmi.n	8005590 <_printf_i+0xe8>
 800558a:	0649      	lsls	r1, r1, #25
 800558c:	bf48      	it	mi
 800558e:	b2ad      	uxthmi	r5, r5
 8005590:	2f6f      	cmp	r7, #111	@ 0x6f
 8005592:	4853      	ldr	r0, [pc, #332]	@ (80056e0 <_printf_i+0x238>)
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	bf14      	ite	ne
 8005598:	230a      	movne	r3, #10
 800559a:	2308      	moveq	r3, #8
 800559c:	2100      	movs	r1, #0
 800559e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055a2:	6866      	ldr	r6, [r4, #4]
 80055a4:	60a6      	str	r6, [r4, #8]
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	bfa2      	ittt	ge
 80055aa:	6821      	ldrge	r1, [r4, #0]
 80055ac:	f021 0104 	bicge.w	r1, r1, #4
 80055b0:	6021      	strge	r1, [r4, #0]
 80055b2:	b90d      	cbnz	r5, 80055b8 <_printf_i+0x110>
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d04b      	beq.n	8005650 <_printf_i+0x1a8>
 80055b8:	4616      	mov	r6, r2
 80055ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80055be:	fb03 5711 	mls	r7, r3, r1, r5
 80055c2:	5dc7      	ldrb	r7, [r0, r7]
 80055c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055c8:	462f      	mov	r7, r5
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	460d      	mov	r5, r1
 80055ce:	d9f4      	bls.n	80055ba <_printf_i+0x112>
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10b      	bne.n	80055ec <_printf_i+0x144>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07df      	lsls	r7, r3, #31
 80055d8:	d508      	bpl.n	80055ec <_printf_i+0x144>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	bfde      	ittt	le
 80055e2:	2330      	movle	r3, #48	@ 0x30
 80055e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ec:	1b92      	subs	r2, r2, r6
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	464b      	mov	r3, r9
 80055f6:	aa03      	add	r2, sp, #12
 80055f8:	4621      	mov	r1, r4
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fee6 	bl	80053cc <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	d14a      	bne.n	800569a <_printf_i+0x1f2>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b004      	add	sp, #16
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	4833      	ldr	r0, [pc, #204]	@ (80056e4 <_printf_i+0x23c>)
 8005618:	2778      	movs	r7, #120	@ 0x78
 800561a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	6831      	ldr	r1, [r6, #0]
 8005622:	061f      	lsls	r7, r3, #24
 8005624:	f851 5b04 	ldr.w	r5, [r1], #4
 8005628:	d402      	bmi.n	8005630 <_printf_i+0x188>
 800562a:	065f      	lsls	r7, r3, #25
 800562c:	bf48      	it	mi
 800562e:	b2ad      	uxthmi	r5, r5
 8005630:	6031      	str	r1, [r6, #0]
 8005632:	07d9      	lsls	r1, r3, #31
 8005634:	bf44      	itt	mi
 8005636:	f043 0320 	orrmi.w	r3, r3, #32
 800563a:	6023      	strmi	r3, [r4, #0]
 800563c:	b11d      	cbz	r5, 8005646 <_printf_i+0x19e>
 800563e:	2310      	movs	r3, #16
 8005640:	e7ac      	b.n	800559c <_printf_i+0xf4>
 8005642:	4827      	ldr	r0, [pc, #156]	@ (80056e0 <_printf_i+0x238>)
 8005644:	e7e9      	b.n	800561a <_printf_i+0x172>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f023 0320 	bic.w	r3, r3, #32
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	e7f6      	b.n	800563e <_printf_i+0x196>
 8005650:	4616      	mov	r6, r2
 8005652:	e7bd      	b.n	80055d0 <_printf_i+0x128>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	6961      	ldr	r1, [r4, #20]
 800565a:	1d18      	adds	r0, r3, #4
 800565c:	6030      	str	r0, [r6, #0]
 800565e:	062e      	lsls	r6, r5, #24
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	d501      	bpl.n	8005668 <_printf_i+0x1c0>
 8005664:	6019      	str	r1, [r3, #0]
 8005666:	e002      	b.n	800566e <_printf_i+0x1c6>
 8005668:	0668      	lsls	r0, r5, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0x1bc>
 800566c:	8019      	strh	r1, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	4616      	mov	r6, r2
 8005674:	e7bc      	b.n	80055f0 <_printf_i+0x148>
 8005676:	6833      	ldr	r3, [r6, #0]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	6032      	str	r2, [r6, #0]
 800567c:	681e      	ldr	r6, [r3, #0]
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	2100      	movs	r1, #0
 8005682:	4630      	mov	r0, r6
 8005684:	f7fa fdc4 	bl	8000210 <memchr>
 8005688:	b108      	cbz	r0, 800568e <_printf_i+0x1e6>
 800568a:	1b80      	subs	r0, r0, r6
 800568c:	6060      	str	r0, [r4, #4]
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	2300      	movs	r3, #0
 8005694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005698:	e7aa      	b.n	80055f0 <_printf_i+0x148>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	4632      	mov	r2, r6
 800569e:	4649      	mov	r1, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	47d0      	blx	sl
 80056a4:	3001      	adds	r0, #1
 80056a6:	d0ad      	beq.n	8005604 <_printf_i+0x15c>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	079b      	lsls	r3, r3, #30
 80056ac:	d413      	bmi.n	80056d6 <_printf_i+0x22e>
 80056ae:	68e0      	ldr	r0, [r4, #12]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	4298      	cmp	r0, r3
 80056b4:	bfb8      	it	lt
 80056b6:	4618      	movlt	r0, r3
 80056b8:	e7a6      	b.n	8005608 <_printf_i+0x160>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4632      	mov	r2, r6
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d09d      	beq.n	8005604 <_printf_i+0x15c>
 80056c8:	3501      	adds	r5, #1
 80056ca:	68e3      	ldr	r3, [r4, #12]
 80056cc:	9903      	ldr	r1, [sp, #12]
 80056ce:	1a5b      	subs	r3, r3, r1
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dcf2      	bgt.n	80056ba <_printf_i+0x212>
 80056d4:	e7eb      	b.n	80056ae <_printf_i+0x206>
 80056d6:	2500      	movs	r5, #0
 80056d8:	f104 0619 	add.w	r6, r4, #25
 80056dc:	e7f5      	b.n	80056ca <_printf_i+0x222>
 80056de:	bf00      	nop
 80056e0:	08005d8b 	.word	0x08005d8b
 80056e4:	08005d9c 	.word	0x08005d9c

080056e8 <__sflush_r>:
 80056e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	0716      	lsls	r6, r2, #28
 80056f2:	4605      	mov	r5, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	d454      	bmi.n	80057a2 <__sflush_r+0xba>
 80056f8:	684b      	ldr	r3, [r1, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	dc02      	bgt.n	8005704 <__sflush_r+0x1c>
 80056fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	dd48      	ble.n	8005796 <__sflush_r+0xae>
 8005704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005706:	2e00      	cmp	r6, #0
 8005708:	d045      	beq.n	8005796 <__sflush_r+0xae>
 800570a:	2300      	movs	r3, #0
 800570c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005710:	682f      	ldr	r7, [r5, #0]
 8005712:	6a21      	ldr	r1, [r4, #32]
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	d030      	beq.n	800577a <__sflush_r+0x92>
 8005718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	0759      	lsls	r1, r3, #29
 800571e:	d505      	bpl.n	800572c <__sflush_r+0x44>
 8005720:	6863      	ldr	r3, [r4, #4]
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005726:	b10b      	cbz	r3, 800572c <__sflush_r+0x44>
 8005728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005730:	6a21      	ldr	r1, [r4, #32]
 8005732:	4628      	mov	r0, r5
 8005734:	47b0      	blx	r6
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	d106      	bne.n	800574a <__sflush_r+0x62>
 800573c:	6829      	ldr	r1, [r5, #0]
 800573e:	291d      	cmp	r1, #29
 8005740:	d82b      	bhi.n	800579a <__sflush_r+0xb2>
 8005742:	4a2a      	ldr	r2, [pc, #168]	@ (80057ec <__sflush_r+0x104>)
 8005744:	410a      	asrs	r2, r1
 8005746:	07d6      	lsls	r6, r2, #31
 8005748:	d427      	bmi.n	800579a <__sflush_r+0xb2>
 800574a:	2200      	movs	r2, #0
 800574c:	6062      	str	r2, [r4, #4]
 800574e:	04d9      	lsls	r1, r3, #19
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	6022      	str	r2, [r4, #0]
 8005754:	d504      	bpl.n	8005760 <__sflush_r+0x78>
 8005756:	1c42      	adds	r2, r0, #1
 8005758:	d101      	bne.n	800575e <__sflush_r+0x76>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	b903      	cbnz	r3, 8005760 <__sflush_r+0x78>
 800575e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005762:	602f      	str	r7, [r5, #0]
 8005764:	b1b9      	cbz	r1, 8005796 <__sflush_r+0xae>
 8005766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800576a:	4299      	cmp	r1, r3
 800576c:	d002      	beq.n	8005774 <__sflush_r+0x8c>
 800576e:	4628      	mov	r0, r5
 8005770:	f7ff fa92 	bl	8004c98 <_free_r>
 8005774:	2300      	movs	r3, #0
 8005776:	6363      	str	r3, [r4, #52]	@ 0x34
 8005778:	e00d      	b.n	8005796 <__sflush_r+0xae>
 800577a:	2301      	movs	r3, #1
 800577c:	4628      	mov	r0, r5
 800577e:	47b0      	blx	r6
 8005780:	4602      	mov	r2, r0
 8005782:	1c50      	adds	r0, r2, #1
 8005784:	d1c9      	bne.n	800571a <__sflush_r+0x32>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0c6      	beq.n	800571a <__sflush_r+0x32>
 800578c:	2b1d      	cmp	r3, #29
 800578e:	d001      	beq.n	8005794 <__sflush_r+0xac>
 8005790:	2b16      	cmp	r3, #22
 8005792:	d11e      	bne.n	80057d2 <__sflush_r+0xea>
 8005794:	602f      	str	r7, [r5, #0]
 8005796:	2000      	movs	r0, #0
 8005798:	e022      	b.n	80057e0 <__sflush_r+0xf8>
 800579a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800579e:	b21b      	sxth	r3, r3
 80057a0:	e01b      	b.n	80057da <__sflush_r+0xf2>
 80057a2:	690f      	ldr	r7, [r1, #16]
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	d0f6      	beq.n	8005796 <__sflush_r+0xae>
 80057a8:	0793      	lsls	r3, r2, #30
 80057aa:	680e      	ldr	r6, [r1, #0]
 80057ac:	bf08      	it	eq
 80057ae:	694b      	ldreq	r3, [r1, #20]
 80057b0:	600f      	str	r7, [r1, #0]
 80057b2:	bf18      	it	ne
 80057b4:	2300      	movne	r3, #0
 80057b6:	eba6 0807 	sub.w	r8, r6, r7
 80057ba:	608b      	str	r3, [r1, #8]
 80057bc:	f1b8 0f00 	cmp.w	r8, #0
 80057c0:	dde9      	ble.n	8005796 <__sflush_r+0xae>
 80057c2:	6a21      	ldr	r1, [r4, #32]
 80057c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057c6:	4643      	mov	r3, r8
 80057c8:	463a      	mov	r2, r7
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b0      	blx	r6
 80057ce:	2800      	cmp	r0, #0
 80057d0:	dc08      	bgt.n	80057e4 <__sflush_r+0xfc>
 80057d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e4:	4407      	add	r7, r0
 80057e6:	eba8 0800 	sub.w	r8, r8, r0
 80057ea:	e7e7      	b.n	80057bc <__sflush_r+0xd4>
 80057ec:	dfbffffe 	.word	0xdfbffffe

080057f0 <_fflush_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	4605      	mov	r5, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	b913      	cbnz	r3, 8005800 <_fflush_r+0x10>
 80057fa:	2500      	movs	r5, #0
 80057fc:	4628      	mov	r0, r5
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	b118      	cbz	r0, 800580a <_fflush_r+0x1a>
 8005802:	6a03      	ldr	r3, [r0, #32]
 8005804:	b90b      	cbnz	r3, 800580a <_fflush_r+0x1a>
 8005806:	f7fe ffab 	bl	8004760 <__sinit>
 800580a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f3      	beq.n	80057fa <_fflush_r+0xa>
 8005812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005814:	07d0      	lsls	r0, r2, #31
 8005816:	d404      	bmi.n	8005822 <_fflush_r+0x32>
 8005818:	0599      	lsls	r1, r3, #22
 800581a:	d402      	bmi.n	8005822 <_fflush_r+0x32>
 800581c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581e:	f7ff fa12 	bl	8004c46 <__retarget_lock_acquire_recursive>
 8005822:	4628      	mov	r0, r5
 8005824:	4621      	mov	r1, r4
 8005826:	f7ff ff5f 	bl	80056e8 <__sflush_r>
 800582a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800582c:	07da      	lsls	r2, r3, #31
 800582e:	4605      	mov	r5, r0
 8005830:	d4e4      	bmi.n	80057fc <_fflush_r+0xc>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d4e1      	bmi.n	80057fc <_fflush_r+0xc>
 8005838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800583a:	f7ff fa05 	bl	8004c48 <__retarget_lock_release_recursive>
 800583e:	e7dd      	b.n	80057fc <_fflush_r+0xc>

08005840 <fiprintf>:
 8005840:	b40e      	push	{r1, r2, r3}
 8005842:	b503      	push	{r0, r1, lr}
 8005844:	4601      	mov	r1, r0
 8005846:	ab03      	add	r3, sp, #12
 8005848:	4805      	ldr	r0, [pc, #20]	@ (8005860 <fiprintf+0x20>)
 800584a:	f853 2b04 	ldr.w	r2, [r3], #4
 800584e:	6800      	ldr	r0, [r0, #0]
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	f7ff fca3 	bl	800519c <_vfiprintf_r>
 8005856:	b002      	add	sp, #8
 8005858:	f85d eb04 	ldr.w	lr, [sp], #4
 800585c:	b003      	add	sp, #12
 800585e:	4770      	bx	lr
 8005860:	20000018 	.word	0x20000018

08005864 <__swhatbuf_r>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	460c      	mov	r4, r1
 8005868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586c:	2900      	cmp	r1, #0
 800586e:	b096      	sub	sp, #88	@ 0x58
 8005870:	4615      	mov	r5, r2
 8005872:	461e      	mov	r6, r3
 8005874:	da0d      	bge.n	8005892 <__swhatbuf_r+0x2e>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800587c:	f04f 0100 	mov.w	r1, #0
 8005880:	bf14      	ite	ne
 8005882:	2340      	movne	r3, #64	@ 0x40
 8005884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005888:	2000      	movs	r0, #0
 800588a:	6031      	str	r1, [r6, #0]
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	b016      	add	sp, #88	@ 0x58
 8005890:	bd70      	pop	{r4, r5, r6, pc}
 8005892:	466a      	mov	r2, sp
 8005894:	f000 f862 	bl	800595c <_fstat_r>
 8005898:	2800      	cmp	r0, #0
 800589a:	dbec      	blt.n	8005876 <__swhatbuf_r+0x12>
 800589c:	9901      	ldr	r1, [sp, #4]
 800589e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058a6:	4259      	negs	r1, r3
 80058a8:	4159      	adcs	r1, r3
 80058aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ae:	e7eb      	b.n	8005888 <__swhatbuf_r+0x24>

080058b0 <__smakebuf_r>:
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b4:	079d      	lsls	r5, r3, #30
 80058b6:	4606      	mov	r6, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	d507      	bpl.n	80058cc <__smakebuf_r+0x1c>
 80058bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	2301      	movs	r3, #1
 80058c6:	6163      	str	r3, [r4, #20]
 80058c8:	b003      	add	sp, #12
 80058ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058cc:	ab01      	add	r3, sp, #4
 80058ce:	466a      	mov	r2, sp
 80058d0:	f7ff ffc8 	bl	8005864 <__swhatbuf_r>
 80058d4:	9f00      	ldr	r7, [sp, #0]
 80058d6:	4605      	mov	r5, r0
 80058d8:	4639      	mov	r1, r7
 80058da:	4630      	mov	r0, r6
 80058dc:	f7ff fa50 	bl	8004d80 <_malloc_r>
 80058e0:	b948      	cbnz	r0, 80058f6 <__smakebuf_r+0x46>
 80058e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e6:	059a      	lsls	r2, r3, #22
 80058e8:	d4ee      	bmi.n	80058c8 <__smakebuf_r+0x18>
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0302 	orr.w	r3, r3, #2
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	e7e2      	b.n	80058bc <__smakebuf_r+0xc>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	6020      	str	r0, [r4, #0]
 80058fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005906:	b15b      	cbz	r3, 8005920 <__smakebuf_r+0x70>
 8005908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f837 	bl	8005980 <_isatty_r>
 8005912:	b128      	cbz	r0, 8005920 <__smakebuf_r+0x70>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	431d      	orrs	r5, r3
 8005924:	81a5      	strh	r5, [r4, #12]
 8005926:	e7cf      	b.n	80058c8 <__smakebuf_r+0x18>

08005928 <memmove>:
 8005928:	4288      	cmp	r0, r1
 800592a:	b510      	push	{r4, lr}
 800592c:	eb01 0402 	add.w	r4, r1, r2
 8005930:	d902      	bls.n	8005938 <memmove+0x10>
 8005932:	4284      	cmp	r4, r0
 8005934:	4623      	mov	r3, r4
 8005936:	d807      	bhi.n	8005948 <memmove+0x20>
 8005938:	1e43      	subs	r3, r0, #1
 800593a:	42a1      	cmp	r1, r4
 800593c:	d008      	beq.n	8005950 <memmove+0x28>
 800593e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005946:	e7f8      	b.n	800593a <memmove+0x12>
 8005948:	4402      	add	r2, r0
 800594a:	4601      	mov	r1, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	d100      	bne.n	8005952 <memmove+0x2a>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800595a:	e7f7      	b.n	800594c <memmove+0x24>

0800595c <_fstat_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	@ (800597c <_fstat_r+0x20>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	f7fb fd3d 	bl	80013e8 <_fstat>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	d102      	bne.n	8005978 <_fstat_r+0x1c>
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	b103      	cbz	r3, 8005978 <_fstat_r+0x1c>
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	200003a0 	.word	0x200003a0

08005980 <_isatty_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d06      	ldr	r5, [pc, #24]	@ (800599c <_isatty_r+0x1c>)
 8005984:	2300      	movs	r3, #0
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fb fd3c 	bl	8001408 <_isatty>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_isatty_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_isatty_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	200003a0 	.word	0x200003a0

080059a0 <_sbrk_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d06      	ldr	r5, [pc, #24]	@ (80059bc <_sbrk_r+0x1c>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fb fd44 	bl	8001438 <_sbrk>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_sbrk_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_sbrk_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	200003a0 	.word	0x200003a0

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d6:	4291      	cmp	r1, r2
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <abort>:
 80059dc:	b508      	push	{r3, lr}
 80059de:	2006      	movs	r0, #6
 80059e0:	f000 f85a 	bl	8005a98 <raise>
 80059e4:	2001      	movs	r0, #1
 80059e6:	f7fb fcaf 	bl	8001348 <_exit>

080059ea <_realloc_r>:
 80059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	4680      	mov	r8, r0
 80059f0:	4615      	mov	r5, r2
 80059f2:	460c      	mov	r4, r1
 80059f4:	b921      	cbnz	r1, 8005a00 <_realloc_r+0x16>
 80059f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	4611      	mov	r1, r2
 80059fc:	f7ff b9c0 	b.w	8004d80 <_malloc_r>
 8005a00:	b92a      	cbnz	r2, 8005a0e <_realloc_r+0x24>
 8005a02:	f7ff f949 	bl	8004c98 <_free_r>
 8005a06:	2400      	movs	r4, #0
 8005a08:	4620      	mov	r0, r4
 8005a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0e:	f000 f85f 	bl	8005ad0 <_malloc_usable_size_r>
 8005a12:	4285      	cmp	r5, r0
 8005a14:	4606      	mov	r6, r0
 8005a16:	d802      	bhi.n	8005a1e <_realloc_r+0x34>
 8005a18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a1c:	d8f4      	bhi.n	8005a08 <_realloc_r+0x1e>
 8005a1e:	4629      	mov	r1, r5
 8005a20:	4640      	mov	r0, r8
 8005a22:	f7ff f9ad 	bl	8004d80 <_malloc_r>
 8005a26:	4607      	mov	r7, r0
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d0ec      	beq.n	8005a06 <_realloc_r+0x1c>
 8005a2c:	42b5      	cmp	r5, r6
 8005a2e:	462a      	mov	r2, r5
 8005a30:	4621      	mov	r1, r4
 8005a32:	bf28      	it	cs
 8005a34:	4632      	movcs	r2, r6
 8005a36:	f7ff ffc3 	bl	80059c0 <memcpy>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	f7ff f92b 	bl	8004c98 <_free_r>
 8005a42:	463c      	mov	r4, r7
 8005a44:	e7e0      	b.n	8005a08 <_realloc_r+0x1e>

08005a46 <_raise_r>:
 8005a46:	291f      	cmp	r1, #31
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	d904      	bls.n	8005a5a <_raise_r+0x14>
 8005a50:	2316      	movs	r3, #22
 8005a52:	6003      	str	r3, [r0, #0]
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a5c:	b112      	cbz	r2, 8005a64 <_raise_r+0x1e>
 8005a5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a62:	b94b      	cbnz	r3, 8005a78 <_raise_r+0x32>
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f831 	bl	8005acc <_getpid_r>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4601      	mov	r1, r0
 8005a6e:	4628      	mov	r0, r5
 8005a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a74:	f000 b818 	b.w	8005aa8 <_kill_r>
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d00a      	beq.n	8005a92 <_raise_r+0x4c>
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	d103      	bne.n	8005a88 <_raise_r+0x42>
 8005a80:	2316      	movs	r3, #22
 8005a82:	6003      	str	r3, [r0, #0]
 8005a84:	2001      	movs	r0, #1
 8005a86:	e7e7      	b.n	8005a58 <_raise_r+0x12>
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4798      	blx	r3
 8005a92:	2000      	movs	r0, #0
 8005a94:	e7e0      	b.n	8005a58 <_raise_r+0x12>
	...

08005a98 <raise>:
 8005a98:	4b02      	ldr	r3, [pc, #8]	@ (8005aa4 <raise+0xc>)
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f7ff bfd2 	b.w	8005a46 <_raise_r>
 8005aa2:	bf00      	nop
 8005aa4:	20000018 	.word	0x20000018

08005aa8 <_kill_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d07      	ldr	r5, [pc, #28]	@ (8005ac8 <_kill_r+0x20>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	f7fb fc37 	bl	8001328 <_kill>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	d102      	bne.n	8005ac4 <_kill_r+0x1c>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	b103      	cbz	r3, 8005ac4 <_kill_r+0x1c>
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200003a0 	.word	0x200003a0

08005acc <_getpid_r>:
 8005acc:	f7fb bc24 	b.w	8001318 <_getpid>

08005ad0 <_malloc_usable_size_r>:
 8005ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad4:	1f18      	subs	r0, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfbc      	itt	lt
 8005ada:	580b      	ldrlt	r3, [r1, r0]
 8005adc:	18c0      	addlt	r0, r0, r3
 8005ade:	4770      	bx	lr

08005ae0 <_init>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr

08005aec <_fini>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr
