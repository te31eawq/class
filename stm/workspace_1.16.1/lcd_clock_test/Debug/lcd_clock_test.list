
lcd_clock_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008184  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08008328  08008328  00009328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008844  08008844  0000a200  2**0
                  CONTENTS
  4 .ARM          00000008  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800884c  0800884c  0000a200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08008854  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000200  08008a54  0000a200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08008a54  0000a5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d34  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023dc  00000000  00000000  0001af64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d24  00000000  00000000  0001e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc9  00000000  00000000  0001f10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001368a  00000000  00000000  00036cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d05  00000000  00000000  0004a35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  000dd0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800830c 	.word	0x0800830c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800830c 	.word	0x0800830c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <LCD_writeCmdData>:
	LCD_sendByte(LCD_ENTRY_MODE_SET);
	LCD_sendByte(LCD_DISPLAY_ON);
	LCD_backLightOn();
}

void LCD_writeCmdData(uint8_t data) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000ed2:	f000 f857 	bl	8000f84 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 8000ed6:	f000 f875 	bl	8000fc4 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f83d 	bl	8000f5c <LCD_sendByte>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000ef4:	f000 f856 	bl	8000fa4 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 8000ef8:	f000 f864 	bl	8000fc4 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f82c 	bl	8000f5c <LCD_sendByte>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 8000f16:	f000 f865 	bl	8000fe4 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f001 f9e2 	bl	80022e4 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <LCD_sendData+0x4c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	f023 030f 	bic.w	r3, r3, #15
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <LCD_sendData+0x4c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000f40:	f000 f870 	bl	8001024 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 8000f44:	f000 f85e 	bl	8001004 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f001 f9cb 	bl	80022e4 <HAL_Delay>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000021c 	.word	0x2000021c

08000f5c <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffcf 	bl	8000f0c <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffc8 	bl	8000f0c <LCD_sendData>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <LCD_cmdMode+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <LCD_cmdMode+0x1c>)
 8000f94:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000f96:	f000 f845 	bl	8001024 <LCD_sendDataToInterface>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000021c 	.word	0x2000021c

08000fa4 <LCD_charMode>:

void LCD_charMode() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <LCD_charMode+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <LCD_charMode+0x1c>)
 8000fb4:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000fb6:	f000 f835 	bl	8001024 <LCD_sendDataToInterface>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000021c 	.word	0x2000021c

08000fc4 <LCD_writeMode>:

void LCD_writeMode() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <LCD_writeMode+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f023 0302 	bic.w	r3, r3, #2
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <LCD_writeMode+0x1c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000fd6:	f000 f825 	bl	8001024 <LCD_sendDataToInterface>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000021c 	.word	0x2000021c

08000fe4 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <LCD_enableHigh+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <LCD_enableHigh+0x1c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000ff6:	f000 f815 	bl	8001024 <LCD_sendDataToInterface>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000021c 	.word	0x2000021c

08001004 <LCD_enableLow>:

void LCD_enableLow() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <LCD_enableLow+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <LCD_enableLow+0x1c>)
 8001014:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001016:	f000 f805 	bl	8001024 <LCD_sendDataToInterface>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000021c 	.word	0x2000021c

08001024 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <LCD_sendDataToInterface+0x20>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <LCD_sendDataToInterface+0x24>)
 8001036:	214e      	movs	r1, #78	@ 0x4e
 8001038:	f001 fe30 	bl	8002c9c <HAL_I2C_Master_Transmit>
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000220 	.word	0x20000220
 8001048:	2000021c 	.word	0x2000021c

0800104c <LCD_writeString>:

void LCD_writeString(char *str) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e009      	b.n	800106e <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff41 	bl	8000eea <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ef      	bne.n	800105a <LCD_writeString+0xe>
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	019b      	lsls	r3, r3, #6
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4413      	add	r3, r2
 80010ae:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3b80      	subs	r3, #128	@ 0x80
 80010b4:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff05 	bl	8000ec8 <LCD_writeCmdData>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	603a      	str	r2, [r7, #0]
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	460b      	mov	r3, r1
 80010d4:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80010d6:	79ba      	ldrb	r2, [r7, #6]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffd1 	bl	8001084 <LCD_gotoXY>
	LCD_writeString(str);
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f7ff ffb2 	bl	800104c <LCD_writeString>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 f884 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f892 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 f9ca 	bl	8001494 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001100:	f000 f8f8 	bl	80012f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001104:	f000 f924 	bl	8001350 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001108:	f000 f99a 	bl	8001440 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 800110c:	f000 f96e 	bl	80013ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001110:	2201      	movs	r2, #1
 8001112:	4930      	ldr	r1, [pc, #192]	@ (80011d4 <main+0xe4>)
 8001114:	4830      	ldr	r0, [pc, #192]	@ (80011d8 <main+0xe8>)
 8001116:	f003 fa64 	bl	80045e2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 800111a:	2201      	movs	r2, #1
 800111c:	492f      	ldr	r1, [pc, #188]	@ (80011dc <main+0xec>)
 800111e:	4830      	ldr	r0, [pc, #192]	@ (80011e0 <main+0xf0>)
 8001120:	f003 fa5f 	bl	80045e2 <HAL_UART_Receive_IT>
  printf("start main - tim3()\r\n");
 8001124:	482f      	ldr	r0, [pc, #188]	@ (80011e4 <main+0xf4>)
 8001126:	f004 ff59 	bl	8005fdc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (rx2Flag) {
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <main+0xf8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <main+0x52>
			printf("recv2 : %s\r\n", rx2Data);
 8001134:	492d      	ldr	r1, [pc, #180]	@ (80011ec <main+0xfc>)
 8001136:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <main+0x100>)
 8001138:	f004 fee8 	bl	8005f0c <iprintf>
			rx2Flag = 0;
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <main+0xf8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart6, (uint8_t*)"GETTIME\n", strlen(buf), 0xFFFF);
		}
		if (btFlag) {
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <main+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <main+0x66>
			btFlag = 0;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <main+0x104>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 8001152:	f000 fa4f 	bl	80015f4 <bluetooth_Event>
		}



		if (keyNo != 0) {
 8001156:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <main+0x108>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <main+0x7a>
			printf("keyNo : %d\r\n", keyNo);
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <main+0x108>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4825      	ldr	r0, [pc, #148]	@ (80011fc <main+0x10c>)
 8001166:	f004 fed1 	bl	8005f0c <iprintf>

		}
		clock_set(&dateTime, &setalarmtime);
 800116a:	4925      	ldr	r1, [pc, #148]	@ (8001200 <main+0x110>)
 800116c:	4825      	ldr	r0, [pc, #148]	@ (8001204 <main+0x114>)
 800116e:	f000 fb0b 	bl	8001788 <clock_set>

		if (tim3Flag1half) {
 8001172:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <main+0x118>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <main+0x98>
			tim3Flag1half = 0;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <main+0x118>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001180:	2110      	movs	r1, #16
 8001182:	4822      	ldr	r0, [pc, #136]	@ (800120c <main+0x11c>)
 8001184:	f001 fc13 	bl	80029ae <HAL_GPIO_TogglePin>
//			printf("A %02d:%02d:%02d%s%s\r\n\r\n", setalarmtime.hour,
//					setalarmtime.min, setalarmtime.sec, setalamduring,
//					setalarmtime.apm);

		}
		if (tim3Flag1Sec) {
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <main+0x120>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <main+0xae>
			tim3Flag1Sec = 0;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <main+0x120>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
			LCD_TIMEDISPLAY(&dateTime, &setalarmtime);
 8001196:	491a      	ldr	r1, [pc, #104]	@ (8001200 <main+0x110>)
 8001198:	481a      	ldr	r0, [pc, #104]	@ (8001204 <main+0x114>)
 800119a:	f000 fbd1 	bl	8001940 <LCD_TIMEDISPLAY>

		}

		ALARM_LED(&dateTime, &setalarmtime);
 800119e:	4918      	ldr	r1, [pc, #96]	@ (8001200 <main+0x110>)
 80011a0:	4818      	ldr	r0, [pc, #96]	@ (8001204 <main+0x114>)
 80011a2:	f000 fc35 	bl	8001a10 <ALARM_LED>

	    if (updateTimeFlag)
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <main+0x124>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0bd      	beq.n	800112a <main+0x3a>
	    {
		  sprintf(message, "[GETTIME]\n");
 80011ae:	491a      	ldr	r1, [pc, #104]	@ (8001218 <main+0x128>)
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <main+0x12c>)
 80011b2:	f004 ff1b 	bl	8005fec <siprintf>
		  HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 0xFFFF);
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <main+0x12c>)
 80011b8:	f7ff f872 	bl	80002a0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c4:	4915      	ldr	r1, [pc, #84]	@ (800121c <main+0x12c>)
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <main+0xf0>)
 80011c8:	f003 f980 	bl	80044cc <HAL_UART_Transmit>
	      updateTimeFlag = 0;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <main+0x124>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
		if (rx2Flag) {
 80011d2:	e7aa      	b.n	800112a <main+0x3a>
 80011d4:	20000360 	.word	0x20000360
 80011d8:	200002c0 	.word	0x200002c0
 80011dc:	20000397 	.word	0x20000397
 80011e0:	20000308 	.word	0x20000308
 80011e4:	0800832c 	.word	0x0800832c
 80011e8:	20000361 	.word	0x20000361
 80011ec:	20000364 	.word	0x20000364
 80011f0:	08008344 	.word	0x08008344
 80011f4:	20000396 	.word	0x20000396
 80011f8:	200003fc 	.word	0x200003fc
 80011fc:	08008354 	.word	0x08008354
 8001200:	20000014 	.word	0x20000014
 8001204:	20000000 	.word	0x20000000
 8001208:	2000035c 	.word	0x2000035c
 800120c:	40020000 	.word	0x40020000
 8001210:	20000358 	.word	0x20000358
 8001214:	20000028 	.word	0x20000028
 8001218:	08008364 	.word	0x08008364
 800121c:	20000448 	.word	0x20000448

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	@ 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	@ 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f004 ffd4 	bl	80061dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a27      	ldr	r2, [pc, #156]	@ (80012ec <SystemClock_Config+0xcc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <SystemClock_Config+0xd0>)
 800126a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001294:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129a:	2304      	movs	r3, #4
 800129c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129e:	2304      	movs	r3, #4
 80012a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f852 	bl	8003350 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012b2:	f000 fd1f 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fab4 	bl	8003840 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012de:	f000 fd09 	bl	8001cf4 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	@ 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_I2C1_Init+0x54>)
 80012fa:	4a14      	ldr	r2, [pc, #80]	@ (800134c <MX_I2C1_Init+0x58>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001300:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001304:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x54>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001314:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_I2C1_Init+0x54>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_I2C1_Init+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_I2C1_Init+0x54>)
 8001334:	f001 fb6e 	bl	8002a14 <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800133e:	f000 fcd9 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000224 	.word	0x20000224
 800134c:	40005400 	.word	0x40005400

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <MX_TIM3_Init+0x98>)
 8001370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001374:	2253      	movs	r2, #83	@ 0x53
 8001376:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001380:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001384:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001392:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001394:	f002 fc74 	bl	8003c80 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 fca9 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x94>)
 80013b0:	f002 fda5 	bl	8003efe <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 fc9b 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_TIM3_Init+0x94>)
 80013cc:	f002 ffac 	bl	8004328 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 fc8d 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000278 	.word	0x20000278
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001424:	f003 f802 	bl	800442c <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 fc61 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200002c0 	.word	0x200002c0
 800143c:	40004400 	.word	0x40004400

08001440 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_USART6_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 800144c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_USART6_UART_Init+0x4c>)
 8001478:	f002 ffd8 	bl	800442c <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 fc37 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000308 	.word	0x20000308
 8001490:	40011400 	.word	0x40011400

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b4e      	ldr	r3, [pc, #312]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a46      	ldr	r2, [pc, #280]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b44      	ldr	r3, [pc, #272]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a3f      	ldr	r2, [pc, #252]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <MX_GPIO_Init+0x154>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <MX_GPIO_Init+0x154>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a38      	ldr	r2, [pc, #224]	@ (80015e8 <MX_GPIO_Init+0x154>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <MX_GPIO_Init+0x154>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin|LD2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2130      	movs	r1, #48	@ 0x30
 800151e:	4833      	ldr	r0, [pc, #204]	@ (80015ec <MX_GPIO_Init+0x158>)
 8001520:	f001 fa2c 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152a:	4831      	ldr	r0, [pc, #196]	@ (80015f0 <MX_GPIO_Init+0x15c>)
 800152c:	f001 fa26 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001536:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	482a      	ldr	r0, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0x15c>)
 8001548:	f001 f894 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800154c:	230f      	movs	r3, #15
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001550:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4823      	ldr	r0, [pc, #140]	@ (80015f0 <MX_GPIO_Init+0x15c>)
 8001562:	f001 f887 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_LED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|LD2_Pin;
 8001566:	2330      	movs	r3, #48	@ 0x30
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	481b      	ldr	r0, [pc, #108]	@ (80015ec <MX_GPIO_Init+0x158>)
 800157e:	f001 f879 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <MX_GPIO_Init+0x15c>)
 800159c:	f001 f86a 	bl	8002674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2006      	movs	r0, #6
 80015a6:	f000 ff9c 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015aa:	2006      	movs	r0, #6
 80015ac:	f000 ffb5 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2007      	movs	r0, #7
 80015b6:	f000 ff94 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 ffad 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2008      	movs	r0, #8
 80015c6:	f000 ff8c 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015ca:	2008      	movs	r0, #8
 80015cc:	f000 ffa5 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2009      	movs	r0, #9
 80015d6:	f000 ff84 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015da:	2009      	movs	r0, #9
 80015dc:	f000 ff9d 	bl	800251a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020800 	.word	0x40020800

080015f4 <bluetooth_Event>:

/* USER CODE BEGIN 4 */
void bluetooth_Event()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0a2      	sub	sp, #136	@ 0x88
 80015f8:	af00      	add	r7, sp, #0

  int i=0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001600:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
  char recvBuf[CMD_SIZE]={0};
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	@ 0x34
 8001616:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800161a:	222e      	movs	r2, #46	@ 0x2e
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fddc 	bl	80061dc <memset>
  char sendBuf[CMD_SIZE]={0};
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	222e      	movs	r2, #46	@ 0x2e
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fdd4 	bl	80061dc <memset>
  strcpy(recvBuf,btData);
 8001634:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001638:	4941      	ldr	r1, [pc, #260]	@ (8001740 <bluetooth_Event+0x14c>)
 800163a:	4618      	mov	r0, r3
 800163c:	f004 fea9 	bl	8006392 <strcpy>

  printf("btData : %s\r\n",btData);
 8001640:	493f      	ldr	r1, [pc, #252]	@ (8001740 <bluetooth_Event+0x14c>)
 8001642:	4840      	ldr	r0, [pc, #256]	@ (8001744 <bluetooth_Event+0x150>)
 8001644:	f004 fc62 	bl	8005f0c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001648:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800164c:	493e      	ldr	r1, [pc, #248]	@ (8001748 <bluetooth_Event+0x154>)
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fdcc 	bl	80061ec <strtok>
 8001654:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8001658:	e017      	b.n	800168a <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 800165a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	3388      	adds	r3, #136	@ 0x88
 8001662:	443b      	add	r3, r7
 8001664:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001668:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	3301      	adds	r3, #1
 8001672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800167a:	2b05      	cmp	r3, #5
 800167c:	dc0a      	bgt.n	8001694 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 800167e:	4932      	ldr	r1, [pc, #200]	@ (8001748 <bluetooth_Event+0x154>)
 8001680:	2000      	movs	r0, #0
 8001682:	f004 fdb3 	bl	80061ec <strtok>
 8001686:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 800168a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e3      	bne.n	800165a <bluetooth_Event+0x66>
 8001692:	e000      	b.n	8001696 <bluetooth_Event+0xa2>
      break;
 8001694:	bf00      	nop

  }
  if(!strcmp(pArray[0],"GETTIME")) {  //GETTIME
 8001696:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001698:	492c      	ldr	r1, [pc, #176]	@ (800174c <bluetooth_Event+0x158>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fda0 	bl	80001e0 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d134      	bne.n	8001710 <bluetooth_Event+0x11c>
	  printf("enter GETTIME strcmp\r\n");
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <bluetooth_Event+0x15c>)
 80016a8:	f004 fc98 	bl	8005fdc <puts>
    dateTime.hour = (pArray[1][0]-0x30) * 10 + pArray[1][1]-0x30 ;
 80016ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	461a      	mov	r2, r3
 80016be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016c0:	3301      	adds	r3, #1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	3b30      	subs	r3, #48	@ 0x30
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <bluetooth_Event+0x160>)
 80016ca:	6013      	str	r3, [r2, #0]
    dateTime.min =  (pArray[1][3]-0x30) * 10 + pArray[1][4]-0x30 ;
 80016cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016ce:	3303      	adds	r3, #3
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	461a      	mov	r2, r3
 80016e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016e2:	3304      	adds	r3, #4
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	3b30      	subs	r3, #48	@ 0x30
 80016ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <bluetooth_Event+0x160>)
 80016ec:	6053      	str	r3, [r2, #4]
    dateTime.sec =  (pArray[1][6]-0x30) * 10 + pArray[1][7]-0x30 ;
 80016ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016f0:	3306      	adds	r3, #6
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	461a      	mov	r2, r3
 8001702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001704:	3307      	adds	r3, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4413      	add	r3, r2
 800170a:	3b30      	subs	r3, #48	@ 0x30
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <bluetooth_Event+0x160>)
 800170e:	6093      	str	r3, [r2, #8]
  }



  if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 8001710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001712:	4911      	ldr	r1, [pc, #68]	@ (8001758 <bluetooth_Event+0x164>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd63 	bl	80001e0 <strcmp>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <bluetooth_Event+0x134>
  {
	  updateTimeFlag = 1;
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <bluetooth_Event+0x168>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
      return;
 8001726:	e007      	b.n	8001738 <bluetooth_Event+0x144>
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 8001728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <bluetooth_Event+0x16c>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strcmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 8001736:	bf00      	nop

	HAL_UART_Transmit(&huart6, (uint8_t*) sendBuf, strlen(sendBuf), 0xFFFF);

}
 8001738:	3788      	adds	r7, #136	@ 0x88
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000398 	.word	0x20000398
 8001744:	08008370 	.word	0x08008370
 8001748:	08008380 	.word	0x08008380
 800174c:	08008384 	.word	0x08008384
 8001750:	0800838c 	.word	0x0800838c
 8001754:	20000000 	.word	0x20000000
 8001758:	080083a4 	.word	0x080083a4
 800175c:	20000028 	.word	0x20000028
 8001760:	080083b0 	.word	0x080083b0

08001764 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART6 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800176c:	1d39      	adds	r1, r7, #4
 800176e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001772:	2201      	movs	r2, #1
 8001774:	4803      	ldr	r0, [pc, #12]	@ (8001784 <__io_putchar+0x20>)
 8001776:	f002 fea9 	bl	80044cc <HAL_UART_Transmit>

	return ch;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002c0 	.word	0x200002c0

08001788 <clock_set>:
void clock_set(ATIME *dateTime, ATIME *setalarmtime) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	if (keyNo == 4) {
 8001792:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <clock_set+0x180>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b04      	cmp	r3, #4
 8001798:	d114      	bne.n	80017c4 <clock_set+0x3c>
		modechange = (modechange + 1) % 3;
 800179a:	4b5c      	ldr	r3, [pc, #368]	@ (800190c <clock_set+0x184>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <clock_set+0x188>)
 80017a2:	fb83 3102 	smull	r3, r1, r3, r2
 80017a6:	17d3      	asrs	r3, r2, #31
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	440b      	add	r3, r1
 80017b0:	1ad1      	subs	r1, r2, r3
 80017b2:	b2ca      	uxtb	r2, r1
 80017b4:	4b55      	ldr	r3, [pc, #340]	@ (800190c <clock_set+0x184>)
 80017b6:	701a      	strb	r2, [r3, #0]
		printf("modechange : %d\r\n", modechange);
 80017b8:	4b54      	ldr	r3, [pc, #336]	@ (800190c <clock_set+0x184>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4855      	ldr	r0, [pc, #340]	@ (8001914 <clock_set+0x18c>)
 80017c0:	f004 fba4 	bl	8005f0c <iprintf>
	}
	if (modechange == 1) {
 80017c4:	4b51      	ldr	r3, [pc, #324]	@ (800190c <clock_set+0x184>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d146      	bne.n	800185a <clock_set+0xd2>

		if (keyNo == 1) {
 80017cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <clock_set+0x180>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11a      	bne.n	800180a <clock_set+0x82>
			setalarmtime->hour++;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
			printf("alarm hour++\r\n");
 80017de:	484e      	ldr	r0, [pc, #312]	@ (8001918 <clock_set+0x190>)
 80017e0:	f004 fbfc 	bl	8005fdc <puts>
			if (setalarmtime->hour >= 13) {
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	f340 8086 	ble.w	80018fa <clock_set+0x172>
				setalarmtime->apm = ((setalarmtime->apm == "AM") ? "PM" : "AM");
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	4a4a      	ldr	r2, [pc, #296]	@ (800191c <clock_set+0x194>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d101      	bne.n	80017fc <clock_set+0x74>
 80017f8:	4a49      	ldr	r2, [pc, #292]	@ (8001920 <clock_set+0x198>)
 80017fa:	e000      	b.n	80017fe <clock_set+0x76>
 80017fc:	4a47      	ldr	r2, [pc, #284]	@ (800191c <clock_set+0x194>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	611a      	str	r2, [r3, #16]
				setalarmtime->hour = 0;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e077      	b.n	80018fa <clock_set+0x172>
			}
		} else if (keyNo == 2) {
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <clock_set+0x180>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d10f      	bne.n	8001832 <clock_set+0xaa>
			setalarmtime->min++;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	605a      	str	r2, [r3, #4]
			printf("alarm min++\r\n");
 800181c:	4841      	ldr	r0, [pc, #260]	@ (8001924 <clock_set+0x19c>)
 800181e:	f004 fbdd 	bl	8005fdc <puts>
			if (setalarmtime->min >= 60) {
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b3b      	cmp	r3, #59	@ 0x3b
 8001828:	dd67      	ble.n	80018fa <clock_set+0x172>
				setalarmtime->min = 0;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	e063      	b.n	80018fa <clock_set+0x172>
			}
		} else if (keyNo == 3) {
 8001832:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <clock_set+0x180>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d15f      	bne.n	80018fa <clock_set+0x172>
			setalarmtime->sec++;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	609a      	str	r2, [r3, #8]
			printf("alarm sec++\r\n");
 8001844:	4838      	ldr	r0, [pc, #224]	@ (8001928 <clock_set+0x1a0>)
 8001846:	f004 fbc9 	bl	8005fdc <puts>
			if (setalarmtime->sec >= 60) {
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001850:	dd53      	ble.n	80018fa <clock_set+0x172>
				setalarmtime->sec = 0;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e04f      	b.n	80018fa <clock_set+0x172>
			}
		}
	} else if (modechange == 2) {
 800185a:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <clock_set+0x184>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d145      	bne.n	80018ee <clock_set+0x166>

		if (keyNo == 1) {
 8001862:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <clock_set+0x180>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d119      	bne.n	800189e <clock_set+0x116>
			dateTime->hour++;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	601a      	str	r2, [r3, #0]
			printf("date hour++\r\n");
 8001874:	482d      	ldr	r0, [pc, #180]	@ (800192c <clock_set+0x1a4>)
 8001876:	f004 fbb1 	bl	8005fdc <puts>
			if (dateTime->hour >= 13) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	dd3b      	ble.n	80018fa <clock_set+0x172>
				dateTime->apm = ((dateTime->apm == "AM") ? "PM" : "AM");
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	4a25      	ldr	r2, [pc, #148]	@ (800191c <clock_set+0x194>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <clock_set+0x108>
 800188c:	4a24      	ldr	r2, [pc, #144]	@ (8001920 <clock_set+0x198>)
 800188e:	e000      	b.n	8001892 <clock_set+0x10a>
 8001890:	4a22      	ldr	r2, [pc, #136]	@ (800191c <clock_set+0x194>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]
				dateTime->hour = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e02d      	b.n	80018fa <clock_set+0x172>
			}
		} else if (keyNo == 2) {
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <clock_set+0x180>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d10f      	bne.n	80018c6 <clock_set+0x13e>
			dateTime->min++;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
			if (dateTime->min >= 60) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80018b6:	dd20      	ble.n	80018fa <clock_set+0x172>
				printf("date min++\r\n");
 80018b8:	481d      	ldr	r0, [pc, #116]	@ (8001930 <clock_set+0x1a8>)
 80018ba:	f004 fb8f 	bl	8005fdc <puts>
				dateTime->min = 0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	e019      	b.n	80018fa <clock_set+0x172>
			}
		} else if (keyNo == 3) {
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <clock_set+0x180>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d115      	bne.n	80018fa <clock_set+0x172>
			dateTime->sec++;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
			if (dateTime->sec >= 60) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80018de:	dd0c      	ble.n	80018fa <clock_set+0x172>
				printf("date sec++\r\n");
 80018e0:	4814      	ldr	r0, [pc, #80]	@ (8001934 <clock_set+0x1ac>)
 80018e2:	f004 fb7b 	bl	8005fdc <puts>
				dateTime->sec = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e005      	b.n	80018fa <clock_set+0x172>
			}
		}
	} else {
		strcpy(setalamduring, " ");
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <clock_set+0x1b0>)
 80018f0:	2220      	movs	r2, #32
 80018f2:	801a      	strh	r2, [r3, #0]
		strcpy(settimeduring, " ");
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <clock_set+0x1b4>)
 80018f6:	2220      	movs	r2, #32
 80018f8:	801a      	strh	r2, [r3, #0]
	}
	keyNo = 0;
 80018fa:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <clock_set+0x180>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200003fc 	.word	0x200003fc
 800190c:	200003fd 	.word	0x200003fd
 8001910:	55555556 	.word	0x55555556
 8001914:	080083c0 	.word	0x080083c0
 8001918:	080083d4 	.word	0x080083d4
 800191c:	08008328 	.word	0x08008328
 8001920:	080083e4 	.word	0x080083e4
 8001924:	080083e8 	.word	0x080083e8
 8001928:	080083f8 	.word	0x080083f8
 800192c:	08008408 	.word	0x08008408
 8001930:	08008418 	.word	0x08008418
 8001934:	08008424 	.word	0x08008424
 8001938:	20000400 	.word	0x20000400
 800193c:	20000404 	.word	0x20000404

08001940 <LCD_TIMEDISPLAY>:
void LCD_TIMEDISPLAY(ATIME *dateTime, ATIME *setalarmtime) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (modechange == 2) {
 800194a:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <LCD_TIMEDISPLAY+0xb0>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d106      	bne.n	8001960 <LCD_TIMEDISPLAY+0x20>
		strcpy(setalamduring, " ");
 8001952:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <LCD_TIMEDISPLAY+0xb4>)
 8001954:	2220      	movs	r2, #32
 8001956:	801a      	strh	r2, [r3, #0]
		strcpy(settimeduring, "*");
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <LCD_TIMEDISPLAY+0xb8>)
 800195a:	222a      	movs	r2, #42	@ 0x2a
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	e010      	b.n	8001982 <LCD_TIMEDISPLAY+0x42>
	} else if (modechange == 1) {
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <LCD_TIMEDISPLAY+0xb0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <LCD_TIMEDISPLAY+0x36>
		strcpy(setalamduring, "*");
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <LCD_TIMEDISPLAY+0xb4>)
 800196a:	222a      	movs	r2, #42	@ 0x2a
 800196c:	801a      	strh	r2, [r3, #0]
		strcpy(settimeduring, " ");
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <LCD_TIMEDISPLAY+0xb8>)
 8001970:	2220      	movs	r2, #32
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e005      	b.n	8001982 <LCD_TIMEDISPLAY+0x42>
	} else {
		strcpy(setalamduring, " ");
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <LCD_TIMEDISPLAY+0xb4>)
 8001978:	2220      	movs	r2, #32
 800197a:	801a      	strh	r2, [r3, #0]
		strcpy(settimeduring, " ");
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <LCD_TIMEDISPLAY+0xb8>)
 800197e:	2220      	movs	r2, #32
 8001980:	801a      	strh	r2, [r3, #0]
	}
	sprintf(buff, "T %02d:%02d:%02d%s%s", dateTime->hour, dateTime->min,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6858      	ldr	r0, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6912      	ldr	r2, [r2, #16]
 8001992:	9202      	str	r2, [sp, #8]
 8001994:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <LCD_TIMEDISPLAY+0xb8>)
 8001996:	9201      	str	r2, [sp, #4]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4603      	mov	r3, r0
 800199c:	460a      	mov	r2, r1
 800199e:	4917      	ldr	r1, [pc, #92]	@ (80019fc <LCD_TIMEDISPLAY+0xbc>)
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <LCD_TIMEDISPLAY+0xc0>)
 80019a2:	f004 fb23 	bl	8005fec <siprintf>
			dateTime->sec, settimeduring, dateTime->apm);
	sprintf(setbuff, "A %02d:%02d:%02d%s%s", setalarmtime->hour,
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6858      	ldr	r0, [r3, #4]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6912      	ldr	r2, [r2, #16]
 80019b6:	9202      	str	r2, [sp, #8]
 80019b8:	4a0e      	ldr	r2, [pc, #56]	@ (80019f4 <LCD_TIMEDISPLAY+0xb4>)
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	4910      	ldr	r1, [pc, #64]	@ (8001a04 <LCD_TIMEDISPLAY+0xc4>)
 80019c4:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <LCD_TIMEDISPLAY+0xc8>)
 80019c6:	f004 fb11 	bl	8005fec <siprintf>
			setalarmtime->min, setalarmtime->sec, setalamduring,
			setalarmtime->apm);

	LCD_writeStringXY(0, 0, buff);
 80019ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LCD_TIMEDISPLAY+0xc0>)
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fb79 	bl	80010c6 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, setbuff);
 80019d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <LCD_TIMEDISPLAY+0xc8>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fb74 	bl	80010c6 <LCD_writeStringXY>
	presec = dateTime->sec;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LCD_TIMEDISPLAY+0xcc>)
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003fd 	.word	0x200003fd
 80019f4:	20000400 	.word	0x20000400
 80019f8:	20000404 	.word	0x20000404
 80019fc:	08008430 	.word	0x08008430
 8001a00:	20000408 	.word	0x20000408
 8001a04:	08008448 	.word	0x08008448
 8001a08:	20000428 	.word	0x20000428
 8001a0c:	20000350 	.word	0x20000350

08001a10 <ALARM_LED>:
void ALARM_LED(ATIME *dateTime, ATIME *setalarmtime) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	if (modechange == 0 && dateTime->hour == setalarmtime->hour
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <ALARM_LED+0x64>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11c      	bne.n	8001a5c <ALARM_LED+0x4c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d116      	bne.n	8001a5c <ALARM_LED+0x4c>
			&& dateTime->min == setalarmtime->min
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d110      	bne.n	8001a5c <ALARM_LED+0x4c>
			&& !strcmp(dateTime->apm, setalarmtime->apm)) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7fe fbcb 	bl	80001e0 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <ALARM_LED+0x4c>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001a50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a54:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <ALARM_LED+0x68>)
 8001a56:	f000 ffaa 	bl	80029ae <HAL_GPIO_TogglePin>
 8001a5a:	e006      	b.n	8001a6a <ALARM_LED+0x5a>
	} else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <ALARM_LED+0x68>)
 8001a64:	f000 ff8a 	bl	800297c <HAL_GPIO_WritePin>
	}
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200003fd 	.word	0x200003fd
 8001a78:	40020800 	.word	0x40020800

08001a7c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d822      	bhi.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x58>
 8001a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a94 <HAL_GPIO_EXTI_Callback+0x18>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001ab5 	.word	0x08001ab5
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001ad5 	.word	0x08001ad5
 8001aa0:	08001ac5 	.word	0x08001ac5
 8001aa4:	08001ad5 	.word	0x08001ad5
 8001aa8:	08001ad5 	.word	0x08001ad5
 8001aac:	08001ad5 	.word	0x08001ad5
 8001ab0:	08001acd 	.word	0x08001acd
	case BTN0_Pin:
		keyNo = 1;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
		break;
 8001aba:	e00b      	b.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x58>
	case BTN1_Pin:
		keyNo = 2;
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
		break;
 8001ac2:	e007      	b.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x58>
	case BTN2_Pin:
		keyNo = 3;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	701a      	strb	r2, [r3, #0]
		break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x58>
	case BTN3_Pin:
		keyNo = 4;
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	701a      	strb	r2, [r3, #0]
		break;
 8001ad2:	bf00      	nop
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200003fc 	.word	0x200003fc

08001ae4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2e      	ldr	r2, [pc, #184]	@ (8001bac <HAL_UART_RxCpltCallback+0xc8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d128      	bne.n	8001b48 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xd4>)
 8001b00:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001b02:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xd4>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b0d      	cmp	r3, #13
 8001b0e:	d005      	beq.n	8001b1c <HAL_UART_RxCpltCallback+0x38>
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <HAL_UART_RxCpltCallback+0xd8>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	2b0a      	cmp	r3, #10
 8001b1a:	d10b      	bne.n	8001b34 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a25      	ldr	r2, [pc, #148]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xd4>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xdc>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e004      	b.n	8001b3e <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001b3c:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	491c      	ldr	r1, [pc, #112]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001b42:	4820      	ldr	r0, [pc, #128]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xe0>)
 8001b44:	f002 fd4d 	bl	80045e2 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xe4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d127      	bne.n	8001ba2 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xec>)
 8001b58:	7811      	ldrb	r1, [r2, #0]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <HAL_UART_RxCpltCallback+0xd8>)
 8001b5c:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <HAL_UART_RxCpltCallback+0xd8>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	2b0a      	cmp	r3, #10
 8001b68:	d005      	beq.n	8001b76 <HAL_UART_RxCpltCallback+0x92>
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_UART_RxCpltCallback+0xd8>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	2b0d      	cmp	r3, #13
 8001b74:	d10b      	bne.n	8001b8e <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_UART_RxCpltCallback+0xd8>)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_UART_RxCpltCallback+0xf0>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e004      	b.n	8001b98 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_UART_RxCpltCallback+0xe8>)
 8001b96:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xec>)
 8001b9c:	480e      	ldr	r0, [pc, #56]	@ (8001bd8 <HAL_UART_RxCpltCallback+0xf4>)
 8001b9e:	f002 fd20 	bl	80045e2 <HAL_UART_Receive_IT>
    }
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	2000047c 	.word	0x2000047c
 8001bb4:	20000360 	.word	0x20000360
 8001bb8:	20000364 	.word	0x20000364
 8001bbc:	20000398 	.word	0x20000398
 8001bc0:	20000361 	.word	0x20000361
 8001bc4:	200002c0 	.word	0x200002c0
 8001bc8:	40011400 	.word	0x40011400
 8001bcc:	20000480 	.word	0x20000480
 8001bd0:	20000397 	.word	0x20000397
 8001bd4:	20000396 	.word	0x20000396
 8001bd8:	20000308 	.word	0x20000308

08001bdc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

	tim3Cnt++;
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a18      	ldr	r2, [pc, #96]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bec:	6013      	str	r3, [r2, #0]
	if (!(tim3Cnt % 100)) {
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	2164      	movs	r1, #100	@ 0x64
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x66>
		clock_calc(&dateTime);
 8001c06:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c08:	f000 f82c 	bl	8001c64 <clock_calc>
		if (!(tim3Cnt % 500)) {
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c12:	fba3 1302 	umull	r1, r3, r3, r2
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x66>
			tim3Flag1half = 1;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
			if (tim3Cnt >= 1000) {
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c34:	d305      	bcc.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x66>
				tim3Flag1Sec = 1;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
				tim3Cnt = 0;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000354 	.word	0x20000354
 8001c50:	51eb851f 	.word	0x51eb851f
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	2000035c 	.word	0x2000035c
 8001c60:	20000358 	.word	0x20000358

08001c64 <clock_calc>:

void clock_calc(ATIME *dateTime) {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	dateTime->msec++;	// increment second
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60da      	str	r2, [r3, #12]
	if (dateTime->msec >= 10) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	dd30      	ble.n	8001ce0 <clock_calc+0x7c>
		dateTime->msec = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
		dateTime->sec++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
		if (dateTime->sec >= 60)                   // if second = 60, second = 0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c94:	dd24      	ble.n	8001ce0 <clock_calc+0x7c>
				{
			dateTime->sec = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
			dateTime->min++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	605a      	str	r2, [r3, #4]

			if (dateTime->min >= 60)               // if minute = 60, minute = 0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b3b      	cmp	r3, #59	@ 0x3b
 8001cac:	dd18      	ble.n	8001ce0 <clock_calc+0x7c>
					{
				dateTime->min = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
				dateTime->hour++;                              // increment hour
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
				if (dateTime->hour >= 13) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	dd0c      	ble.n	8001ce0 <clock_calc+0x7c>
					dateTime->apm = ((dateTime->apm == "AM") ? "PM" : "AM");
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <clock_calc+0x88>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <clock_calc+0x70>
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <clock_calc+0x8c>)
 8001cd2:	e000      	b.n	8001cd6 <clock_calc+0x72>
 8001cd4:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <clock_calc+0x88>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
					dateTime->hour = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
//            updateTimeFlag = true;
				}
			}
		}
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	08008328 	.word	0x08008328
 8001cf0:	080083e4 	.word	0x080083e4

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <Error_Handler+0x8>

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d3e:	2007      	movs	r0, #7
 8001d40:	f000 fbc4 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_I2C_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12c      	bne.n	8001dcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da0:	2304      	movs	r3, #4
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_I2C_MspInit+0x8c>)
 8001dac:	f000 fc62 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001dba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_I2C_MspInit+0x88>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_TIM_Base_MspInit+0x48>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d115      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_TIM_Base_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <HAL_TIM_Base_MspInit+0x4c>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_TIM_Base_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	201d      	movs	r0, #29
 8001e14:	f000 fb65 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e18:	201d      	movs	r0, #29
 8001e1a:	f000 fb7e 	bl	800251a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a36      	ldr	r2, [pc, #216]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12c      	bne.n	8001eac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4822      	ldr	r0, [pc, #136]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ea6:	f000 fbe5 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eaa:	e038      	b.n	8001f1e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	@ (8001f34 <HAL_UART_MspInit+0x104>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d133      	bne.n	8001f1e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23c0      	movs	r3, #192	@ 0xc0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001efe:	2308      	movs	r3, #8
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	480b      	ldr	r0, [pc, #44]	@ (8001f38 <HAL_UART_MspInit+0x108>)
 8001f0a:	f000 fbb3 	bl	8002674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2047      	movs	r0, #71	@ 0x47
 8001f14:	f000 fae5 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f18:	2047      	movs	r0, #71	@ 0x47
 8001f1a:	f000 fafe 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	@ 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40020800 	.word	0x40020800

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <NMI_Handler+0x4>

08001f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <HardFault_Handler+0x4>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <MemManage_Handler+0x4>

08001f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f92:	f000 f987 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f000 fd20 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001fac:	2002      	movs	r0, #2
 8001fae:	f000 fd19 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001fba:	2004      	movs	r0, #4
 8001fbc:	f000 fd12 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001fc8:	2008      	movs	r0, #8
 8001fca:	f000 fd0b 	bl	80029e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <TIM3_IRQHandler+0x10>)
 8001fda:	f001 fea0 	bl	8003d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000278 	.word	0x20000278

08001fe8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <USART6_IRQHandler+0x10>)
 8001fee:	f002 fb1d 	bl	800462c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000308 	.word	0x20000308

08001ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return 1;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_kill>:

int _kill(int pid, int sig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002016:	f004 f98f 	bl	8006338 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2216      	movs	r2, #22
 800201e:	601a      	str	r2, [r3, #0]
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe7 	bl	800200c <_kill>
  while (1) {}    /* Make sure we hang here */
 800203e:	bf00      	nop
 8002040:	e7fd      	b.n	800203e <_exit+0x12>

08002042 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e00a      	b.n	800206a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002054:	f3af 8000 	nop.w
 8002058:	4601      	mov	r1, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	60ba      	str	r2, [r7, #8]
 8002060:	b2ca      	uxtb	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	dbf0      	blt.n	8002054 <_read+0x12>
  }

  return len;
 8002072:	687b      	ldr	r3, [r7, #4]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e009      	b.n	80020a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	60ba      	str	r2, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fb64 	bl	8001764 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbf1      	blt.n	800208e <_write+0x12>
  }
  return len;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_close>:

int _close(int file)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020dc:	605a      	str	r2, [r3, #4]
  return 0;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_isatty>:

int _isatty(int file)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f004 f8f4 	bl	8006338 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20020000 	.word	0x20020000
 800217c:	00000400 	.word	0x00000400
 8002180:	20000484 	.word	0x20000484
 8002184:	200005d8 	.word	0x200005d8

08002188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <SystemInit+0x20>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <SystemInit+0x20>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b0:	f7ff ffea 	bl	8002188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b4:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021b6:	490d      	ldr	r1, [pc, #52]	@ (80021ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021bc:	e002      	b.n	80021c4 <LoopCopyDataInit>

080021be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c2:	3304      	adds	r3, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c8:	d3f9      	bcc.n	80021be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021cc:	4c0a      	ldr	r4, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d0:	e001      	b.n	80021d6 <LoopFillZerobss>

080021d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d4:	3204      	adds	r2, #4

080021d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d8:	d3fb      	bcc.n	80021d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021da:	f004 f8b3 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7fe ff87 	bl	80010f0 <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80021f0:	08008854 	.word	0x08008854
  ldr r2, =_sbss
 80021f4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80021f8:	200005d8 	.word	0x200005d8

080021fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <HAL_Init+0x40>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800220e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_Init+0x40>)
 8002216:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <HAL_Init+0x40>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f94f 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fd64 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f967 	bl	8002536 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f92f 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000002c 	.word	0x2000002c
 800229c:	20000034 	.word	0x20000034
 80022a0:	20000030 	.word	0x20000030

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000034 	.word	0x20000034
 80022c8:	20000488 	.word	0x20000488

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000488 	.word	0x20000488

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000034 	.word	0x20000034

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff feb6 	bl	80022cc <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d008      	beq.n	8002580 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2280      	movs	r2, #128	@ 0x80
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e052      	b.n	8002626 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0216 	bic.w	r2, r2, #22
 800258e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_DMA_Abort+0x62>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0208 	bic.w	r2, r2, #8
 80025be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d0:	e013      	b.n	80025fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d2:	f7ff fe7b 	bl	80022cc <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d90c      	bls.n	80025fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2203      	movs	r2, #3
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e015      	b.n	8002626 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e4      	bne.n	80025d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	223f      	movs	r2, #63	@ 0x3f
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e00c      	b.n	8002666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2205      	movs	r2, #5
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e159      	b.n	8002944 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 8148 	bne.w	800293e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d005      	beq.n	80026c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d130      	bne.n	8002728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0201 	and.w	r2, r3, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b03      	cmp	r3, #3
 8002732:	d017      	beq.n	8002764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a2 	beq.w	800293e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b57      	ldr	r3, [pc, #348]	@ (800295c <HAL_GPIO_Init+0x2e8>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a56      	ldr	r2, [pc, #344]	@ (800295c <HAL_GPIO_Init+0x2e8>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b54      	ldr	r3, [pc, #336]	@ (800295c <HAL_GPIO_Init+0x2e8>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a52      	ldr	r2, [pc, #328]	@ (8002960 <HAL_GPIO_Init+0x2ec>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a49      	ldr	r2, [pc, #292]	@ (8002964 <HAL_GPIO_Init+0x2f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0x202>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a48      	ldr	r2, [pc, #288]	@ (8002968 <HAL_GPIO_Init+0x2f4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_GPIO_Init+0x1fe>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a47      	ldr	r2, [pc, #284]	@ (800296c <HAL_GPIO_Init+0x2f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_GPIO_Init+0x1fa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a46      	ldr	r2, [pc, #280]	@ (8002970 <HAL_GPIO_Init+0x2fc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <HAL_GPIO_Init+0x1f6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a45      	ldr	r2, [pc, #276]	@ (8002974 <HAL_GPIO_Init+0x300>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_GPIO_Init+0x1f2>
 8002862:	2304      	movs	r3, #4
 8002864:	e008      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002866:	2307      	movs	r3, #7
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x204>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x204>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002876:	2300      	movs	r3, #0
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	@ (8002960 <HAL_GPIO_Init+0x2ec>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_GPIO_Init+0x304>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002978 <HAL_GPIO_Init+0x304>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_GPIO_Init+0x304>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a24      	ldr	r2, [pc, #144]	@ (8002978 <HAL_GPIO_Init+0x304>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ea:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <HAL_GPIO_Init+0x304>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290e:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_GPIO_Init+0x304>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002938:	4a0f      	ldr	r2, [pc, #60]	@ (8002978 <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f aea2 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	@ 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
 8002988:	4613      	mov	r3, r2
 800298a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800298c:	787b      	ldrb	r3, [r7, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002998:	e003      	b.n	80029a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	041a      	lsls	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	619a      	str	r2, [r3, #24]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029c0:	887a      	ldrh	r2, [r7, #2]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	041a      	lsls	r2, r3, #16
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	400b      	ands	r3, r1
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	619a      	str	r2, [r3, #24]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029ee:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029fa:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f83a 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40013c00 	.word	0x40013c00

08002a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e12b      	b.n	8002c7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff f988 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	@ 0x24
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a78:	f001 f8da 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a81      	ldr	r2, [pc, #516]	@ (8002c88 <HAL_I2C_Init+0x274>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d807      	bhi.n	8002a98 <HAL_I2C_Init+0x84>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a80      	ldr	r2, [pc, #512]	@ (8002c8c <HAL_I2C_Init+0x278>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e006      	b.n	8002aa6 <HAL_I2C_Init+0x92>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c90 <HAL_I2C_Init+0x27c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0e7      	b.n	8002c7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a78      	ldr	r2, [pc, #480]	@ (8002c94 <HAL_I2C_Init+0x280>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a6a      	ldr	r2, [pc, #424]	@ (8002c88 <HAL_I2C_Init+0x274>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_I2C_Init+0xd4>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	e009      	b.n	8002afc <HAL_I2C_Init+0xe8>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	4a69      	ldr	r2, [pc, #420]	@ (8002c98 <HAL_I2C_Init+0x284>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	3301      	adds	r3, #1
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	495c      	ldr	r1, [pc, #368]	@ (8002c88 <HAL_I2C_Init+0x274>)
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	d819      	bhi.n	8002b50 <HAL_I2C_Init+0x13c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e59      	subs	r1, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2a:	1c59      	adds	r1, r3, #1
 8002b2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b30:	400b      	ands	r3, r1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_I2C_Init+0x138>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e59      	subs	r1, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	e051      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e04f      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <HAL_I2C_Init+0x168>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e012      	b.n	8002ba2 <HAL_I2C_Init+0x18e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Init+0x196>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e022      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_I2C_Init+0x1bc>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e58      	subs	r0, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	440b      	add	r3, r1
 8002bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bce:	e00f      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	6809      	ldr	r1, [r1, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6911      	ldr	r1, [r2, #16]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	000186a0 	.word	0x000186a0
 8002c8c:	001e847f 	.word	0x001e847f
 8002c90:	003d08ff 	.word	0x003d08ff
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	460b      	mov	r3, r1
 8002caa:	817b      	strh	r3, [r7, #10]
 8002cac:	4613      	mov	r3, r2
 8002cae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff fb0c 	bl	80022cc <HAL_GetTick>
 8002cb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 80e0 	bne.w	8002e84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4970      	ldr	r1, [pc, #448]	@ (8002e90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f964 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e0d3      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x50>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0cc      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d007      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2221      	movs	r2, #33	@ 0x21
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	893a      	ldrh	r2, [r7, #8]
 8002d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a50      	ldr	r2, [pc, #320]	@ (8002e94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d54:	8979      	ldrh	r1, [r7, #10]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f89c 	bl	8002e98 <I2C_MasterRequestWrite>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e08d      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d80:	e066      	b.n	8002e50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fa22 	bl	80031d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0x188>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6a39      	ldr	r1, [r7, #32]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fa19 	bl	8003260 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d107      	bne.n	8002e4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e01a      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d194      	bne.n	8002d82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	00100002 	.word	0x00100002
 8002e94:	ffff0000 	.word	0xffff0000

08002e98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d006      	beq.n	8002ec2 <I2C_MasterRequestWrite+0x2a>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d003      	beq.n	8002ec2 <I2C_MasterRequestWrite+0x2a>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec0:	d108      	bne.n	8002ed4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e00b      	b.n	8002eec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d107      	bne.n	8002eec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f84f 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f12:	d103      	bne.n	8002f1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e035      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f28:	d108      	bne.n	8002f3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	e01b      	b.n	8002f74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	11db      	asrs	r3, r3, #7
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0306 	and.w	r3, r3, #6
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f063 030f 	orn	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	490e      	ldr	r1, [pc, #56]	@ (8002f94 <I2C_MasterRequestWrite+0xfc>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f898 	bl	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e010      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4907      	ldr	r1, [pc, #28]	@ (8002f98 <I2C_MasterRequestWrite+0x100>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f888 	bl	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00010008 	.word	0x00010008
 8002f98:	00010002 	.word	0x00010002

08002f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fac:	e048      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d044      	beq.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7ff f989 	bl	80022cc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d139      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10d      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	e00c      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	429a      	cmp	r2, r3
 8003010:	d116      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e023      	b.n	8003088 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10d      	bne.n	8003066 <I2C_WaitOnFlagUntilTimeout+0xca>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	e00c      	b.n	8003080 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	429a      	cmp	r2, r3
 8003084:	d093      	beq.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800309e:	e071      	b.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ae:	d123      	bne.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e067      	b.n	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d041      	beq.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7ff f8e4 	bl	80022cc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d302      	bcc.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d136      	bne.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10c      	bne.n	800313a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e00b      	b.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e021      	b.n	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10c      	bne.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	43da      	mvns	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e00b      	b.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f47f af6d 	bne.w	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031dc:	e034      	b.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f886 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d028      	beq.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7ff f869 	bl	80022cc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11d      	bne.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d016      	beq.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b80      	cmp	r3, #128	@ 0x80
 8003254:	d1c3      	bne.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326c:	e034      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f83e 	bl	80032f0 <I2C_IsAcknowledgeFailed>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e034      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d028      	beq.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7ff f821 	bl	80022cc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11d      	bne.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d016      	beq.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d1c3      	bne.n	800326e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003306:	d11b      	bne.n	8003340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e267      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800336e:	4b88      	ldr	r3, [pc, #544]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b85      	ldr	r3, [pc, #532]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b82      	ldr	r3, [pc, #520]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b7e      	ldr	r3, [pc, #504]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e242      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b76      	ldr	r3, [pc, #472]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a75      	ldr	r2, [pc, #468]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b70      	ldr	r3, [pc, #448]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6d      	ldr	r3, [pc, #436]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6c      	ldr	r2, [pc, #432]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b69      	ldr	r3, [pc, #420]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b66      	ldr	r3, [pc, #408]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe ff60 	bl	80022cc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe ff5c 	bl	80022cc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e207      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b5b      	ldr	r3, [pc, #364]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe ff4c 	bl	80022cc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe ff48 	bl	80022cc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1f3      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b51      	ldr	r3, [pc, #324]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003466:	4b4a      	ldr	r3, [pc, #296]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b44      	ldr	r3, [pc, #272]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b41      	ldr	r3, [pc, #260]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1c7      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4937      	ldr	r1, [pc, #220]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b34      	ldr	r3, [pc, #208]	@ (8003594 <HAL_RCC_OscConfig+0x244>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe ff01 	bl	80022cc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fefd 	bl	80022cc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1a8      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b28      	ldr	r3, [pc, #160]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4925      	ldr	r1, [pc, #148]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <HAL_RCC_OscConfig+0x244>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fee0 	bl	80022cc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe fedc 	bl	80022cc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e187      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d036      	beq.n	80035a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_RCC_OscConfig+0x248>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe fec0 	bl	80022cc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003550:	f7fe febc 	bl	80022cc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e167      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_OscConfig+0x240>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e01b      	b.n	80035a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_RCC_OscConfig+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fe fea9 	bl	80022cc <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e00e      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe fea5 	bl	80022cc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d907      	bls.n	800359c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e150      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	4b88      	ldr	r3, [pc, #544]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ea      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8097 	beq.w	80036e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b81      	ldr	r3, [pc, #516]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	4a7c      	ldr	r2, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d6:	4b7a      	ldr	r3, [pc, #488]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b77      	ldr	r3, [pc, #476]	@ (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b74      	ldr	r3, [pc, #464]	@ (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	@ (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fe65 	bl	80022cc <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe fe61 	bl	80022cc <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e10c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b6a      	ldr	r3, [pc, #424]	@ (80037c4 <HAL_RCC_OscConfig+0x474>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x2ea>
 800362c:	4b64      	ldr	r3, [pc, #400]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	4a63      	ldr	r2, [pc, #396]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	@ 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x30c>
 8003642:	4b5f      	ldr	r3, [pc, #380]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a5e      	ldr	r2, [pc, #376]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800365c:	4b58      	ldr	r3, [pc, #352]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	4a57      	ldr	r2, [pc, #348]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	@ 0x70
 8003668:	4b55      	ldr	r3, [pc, #340]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a54      	ldr	r2, [pc, #336]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe fe26 	bl	80022cc <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe fe22 	bl	80022cc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0cb      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b49      	ldr	r3, [pc, #292]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x334>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe fe10 	bl	80022cc <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe fe0c 	bl	80022cc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	4a38      	ldr	r2, [pc, #224]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a1 	beq.w	8003830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fde0 	bl	80022cc <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe fddc 	bl	80022cc <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e087      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	491b      	ldr	r1, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x478>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe fdb5 	bl	80022cc <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fdb1 	bl	80022cc <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x416>
 8003784:	e054      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fd9e 	bl	80022cc <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fd9a 	bl	80022cc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e045      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e038      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCC_OscConfig+0x4ec>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d028      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d121      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fe fccc 	bl	80022cc <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe fcc8 	bl	80022cc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	@ (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fc2c 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08008460 	.word	0x08008460
 8003a04:	2000002c 	.word	0x2000002c
 8003a08:	20000030 	.word	0x20000030

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b094      	sub	sp, #80	@ 0x50
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b79      	ldr	r3, [pc, #484]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80e1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e0db      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b73      	ldr	r3, [pc, #460]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a44:	e0db      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b73      	ldr	r3, [pc, #460]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b6d      	ldr	r3, [pc, #436]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b6a      	ldr	r3, [pc, #424]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4621      	mov	r1, r4
 8003a98:	1a51      	subs	r1, r2, r1
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	018b      	lsls	r3, r1, #6
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aba:	4651      	mov	r1, sl
 8003abc:	018a      	lsls	r2, r1, #6
 8003abe:	4651      	mov	r1, sl
 8003ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	462b      	mov	r3, r5
 8003aec:	eb49 0303 	adc.w	r3, r9, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	024b      	lsls	r3, r1, #9
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b08:	4621      	mov	r1, r4
 8003b0a:	024a      	lsls	r2, r1, #9
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b1c:	f7fd f85c 	bl	8000bd8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b28:	e058      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	4611      	mov	r1, r2
 8003b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b80:	eb63 050b 	sbc.w	r5, r3, fp
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb45 0303 	adc.w	r3, r5, r3
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	f7fd f802 	bl	8000bd8 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3750      	adds	r7, #80	@ 0x50
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	007a1200 	.word	0x007a1200

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	2000002c 	.word	0x2000002c

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08008470 	.word	0x08008470

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08008470 	.word	0x08008470

08003c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e041      	b.n	8003d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe f89a 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fa0c 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01b      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0202 	mvn.w	r2, #2
 8003d52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f999 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
 8003d6e:	e005      	b.n	8003d7c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f98b 	bl	800408c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f99c 	bl	80040b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01b      	beq.n	8003dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0204 	mvn.w	r2, #4
 8003d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f973 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
 8003dba:	e005      	b.n	8003dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f965 	bl	800408c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f976 	bl	80040b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01b      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0208 	mvn.w	r2, #8
 8003dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2204      	movs	r2, #4
 8003df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f94d 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
 8003e06:	e005      	b.n	8003e14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f93f 	bl	800408c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f950 	bl	80040b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01b      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0210 	mvn.w	r2, #16
 8003e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f927 	bl	80040a0 <HAL_TIM_IC_CaptureCallback>
 8003e52:	e005      	b.n	8003e60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f919 	bl	800408c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f92a 	bl	80040b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00c      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f06f 0201 	mvn.w	r2, #1
 8003e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd fea9 	bl	8001bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00c      	beq.n	8003eae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fab5 	bl	8004418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00c      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8fb 	bl	80040c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00c      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0220 	mvn.w	r2, #32
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fa87 	bl	8004404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_ConfigClockSource+0x1c>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0b4      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x186>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f40:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f52:	d03e      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xd4>
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f58:	f200 8087 	bhi.w	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f60:	f000 8086 	beq.w	8004070 <HAL_TIM_ConfigClockSource+0x172>
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f68:	d87f      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f6a:	2b70      	cmp	r3, #112	@ 0x70
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0xa6>
 8003f6e:	2b70      	cmp	r3, #112	@ 0x70
 8003f70:	d87b      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f72:	2b60      	cmp	r3, #96	@ 0x60
 8003f74:	d050      	beq.n	8004018 <HAL_TIM_ConfigClockSource+0x11a>
 8003f76:	2b60      	cmp	r3, #96	@ 0x60
 8003f78:	d877      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f7a:	2b50      	cmp	r3, #80	@ 0x50
 8003f7c:	d03c      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0xfa>
 8003f7e:	2b50      	cmp	r3, #80	@ 0x50
 8003f80:	d873      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d058      	beq.n	8004038 <HAL_TIM_ConfigClockSource+0x13a>
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d86f      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f8a:	2b30      	cmp	r3, #48	@ 0x30
 8003f8c:	d064      	beq.n	8004058 <HAL_TIM_ConfigClockSource+0x15a>
 8003f8e:	2b30      	cmp	r3, #48	@ 0x30
 8003f90:	d86b      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d060      	beq.n	8004058 <HAL_TIM_ConfigClockSource+0x15a>
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d867      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d05c      	beq.n	8004058 <HAL_TIM_ConfigClockSource+0x15a>
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d05a      	beq.n	8004058 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa2:	e062      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb4:	f000 f998 	bl	80042e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
      break;
 8003fd0:	e04f      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fe2:	f000 f981 	bl	80042e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ff4:	609a      	str	r2, [r3, #8]
      break;
 8003ff6:	e03c      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004004:	461a      	mov	r2, r3
 8004006:	f000 f8f5 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2150      	movs	r1, #80	@ 0x50
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f94e 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8004016:	e02c      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004024:	461a      	mov	r2, r3
 8004026:	f000 f914 	bl	8004252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2160      	movs	r1, #96	@ 0x60
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f93e 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8004036:	e01c      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004044:	461a      	mov	r2, r3
 8004046:	f000 f8d5 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2140      	movs	r1, #64	@ 0x40
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f92e 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8004056:	e00c      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f000 f925 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8004068:	e003      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      break;
 800406e:	e000      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004070:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	@ (80041d8 <TIM_Base_SetConfig+0xfc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x38>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x38>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a37      	ldr	r2, [pc, #220]	@ (80041dc <TIM_Base_SetConfig+0x100>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x38>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a36      	ldr	r2, [pc, #216]	@ (80041e0 <TIM_Base_SetConfig+0x104>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x38>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a35      	ldr	r2, [pc, #212]	@ (80041e4 <TIM_Base_SetConfig+0x108>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2b      	ldr	r2, [pc, #172]	@ (80041d8 <TIM_Base_SetConfig+0xfc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01b      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004134:	d017      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <TIM_Base_SetConfig+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <TIM_Base_SetConfig+0x104>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <TIM_Base_SetConfig+0x108>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <TIM_Base_SetConfig+0x10c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <TIM_Base_SetConfig+0x110>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0x8a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a23      	ldr	r2, [pc, #140]	@ (80041f0 <TIM_Base_SetConfig+0x114>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <TIM_Base_SetConfig+0xfc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]
  }
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0210 	bic.w	r2, r3, #16
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f043 0307 	orr.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	021a      	lsls	r2, r3, #8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	431a      	orrs	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800433c:	2302      	movs	r3, #2
 800433e:	e050      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a16      	ldr	r2, [pc, #88]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a15      	ldr	r2, [pc, #84]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000

08004404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e042      	b.n	80044c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd fcec 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	@ 0x24
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800446e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fdbd 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d175      	bne.n	80045d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x2c>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e06e      	b.n	80045da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	@ 0x21
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fd fedf 	bl	80022cc <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	d108      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004540:	e02e      	b.n	80045a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	@ 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb1f 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e03a      	b.n	80045da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3302      	adds	r3, #2
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e007      	b.n	8004592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3301      	adds	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1cb      	bne.n	8004542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2140      	movs	r1, #64	@ 0x40
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 faeb 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d112      	bne.n	8004622 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_UART_Receive_IT+0x26>
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e00b      	b.n	8004624 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	461a      	mov	r2, r3
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fb12 	bl	8004c42 <UART_Start_Receive_IT>
 800461e:	4603      	mov	r3, r0
 8004620:	e000      	b.n	8004624 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0ba      	sub	sp, #232	@ 0xe8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800466a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_UART_IRQHandler+0x66>
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fbf2 	bl	8004e74 <UART_Receive_IT>
      return;
 8004690:	e25b      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80de 	beq.w	8004858 <HAL_UART_IRQHandler+0x22c>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80d1 	beq.w	8004858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_UART_IRQHandler+0xae>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_UART_IRQHandler+0xd2>
 80046e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0202 	orr.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_UART_IRQHandler+0xf6>
 800470a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_UART_IRQHandler+0x126>
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 81f2 	beq.w	8004b40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_UART_IRQHandler+0x14e>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb7d 	bl	8004e74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <HAL_UART_IRQHandler+0x17a>
 800479e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04f      	beq.n	8004846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa85 	bl	8004cb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b40      	cmp	r3, #64	@ 0x40
 80047b8:	d141      	bne.n	800483e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1d9      	bne.n	80047ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	4a7e      	ldr	r2, [pc, #504]	@ (8004a0c <HAL_UART_IRQHandler+0x3e0>)
 8004814:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd ff07 	bl	800262e <HAL_DMA_Abort_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00e      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f994 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00a      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f990 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e006      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f98c 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004852:	e175      	b.n	8004b40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	bf00      	nop
    return;
 8004856:	e173      	b.n	8004b40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 814f 	bne.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8148 	beq.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8141 	beq.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b40      	cmp	r3, #64	@ 0x40
 80048a0:	f040 80b6 	bne.w	8004a10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8145 	beq.w	8004b44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f080 813e 	bcs.w	8004b44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	f000 8088 	beq.w	80049ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800490a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800490e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004916:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1d9      	bne.n	80048de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800493a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800494e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004952:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004956:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e1      	bne.n	800492a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800498a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800498c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004990:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e3      	bne.n	80049ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd fdb0 	bl	800254e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8b7 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a0a:	e09b      	b.n	8004b44 <HAL_UART_IRQHandler+0x518>
 8004a0c:	08004d7d 	.word	0x08004d7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 808e 	beq.w	8004b48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8089 	beq.w	8004b48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e3      	bne.n	8004a36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ad8:	61fa      	str	r2, [r7, #28]
 8004ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e3      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f83d 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004afe:	e023      	b.n	8004b48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_UART_IRQHandler+0x4f4>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f943 	bl	8004da4 <UART_Transmit_IT>
    return;
 8004b1e:	e014      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <HAL_UART_IRQHandler+0x51e>
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f983 	bl	8004e44 <UART_EndTransmit_IT>
    return;
 8004b3e:	e004      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
    return;
 8004b40:	bf00      	nop
 8004b42:	e002      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b48:	bf00      	nop
  }
}
 8004b4a:	37e8      	adds	r7, #232	@ 0xe8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	e03b      	b.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d037      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fd fb8f 	bl	80022cc <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e03a      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d023      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b80      	cmp	r3, #128	@ 0x80
 8004bd6:	d020      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b40      	cmp	r3, #64	@ 0x40
 8004bdc:	d01d      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d116      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f857 	bl	8004cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00f      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d0b4      	beq.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2222      	movs	r2, #34	@ 0x22
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0220 	orr.w	r2, r2, #32
 8004ca6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b095      	sub	sp, #84	@ 0x54
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cde:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d119      	bne.n	8004d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d70:	bf00      	nop
 8004d72:	3754      	adds	r7, #84	@ 0x54
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fee4 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b21      	cmp	r3, #33	@ 0x21
 8004db6:	d13e      	bne.n	8004e36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc0:	d114      	bne.n	8004dec <UART_Transmit_IT+0x48>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d110      	bne.n	8004dec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]
 8004dea:	e008      	b.n	8004dfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	1c59      	adds	r1, r3, #1
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6211      	str	r1, [r2, #32]
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fe73 	bl	8004b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	@ 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b22      	cmp	r3, #34	@ 0x22
 8004e86:	f040 80ae 	bne.w	8004fe6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e92:	d117      	bne.n	8004ec4 <UART_Receive_IT+0x50>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec2:	e026      	b.n	8004f12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	d007      	beq.n	8004ee8 <UART_Receive_IT+0x74>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <UART_Receive_IT+0x82>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e008      	b.n	8004f08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d15d      	bne.n	8004fe2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0220 	bic.w	r2, r2, #32
 8004f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	613b      	str	r3, [r7, #16]
   return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fdd1 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
 8004fd6:	e002      	b.n	8004fde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc fd83 	bl	8001ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	@ 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	@ 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	@ (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	@ (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe fde2 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe fdc9 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	@ 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005134:	f7fb fd50 	bl	8000bd8 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	@ (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ca:	f7fb fd05 	bl	8000bd8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	@ 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	@ 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005286:	f7fb fca7 	bl	8000bd8 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	@ 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	@ 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e106      	b.n	80054c8 <UART_SetConfig+0x4d8>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005348:	f7fb fc46 	bl	8000bd8 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	@ (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053e6:	f7fb fbf7 	bl	8000bd8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	4b38      	ldr	r3, [pc, #224]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80053f2:	fba3 2301 	umull	r2, r3, r3, r1
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2264      	movs	r2, #100	@ 0x64
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	1acb      	subs	r3, r1, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	@ 0x32
 8005404:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <UART_SetConfig+0x4e4>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005410:	441c      	add	r4, r3
 8005412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005416:	2200      	movs	r2, #0
 8005418:	673b      	str	r3, [r7, #112]	@ 0x70
 800541a:	677a      	str	r2, [r7, #116]	@ 0x74
 800541c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	415b      	adcs	r3, r3
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005430:	4641      	mov	r1, r8
 8005432:	1851      	adds	r1, r2, r1
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	4649      	mov	r1, r9
 8005438:	414b      	adcs	r3, r1
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005448:	4659      	mov	r1, fp
 800544a:	00cb      	lsls	r3, r1, #3
 800544c:	4651      	mov	r1, sl
 800544e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005452:	4651      	mov	r1, sl
 8005454:	00ca      	lsls	r2, r1, #3
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	4603      	mov	r3, r0
 800545c:	4642      	mov	r2, r8
 800545e:	189b      	adds	r3, r3, r2
 8005460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005462:	464b      	mov	r3, r9
 8005464:	460a      	mov	r2, r1
 8005466:	eb42 0303 	adc.w	r3, r2, r3
 800546a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	663b      	str	r3, [r7, #96]	@ 0x60
 8005476:	667a      	str	r2, [r7, #100]	@ 0x64
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005484:	4649      	mov	r1, r9
 8005486:	008b      	lsls	r3, r1, #2
 8005488:	4641      	mov	r1, r8
 800548a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548e:	4641      	mov	r1, r8
 8005490:	008a      	lsls	r2, r1, #2
 8005492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005496:	f7fb fb9f 	bl	8000bd8 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	@ 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	3332      	adds	r3, #50	@ 0x32
 80054b2:	4a08      	ldr	r2, [pc, #32]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 020f 	and.w	r2, r3, #15
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4422      	add	r2, r4
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054ce:	46bd      	mov	sp, r7
 80054d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <__cvt>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	ec57 6b10 	vmov	r6, r7, d0
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4619      	mov	r1, r3
 80054e6:	463b      	mov	r3, r7
 80054e8:	bfbb      	ittet	lt
 80054ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80054ee:	461f      	movlt	r7, r3
 80054f0:	2300      	movge	r3, #0
 80054f2:	232d      	movlt	r3, #45	@ 0x2d
 80054f4:	700b      	strb	r3, [r1, #0]
 80054f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054fc:	4691      	mov	r9, r2
 80054fe:	f023 0820 	bic.w	r8, r3, #32
 8005502:	bfbc      	itt	lt
 8005504:	4632      	movlt	r2, r6
 8005506:	4616      	movlt	r6, r2
 8005508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800550c:	d005      	beq.n	800551a <__cvt+0x42>
 800550e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005512:	d100      	bne.n	8005516 <__cvt+0x3e>
 8005514:	3401      	adds	r4, #1
 8005516:	2102      	movs	r1, #2
 8005518:	e000      	b.n	800551c <__cvt+0x44>
 800551a:	2103      	movs	r1, #3
 800551c:	ab03      	add	r3, sp, #12
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	ab02      	add	r3, sp, #8
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	ec47 6b10 	vmov	d0, r6, r7
 8005528:	4653      	mov	r3, sl
 800552a:	4622      	mov	r2, r4
 800552c:	f000 ffe0 	bl	80064f0 <_dtoa_r>
 8005530:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005534:	4605      	mov	r5, r0
 8005536:	d119      	bne.n	800556c <__cvt+0x94>
 8005538:	f019 0f01 	tst.w	r9, #1
 800553c:	d00e      	beq.n	800555c <__cvt+0x84>
 800553e:	eb00 0904 	add.w	r9, r0, r4
 8005542:	2200      	movs	r2, #0
 8005544:	2300      	movs	r3, #0
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fb fad5 	bl	8000af8 <__aeabi_dcmpeq>
 800554e:	b108      	cbz	r0, 8005554 <__cvt+0x7c>
 8005550:	f8cd 900c 	str.w	r9, [sp, #12]
 8005554:	2230      	movs	r2, #48	@ 0x30
 8005556:	9b03      	ldr	r3, [sp, #12]
 8005558:	454b      	cmp	r3, r9
 800555a:	d31e      	bcc.n	800559a <__cvt+0xc2>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005560:	1b5b      	subs	r3, r3, r5
 8005562:	4628      	mov	r0, r5
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	b004      	add	sp, #16
 8005568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005570:	eb00 0904 	add.w	r9, r0, r4
 8005574:	d1e5      	bne.n	8005542 <__cvt+0x6a>
 8005576:	7803      	ldrb	r3, [r0, #0]
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d10a      	bne.n	8005592 <__cvt+0xba>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4630      	mov	r0, r6
 8005582:	4639      	mov	r1, r7
 8005584:	f7fb fab8 	bl	8000af8 <__aeabi_dcmpeq>
 8005588:	b918      	cbnz	r0, 8005592 <__cvt+0xba>
 800558a:	f1c4 0401 	rsb	r4, r4, #1
 800558e:	f8ca 4000 	str.w	r4, [sl]
 8005592:	f8da 3000 	ldr.w	r3, [sl]
 8005596:	4499      	add	r9, r3
 8005598:	e7d3      	b.n	8005542 <__cvt+0x6a>
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	9103      	str	r1, [sp, #12]
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e7d9      	b.n	8005556 <__cvt+0x7e>

080055a2 <__exponent>:
 80055a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a4:	2900      	cmp	r1, #0
 80055a6:	bfba      	itte	lt
 80055a8:	4249      	neglt	r1, r1
 80055aa:	232d      	movlt	r3, #45	@ 0x2d
 80055ac:	232b      	movge	r3, #43	@ 0x2b
 80055ae:	2909      	cmp	r1, #9
 80055b0:	7002      	strb	r2, [r0, #0]
 80055b2:	7043      	strb	r3, [r0, #1]
 80055b4:	dd29      	ble.n	800560a <__exponent+0x68>
 80055b6:	f10d 0307 	add.w	r3, sp, #7
 80055ba:	461d      	mov	r5, r3
 80055bc:	270a      	movs	r7, #10
 80055be:	461a      	mov	r2, r3
 80055c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80055c4:	fb07 1416 	mls	r4, r7, r6, r1
 80055c8:	3430      	adds	r4, #48	@ 0x30
 80055ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055ce:	460c      	mov	r4, r1
 80055d0:	2c63      	cmp	r4, #99	@ 0x63
 80055d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80055d6:	4631      	mov	r1, r6
 80055d8:	dcf1      	bgt.n	80055be <__exponent+0x1c>
 80055da:	3130      	adds	r1, #48	@ 0x30
 80055dc:	1e94      	subs	r4, r2, #2
 80055de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055e2:	1c41      	adds	r1, r0, #1
 80055e4:	4623      	mov	r3, r4
 80055e6:	42ab      	cmp	r3, r5
 80055e8:	d30a      	bcc.n	8005600 <__exponent+0x5e>
 80055ea:	f10d 0309 	add.w	r3, sp, #9
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	42ac      	cmp	r4, r5
 80055f2:	bf88      	it	hi
 80055f4:	2300      	movhi	r3, #0
 80055f6:	3302      	adds	r3, #2
 80055f8:	4403      	add	r3, r0
 80055fa:	1a18      	subs	r0, r3, r0
 80055fc:	b003      	add	sp, #12
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005604:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005608:	e7ed      	b.n	80055e6 <__exponent+0x44>
 800560a:	2330      	movs	r3, #48	@ 0x30
 800560c:	3130      	adds	r1, #48	@ 0x30
 800560e:	7083      	strb	r3, [r0, #2]
 8005610:	70c1      	strb	r1, [r0, #3]
 8005612:	1d03      	adds	r3, r0, #4
 8005614:	e7f1      	b.n	80055fa <__exponent+0x58>
	...

08005618 <_printf_float>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	b08d      	sub	sp, #52	@ 0x34
 800561e:	460c      	mov	r4, r1
 8005620:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005624:	4616      	mov	r6, r2
 8005626:	461f      	mov	r7, r3
 8005628:	4605      	mov	r5, r0
 800562a:	f000 fe3b 	bl	80062a4 <_localeconv_r>
 800562e:	6803      	ldr	r3, [r0, #0]
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa fe34 	bl	80002a0 <strlen>
 8005638:	2300      	movs	r3, #0
 800563a:	930a      	str	r3, [sp, #40]	@ 0x28
 800563c:	f8d8 3000 	ldr.w	r3, [r8]
 8005640:	9005      	str	r0, [sp, #20]
 8005642:	3307      	adds	r3, #7
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	f103 0208 	add.w	r2, r3, #8
 800564c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005650:	f8d4 b000 	ldr.w	fp, [r4]
 8005654:	f8c8 2000 	str.w	r2, [r8]
 8005658:	e9d3 8900 	ldrd	r8, r9, [r3]
 800565c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	f8cd 8018 	str.w	r8, [sp, #24]
 8005666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800566a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800566e:	4b9c      	ldr	r3, [pc, #624]	@ (80058e0 <_printf_float+0x2c8>)
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	f7fb fa72 	bl	8000b5c <__aeabi_dcmpun>
 8005678:	bb70      	cbnz	r0, 80056d8 <_printf_float+0xc0>
 800567a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800567e:	4b98      	ldr	r3, [pc, #608]	@ (80058e0 <_printf_float+0x2c8>)
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	f7fb fa4c 	bl	8000b20 <__aeabi_dcmple>
 8005688:	bb30      	cbnz	r0, 80056d8 <_printf_float+0xc0>
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fb fa3b 	bl	8000b0c <__aeabi_dcmplt>
 8005696:	b110      	cbz	r0, 800569e <_printf_float+0x86>
 8005698:	232d      	movs	r3, #45	@ 0x2d
 800569a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800569e:	4a91      	ldr	r2, [pc, #580]	@ (80058e4 <_printf_float+0x2cc>)
 80056a0:	4b91      	ldr	r3, [pc, #580]	@ (80058e8 <_printf_float+0x2d0>)
 80056a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80056a6:	bf94      	ite	ls
 80056a8:	4690      	movls	r8, r2
 80056aa:	4698      	movhi	r8, r3
 80056ac:	2303      	movs	r3, #3
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	f02b 0304 	bic.w	r3, fp, #4
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	f04f 0900 	mov.w	r9, #0
 80056ba:	9700      	str	r7, [sp, #0]
 80056bc:	4633      	mov	r3, r6
 80056be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80056c0:	4621      	mov	r1, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 f9d2 	bl	8005a6c <_printf_common>
 80056c8:	3001      	adds	r0, #1
 80056ca:	f040 808d 	bne.w	80057e8 <_printf_float+0x1d0>
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	b00d      	add	sp, #52	@ 0x34
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fb fa3c 	bl	8000b5c <__aeabi_dcmpun>
 80056e4:	b140      	cbz	r0, 80056f8 <_printf_float+0xe0>
 80056e6:	464b      	mov	r3, r9
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfbc      	itt	lt
 80056ec:	232d      	movlt	r3, #45	@ 0x2d
 80056ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056f2:	4a7e      	ldr	r2, [pc, #504]	@ (80058ec <_printf_float+0x2d4>)
 80056f4:	4b7e      	ldr	r3, [pc, #504]	@ (80058f0 <_printf_float+0x2d8>)
 80056f6:	e7d4      	b.n	80056a2 <_printf_float+0x8a>
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056fe:	9206      	str	r2, [sp, #24]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	d13b      	bne.n	800577c <_printf_float+0x164>
 8005704:	2306      	movs	r3, #6
 8005706:	6063      	str	r3, [r4, #4]
 8005708:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800570c:	2300      	movs	r3, #0
 800570e:	6022      	str	r2, [r4, #0]
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	ab0a      	add	r3, sp, #40	@ 0x28
 8005714:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005718:	ab09      	add	r3, sp, #36	@ 0x24
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	ec49 8b10 	vmov	d0, r8, r9
 8005722:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005726:	4628      	mov	r0, r5
 8005728:	f7ff fed6 	bl	80054d8 <__cvt>
 800572c:	9b06      	ldr	r3, [sp, #24]
 800572e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005730:	2b47      	cmp	r3, #71	@ 0x47
 8005732:	4680      	mov	r8, r0
 8005734:	d129      	bne.n	800578a <_printf_float+0x172>
 8005736:	1cc8      	adds	r0, r1, #3
 8005738:	db02      	blt.n	8005740 <_printf_float+0x128>
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	4299      	cmp	r1, r3
 800573e:	dd41      	ble.n	80057c4 <_printf_float+0x1ac>
 8005740:	f1aa 0a02 	sub.w	sl, sl, #2
 8005744:	fa5f fa8a 	uxtb.w	sl, sl
 8005748:	3901      	subs	r1, #1
 800574a:	4652      	mov	r2, sl
 800574c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005750:	9109      	str	r1, [sp, #36]	@ 0x24
 8005752:	f7ff ff26 	bl	80055a2 <__exponent>
 8005756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005758:	1813      	adds	r3, r2, r0
 800575a:	2a01      	cmp	r2, #1
 800575c:	4681      	mov	r9, r0
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	dc02      	bgt.n	8005768 <_printf_float+0x150>
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	07d2      	lsls	r2, r2, #31
 8005766:	d501      	bpl.n	800576c <_printf_float+0x154>
 8005768:	3301      	adds	r3, #1
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0a2      	beq.n	80056ba <_printf_float+0xa2>
 8005774:	232d      	movs	r3, #45	@ 0x2d
 8005776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800577a:	e79e      	b.n	80056ba <_printf_float+0xa2>
 800577c:	9a06      	ldr	r2, [sp, #24]
 800577e:	2a47      	cmp	r2, #71	@ 0x47
 8005780:	d1c2      	bne.n	8005708 <_printf_float+0xf0>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1c0      	bne.n	8005708 <_printf_float+0xf0>
 8005786:	2301      	movs	r3, #1
 8005788:	e7bd      	b.n	8005706 <_printf_float+0xee>
 800578a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800578e:	d9db      	bls.n	8005748 <_printf_float+0x130>
 8005790:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005794:	d118      	bne.n	80057c8 <_printf_float+0x1b0>
 8005796:	2900      	cmp	r1, #0
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	dd0b      	ble.n	80057b4 <_printf_float+0x19c>
 800579c:	6121      	str	r1, [r4, #16]
 800579e:	b913      	cbnz	r3, 80057a6 <_printf_float+0x18e>
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	07d0      	lsls	r0, r2, #31
 80057a4:	d502      	bpl.n	80057ac <_printf_float+0x194>
 80057a6:	3301      	adds	r3, #1
 80057a8:	440b      	add	r3, r1
 80057aa:	6123      	str	r3, [r4, #16]
 80057ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	e7db      	b.n	800576c <_printf_float+0x154>
 80057b4:	b913      	cbnz	r3, 80057bc <_printf_float+0x1a4>
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	07d2      	lsls	r2, r2, #31
 80057ba:	d501      	bpl.n	80057c0 <_printf_float+0x1a8>
 80057bc:	3302      	adds	r3, #2
 80057be:	e7f4      	b.n	80057aa <_printf_float+0x192>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e7f2      	b.n	80057aa <_printf_float+0x192>
 80057c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057ca:	4299      	cmp	r1, r3
 80057cc:	db05      	blt.n	80057da <_printf_float+0x1c2>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6121      	str	r1, [r4, #16]
 80057d2:	07d8      	lsls	r0, r3, #31
 80057d4:	d5ea      	bpl.n	80057ac <_printf_float+0x194>
 80057d6:	1c4b      	adds	r3, r1, #1
 80057d8:	e7e7      	b.n	80057aa <_printf_float+0x192>
 80057da:	2900      	cmp	r1, #0
 80057dc:	bfd4      	ite	le
 80057de:	f1c1 0202 	rsble	r2, r1, #2
 80057e2:	2201      	movgt	r2, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	e7e0      	b.n	80057aa <_printf_float+0x192>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	055a      	lsls	r2, r3, #21
 80057ec:	d407      	bmi.n	80057fe <_printf_float+0x1e6>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	4642      	mov	r2, r8
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	d12b      	bne.n	8005854 <_printf_float+0x23c>
 80057fc:	e767      	b.n	80056ce <_printf_float+0xb6>
 80057fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005802:	f240 80dd 	bls.w	80059c0 <_printf_float+0x3a8>
 8005806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800580a:	2200      	movs	r2, #0
 800580c:	2300      	movs	r3, #0
 800580e:	f7fb f973 	bl	8000af8 <__aeabi_dcmpeq>
 8005812:	2800      	cmp	r0, #0
 8005814:	d033      	beq.n	800587e <_printf_float+0x266>
 8005816:	4a37      	ldr	r2, [pc, #220]	@ (80058f4 <_printf_float+0x2dc>)
 8005818:	2301      	movs	r3, #1
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f af54 	beq.w	80056ce <_printf_float+0xb6>
 8005826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800582a:	4543      	cmp	r3, r8
 800582c:	db02      	blt.n	8005834 <_printf_float+0x21c>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	07d8      	lsls	r0, r3, #31
 8005832:	d50f      	bpl.n	8005854 <_printf_float+0x23c>
 8005834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af45 	beq.w	80056ce <_printf_float+0xb6>
 8005844:	f04f 0900 	mov.w	r9, #0
 8005848:	f108 38ff 	add.w	r8, r8, #4294967295
 800584c:	f104 0a1a 	add.w	sl, r4, #26
 8005850:	45c8      	cmp	r8, r9
 8005852:	dc09      	bgt.n	8005868 <_printf_float+0x250>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	079b      	lsls	r3, r3, #30
 8005858:	f100 8103 	bmi.w	8005a62 <_printf_float+0x44a>
 800585c:	68e0      	ldr	r0, [r4, #12]
 800585e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005860:	4298      	cmp	r0, r3
 8005862:	bfb8      	it	lt
 8005864:	4618      	movlt	r0, r3
 8005866:	e734      	b.n	80056d2 <_printf_float+0xba>
 8005868:	2301      	movs	r3, #1
 800586a:	4652      	mov	r2, sl
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f af2b 	beq.w	80056ce <_printf_float+0xb6>
 8005878:	f109 0901 	add.w	r9, r9, #1
 800587c:	e7e8      	b.n	8005850 <_printf_float+0x238>
 800587e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc39      	bgt.n	80058f8 <_printf_float+0x2e0>
 8005884:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <_printf_float+0x2dc>)
 8005886:	2301      	movs	r3, #1
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af1d 	beq.w	80056ce <_printf_float+0xb6>
 8005894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005898:	ea59 0303 	orrs.w	r3, r9, r3
 800589c:	d102      	bne.n	80058a4 <_printf_float+0x28c>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	07d9      	lsls	r1, r3, #31
 80058a2:	d5d7      	bpl.n	8005854 <_printf_float+0x23c>
 80058a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f af0d 	beq.w	80056ce <_printf_float+0xb6>
 80058b4:	f04f 0a00 	mov.w	sl, #0
 80058b8:	f104 0b1a 	add.w	fp, r4, #26
 80058bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058be:	425b      	negs	r3, r3
 80058c0:	4553      	cmp	r3, sl
 80058c2:	dc01      	bgt.n	80058c8 <_printf_float+0x2b0>
 80058c4:	464b      	mov	r3, r9
 80058c6:	e793      	b.n	80057f0 <_printf_float+0x1d8>
 80058c8:	2301      	movs	r3, #1
 80058ca:	465a      	mov	r2, fp
 80058cc:	4631      	mov	r1, r6
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b8      	blx	r7
 80058d2:	3001      	adds	r0, #1
 80058d4:	f43f aefb 	beq.w	80056ce <_printf_float+0xb6>
 80058d8:	f10a 0a01 	add.w	sl, sl, #1
 80058dc:	e7ee      	b.n	80058bc <_printf_float+0x2a4>
 80058de:	bf00      	nop
 80058e0:	7fefffff 	.word	0x7fefffff
 80058e4:	08008478 	.word	0x08008478
 80058e8:	0800847c 	.word	0x0800847c
 80058ec:	08008480 	.word	0x08008480
 80058f0:	08008484 	.word	0x08008484
 80058f4:	08008488 	.word	0x08008488
 80058f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058fe:	4553      	cmp	r3, sl
 8005900:	bfa8      	it	ge
 8005902:	4653      	movge	r3, sl
 8005904:	2b00      	cmp	r3, #0
 8005906:	4699      	mov	r9, r3
 8005908:	dc36      	bgt.n	8005978 <_printf_float+0x360>
 800590a:	f04f 0b00 	mov.w	fp, #0
 800590e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005912:	f104 021a 	add.w	r2, r4, #26
 8005916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005918:	9306      	str	r3, [sp, #24]
 800591a:	eba3 0309 	sub.w	r3, r3, r9
 800591e:	455b      	cmp	r3, fp
 8005920:	dc31      	bgt.n	8005986 <_printf_float+0x36e>
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	459a      	cmp	sl, r3
 8005926:	dc3a      	bgt.n	800599e <_printf_float+0x386>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	07da      	lsls	r2, r3, #31
 800592c:	d437      	bmi.n	800599e <_printf_float+0x386>
 800592e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005930:	ebaa 0903 	sub.w	r9, sl, r3
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	ebaa 0303 	sub.w	r3, sl, r3
 800593a:	4599      	cmp	r9, r3
 800593c:	bfa8      	it	ge
 800593e:	4699      	movge	r9, r3
 8005940:	f1b9 0f00 	cmp.w	r9, #0
 8005944:	dc33      	bgt.n	80059ae <_printf_float+0x396>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800594e:	f104 0b1a 	add.w	fp, r4, #26
 8005952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005954:	ebaa 0303 	sub.w	r3, sl, r3
 8005958:	eba3 0309 	sub.w	r3, r3, r9
 800595c:	4543      	cmp	r3, r8
 800595e:	f77f af79 	ble.w	8005854 <_printf_float+0x23c>
 8005962:	2301      	movs	r3, #1
 8005964:	465a      	mov	r2, fp
 8005966:	4631      	mov	r1, r6
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	f43f aeae 	beq.w	80056ce <_printf_float+0xb6>
 8005972:	f108 0801 	add.w	r8, r8, #1
 8005976:	e7ec      	b.n	8005952 <_printf_float+0x33a>
 8005978:	4642      	mov	r2, r8
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	d1c2      	bne.n	800590a <_printf_float+0x2f2>
 8005984:	e6a3      	b.n	80056ce <_printf_float+0xb6>
 8005986:	2301      	movs	r3, #1
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	9206      	str	r2, [sp, #24]
 800598e:	47b8      	blx	r7
 8005990:	3001      	adds	r0, #1
 8005992:	f43f ae9c 	beq.w	80056ce <_printf_float+0xb6>
 8005996:	9a06      	ldr	r2, [sp, #24]
 8005998:	f10b 0b01 	add.w	fp, fp, #1
 800599c:	e7bb      	b.n	8005916 <_printf_float+0x2fe>
 800599e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	d1c0      	bne.n	800592e <_printf_float+0x316>
 80059ac:	e68f      	b.n	80056ce <_printf_float+0xb6>
 80059ae:	9a06      	ldr	r2, [sp, #24]
 80059b0:	464b      	mov	r3, r9
 80059b2:	4442      	add	r2, r8
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	d1c3      	bne.n	8005946 <_printf_float+0x32e>
 80059be:	e686      	b.n	80056ce <_printf_float+0xb6>
 80059c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059c4:	f1ba 0f01 	cmp.w	sl, #1
 80059c8:	dc01      	bgt.n	80059ce <_printf_float+0x3b6>
 80059ca:	07db      	lsls	r3, r3, #31
 80059cc:	d536      	bpl.n	8005a3c <_printf_float+0x424>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4642      	mov	r2, r8
 80059d2:	4631      	mov	r1, r6
 80059d4:	4628      	mov	r0, r5
 80059d6:	47b8      	blx	r7
 80059d8:	3001      	adds	r0, #1
 80059da:	f43f ae78 	beq.w	80056ce <_printf_float+0xb6>
 80059de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	f43f ae70 	beq.w	80056ce <_printf_float+0xb6>
 80059ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059fa:	f7fb f87d 	bl	8000af8 <__aeabi_dcmpeq>
 80059fe:	b9c0      	cbnz	r0, 8005a32 <_printf_float+0x41a>
 8005a00:	4653      	mov	r3, sl
 8005a02:	f108 0201 	add.w	r2, r8, #1
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d10c      	bne.n	8005a2a <_printf_float+0x412>
 8005a10:	e65d      	b.n	80056ce <_printf_float+0xb6>
 8005a12:	2301      	movs	r3, #1
 8005a14:	465a      	mov	r2, fp
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f ae56 	beq.w	80056ce <_printf_float+0xb6>
 8005a22:	f108 0801 	add.w	r8, r8, #1
 8005a26:	45d0      	cmp	r8, sl
 8005a28:	dbf3      	blt.n	8005a12 <_printf_float+0x3fa>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a30:	e6df      	b.n	80057f2 <_printf_float+0x1da>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 0b1a 	add.w	fp, r4, #26
 8005a3a:	e7f4      	b.n	8005a26 <_printf_float+0x40e>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4642      	mov	r2, r8
 8005a40:	e7e1      	b.n	8005a06 <_printf_float+0x3ee>
 8005a42:	2301      	movs	r3, #1
 8005a44:	464a      	mov	r2, r9
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f ae3e 	beq.w	80056ce <_printf_float+0xb6>
 8005a52:	f108 0801 	add.w	r8, r8, #1
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a5a:	1a5b      	subs	r3, r3, r1
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	dcf0      	bgt.n	8005a42 <_printf_float+0x42a>
 8005a60:	e6fc      	b.n	800585c <_printf_float+0x244>
 8005a62:	f04f 0800 	mov.w	r8, #0
 8005a66:	f104 0919 	add.w	r9, r4, #25
 8005a6a:	e7f4      	b.n	8005a56 <_printf_float+0x43e>

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4616      	mov	r6, r2
 8005a72:	4698      	mov	r8, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfb8      	it	lt
 8005a80:	4613      	movlt	r3, r2
 8005a82:	6033      	str	r3, [r6, #0]
 8005a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a88:	4607      	mov	r7, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	b10a      	cbz	r2, 8005a92 <_printf_common+0x26>
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	0699      	lsls	r1, r3, #26
 8005a96:	bf42      	ittt	mi
 8005a98:	6833      	ldrmi	r3, [r6, #0]
 8005a9a:	3302      	addmi	r3, #2
 8005a9c:	6033      	strmi	r3, [r6, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	f015 0506 	ands.w	r5, r5, #6
 8005aa4:	d106      	bne.n	8005ab4 <_printf_common+0x48>
 8005aa6:	f104 0a19 	add.w	sl, r4, #25
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	6832      	ldr	r2, [r6, #0]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc26      	bgt.n	8005b02 <_printf_common+0x96>
 8005ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	3b00      	subs	r3, #0
 8005abc:	bf18      	it	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	0692      	lsls	r2, r2, #26
 8005ac2:	d42b      	bmi.n	8005b1c <_printf_common+0xb0>
 8005ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ac8:	4641      	mov	r1, r8
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c8      	blx	r9
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d01e      	beq.n	8005b10 <_printf_common+0xa4>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	f003 0306 	and.w	r3, r3, #6
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	bf02      	ittt	eq
 8005ade:	68e5      	ldreq	r5, [r4, #12]
 8005ae0:	6833      	ldreq	r3, [r6, #0]
 8005ae2:	1aed      	subeq	r5, r5, r3
 8005ae4:	68a3      	ldr	r3, [r4, #8]
 8005ae6:	bf0c      	ite	eq
 8005ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aec:	2500      	movne	r5, #0
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bfc4      	itt	gt
 8005af2:	1a9b      	subgt	r3, r3, r2
 8005af4:	18ed      	addgt	r5, r5, r3
 8005af6:	2600      	movs	r6, #0
 8005af8:	341a      	adds	r4, #26
 8005afa:	42b5      	cmp	r5, r6
 8005afc:	d11a      	bne.n	8005b34 <_printf_common+0xc8>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e008      	b.n	8005b14 <_printf_common+0xa8>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4641      	mov	r1, r8
 8005b08:	4638      	mov	r0, r7
 8005b0a:	47c8      	blx	r9
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d103      	bne.n	8005b18 <_printf_common+0xac>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	3501      	adds	r5, #1
 8005b1a:	e7c6      	b.n	8005aaa <_printf_common+0x3e>
 8005b1c:	18e1      	adds	r1, r4, r3
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	2030      	movs	r0, #48	@ 0x30
 8005b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b26:	4422      	add	r2, r4
 8005b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b30:	3302      	adds	r3, #2
 8005b32:	e7c7      	b.n	8005ac4 <_printf_common+0x58>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4622      	mov	r2, r4
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d0e6      	beq.n	8005b10 <_printf_common+0xa4>
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7d9      	b.n	8005afa <_printf_common+0x8e>
	...

08005b48 <_printf_i>:
 8005b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	7e0f      	ldrb	r7, [r1, #24]
 8005b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b50:	2f78      	cmp	r7, #120	@ 0x78
 8005b52:	4691      	mov	r9, r2
 8005b54:	4680      	mov	r8, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	469a      	mov	sl, r3
 8005b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b5e:	d807      	bhi.n	8005b70 <_printf_i+0x28>
 8005b60:	2f62      	cmp	r7, #98	@ 0x62
 8005b62:	d80a      	bhi.n	8005b7a <_printf_i+0x32>
 8005b64:	2f00      	cmp	r7, #0
 8005b66:	f000 80d2 	beq.w	8005d0e <_printf_i+0x1c6>
 8005b6a:	2f58      	cmp	r7, #88	@ 0x58
 8005b6c:	f000 80b9 	beq.w	8005ce2 <_printf_i+0x19a>
 8005b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b78:	e03a      	b.n	8005bf0 <_printf_i+0xa8>
 8005b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b7e:	2b15      	cmp	r3, #21
 8005b80:	d8f6      	bhi.n	8005b70 <_printf_i+0x28>
 8005b82:	a101      	add	r1, pc, #4	@ (adr r1, 8005b88 <_printf_i+0x40>)
 8005b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b88:	08005be1 	.word	0x08005be1
 8005b8c:	08005bf5 	.word	0x08005bf5
 8005b90:	08005b71 	.word	0x08005b71
 8005b94:	08005b71 	.word	0x08005b71
 8005b98:	08005b71 	.word	0x08005b71
 8005b9c:	08005b71 	.word	0x08005b71
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005b71 	.word	0x08005b71
 8005ba8:	08005b71 	.word	0x08005b71
 8005bac:	08005b71 	.word	0x08005b71
 8005bb0:	08005b71 	.word	0x08005b71
 8005bb4:	08005cf5 	.word	0x08005cf5
 8005bb8:	08005c1f 	.word	0x08005c1f
 8005bbc:	08005caf 	.word	0x08005caf
 8005bc0:	08005b71 	.word	0x08005b71
 8005bc4:	08005b71 	.word	0x08005b71
 8005bc8:	08005d17 	.word	0x08005d17
 8005bcc:	08005b71 	.word	0x08005b71
 8005bd0:	08005c1f 	.word	0x08005c1f
 8005bd4:	08005b71 	.word	0x08005b71
 8005bd8:	08005b71 	.word	0x08005b71
 8005bdc:	08005cb7 	.word	0x08005cb7
 8005be0:	6833      	ldr	r3, [r6, #0]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6032      	str	r2, [r6, #0]
 8005be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e09d      	b.n	8005d30 <_printf_i+0x1e8>
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	1d19      	adds	r1, r3, #4
 8005bfa:	6031      	str	r1, [r6, #0]
 8005bfc:	0606      	lsls	r6, r0, #24
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0xbc>
 8005c00:	681d      	ldr	r5, [r3, #0]
 8005c02:	e003      	b.n	8005c0c <_printf_i+0xc4>
 8005c04:	0645      	lsls	r5, r0, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0xb8>
 8005c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	da03      	bge.n	8005c18 <_printf_i+0xd0>
 8005c10:	232d      	movs	r3, #45	@ 0x2d
 8005c12:	426d      	negs	r5, r5
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c18:	4859      	ldr	r0, [pc, #356]	@ (8005d80 <_printf_i+0x238>)
 8005c1a:	230a      	movs	r3, #10
 8005c1c:	e011      	b.n	8005c42 <_printf_i+0xfa>
 8005c1e:	6821      	ldr	r1, [r4, #0]
 8005c20:	6833      	ldr	r3, [r6, #0]
 8005c22:	0608      	lsls	r0, r1, #24
 8005c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c28:	d402      	bmi.n	8005c30 <_printf_i+0xe8>
 8005c2a:	0649      	lsls	r1, r1, #25
 8005c2c:	bf48      	it	mi
 8005c2e:	b2ad      	uxthmi	r5, r5
 8005c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c32:	4853      	ldr	r0, [pc, #332]	@ (8005d80 <_printf_i+0x238>)
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	bf14      	ite	ne
 8005c38:	230a      	movne	r3, #10
 8005c3a:	2308      	moveq	r3, #8
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c42:	6866      	ldr	r6, [r4, #4]
 8005c44:	60a6      	str	r6, [r4, #8]
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	bfa2      	ittt	ge
 8005c4a:	6821      	ldrge	r1, [r4, #0]
 8005c4c:	f021 0104 	bicge.w	r1, r1, #4
 8005c50:	6021      	strge	r1, [r4, #0]
 8005c52:	b90d      	cbnz	r5, 8005c58 <_printf_i+0x110>
 8005c54:	2e00      	cmp	r6, #0
 8005c56:	d04b      	beq.n	8005cf0 <_printf_i+0x1a8>
 8005c58:	4616      	mov	r6, r2
 8005c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c62:	5dc7      	ldrb	r7, [r0, r7]
 8005c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c68:	462f      	mov	r7, r5
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	d9f4      	bls.n	8005c5a <_printf_i+0x112>
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <_printf_i+0x144>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07df      	lsls	r7, r3, #31
 8005c78:	d508      	bpl.n	8005c8c <_printf_i+0x144>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6861      	ldr	r1, [r4, #4]
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	bfde      	ittt	le
 8005c82:	2330      	movle	r3, #48	@ 0x30
 8005c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c8c:	1b92      	subs	r2, r2, r6
 8005c8e:	6122      	str	r2, [r4, #16]
 8005c90:	f8cd a000 	str.w	sl, [sp]
 8005c94:	464b      	mov	r3, r9
 8005c96:	aa03      	add	r2, sp, #12
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fee6 	bl	8005a6c <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d14a      	bne.n	8005d3a <_printf_i+0x1f2>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b004      	add	sp, #16
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f043 0320 	orr.w	r3, r3, #32
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	4833      	ldr	r0, [pc, #204]	@ (8005d84 <_printf_i+0x23c>)
 8005cb8:	2778      	movs	r7, #120	@ 0x78
 8005cba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6831      	ldr	r1, [r6, #0]
 8005cc2:	061f      	lsls	r7, r3, #24
 8005cc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cc8:	d402      	bmi.n	8005cd0 <_printf_i+0x188>
 8005cca:	065f      	lsls	r7, r3, #25
 8005ccc:	bf48      	it	mi
 8005cce:	b2ad      	uxthmi	r5, r5
 8005cd0:	6031      	str	r1, [r6, #0]
 8005cd2:	07d9      	lsls	r1, r3, #31
 8005cd4:	bf44      	itt	mi
 8005cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cda:	6023      	strmi	r3, [r4, #0]
 8005cdc:	b11d      	cbz	r5, 8005ce6 <_printf_i+0x19e>
 8005cde:	2310      	movs	r3, #16
 8005ce0:	e7ac      	b.n	8005c3c <_printf_i+0xf4>
 8005ce2:	4827      	ldr	r0, [pc, #156]	@ (8005d80 <_printf_i+0x238>)
 8005ce4:	e7e9      	b.n	8005cba <_printf_i+0x172>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	f023 0320 	bic.w	r3, r3, #32
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	e7f6      	b.n	8005cde <_printf_i+0x196>
 8005cf0:	4616      	mov	r6, r2
 8005cf2:	e7bd      	b.n	8005c70 <_printf_i+0x128>
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	6825      	ldr	r5, [r4, #0]
 8005cf8:	6961      	ldr	r1, [r4, #20]
 8005cfa:	1d18      	adds	r0, r3, #4
 8005cfc:	6030      	str	r0, [r6, #0]
 8005cfe:	062e      	lsls	r6, r5, #24
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	d501      	bpl.n	8005d08 <_printf_i+0x1c0>
 8005d04:	6019      	str	r1, [r3, #0]
 8005d06:	e002      	b.n	8005d0e <_printf_i+0x1c6>
 8005d08:	0668      	lsls	r0, r5, #25
 8005d0a:	d5fb      	bpl.n	8005d04 <_printf_i+0x1bc>
 8005d0c:	8019      	strh	r1, [r3, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	4616      	mov	r6, r2
 8005d14:	e7bc      	b.n	8005c90 <_printf_i+0x148>
 8005d16:	6833      	ldr	r3, [r6, #0]
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	6032      	str	r2, [r6, #0]
 8005d1c:	681e      	ldr	r6, [r3, #0]
 8005d1e:	6862      	ldr	r2, [r4, #4]
 8005d20:	2100      	movs	r1, #0
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7fa fa6c 	bl	8000200 <memchr>
 8005d28:	b108      	cbz	r0, 8005d2e <_printf_i+0x1e6>
 8005d2a:	1b80      	subs	r0, r0, r6
 8005d2c:	6060      	str	r0, [r4, #4]
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	2300      	movs	r3, #0
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d38:	e7aa      	b.n	8005c90 <_printf_i+0x148>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	47d0      	blx	sl
 8005d44:	3001      	adds	r0, #1
 8005d46:	d0ad      	beq.n	8005ca4 <_printf_i+0x15c>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	079b      	lsls	r3, r3, #30
 8005d4c:	d413      	bmi.n	8005d76 <_printf_i+0x22e>
 8005d4e:	68e0      	ldr	r0, [r4, #12]
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	4298      	cmp	r0, r3
 8005d54:	bfb8      	it	lt
 8005d56:	4618      	movlt	r0, r3
 8005d58:	e7a6      	b.n	8005ca8 <_printf_i+0x160>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	47d0      	blx	sl
 8005d64:	3001      	adds	r0, #1
 8005d66:	d09d      	beq.n	8005ca4 <_printf_i+0x15c>
 8005d68:	3501      	adds	r5, #1
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	9903      	ldr	r1, [sp, #12]
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dcf2      	bgt.n	8005d5a <_printf_i+0x212>
 8005d74:	e7eb      	b.n	8005d4e <_printf_i+0x206>
 8005d76:	2500      	movs	r5, #0
 8005d78:	f104 0619 	add.w	r6, r4, #25
 8005d7c:	e7f5      	b.n	8005d6a <_printf_i+0x222>
 8005d7e:	bf00      	nop
 8005d80:	0800848a 	.word	0x0800848a
 8005d84:	0800849b 	.word	0x0800849b

08005d88 <std>:
 8005d88:	2300      	movs	r3, #0
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d96:	6083      	str	r3, [r0, #8]
 8005d98:	8181      	strh	r1, [r0, #12]
 8005d9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d9c:	81c2      	strh	r2, [r0, #14]
 8005d9e:	6183      	str	r3, [r0, #24]
 8005da0:	4619      	mov	r1, r3
 8005da2:	2208      	movs	r2, #8
 8005da4:	305c      	adds	r0, #92	@ 0x5c
 8005da6:	f000 fa19 	bl	80061dc <memset>
 8005daa:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <std+0x58>)
 8005dac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <std+0x5c>)
 8005db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <std+0x60>)
 8005db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <std+0x64>)
 8005db8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005dba:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <std+0x68>)
 8005dbc:	6224      	str	r4, [r4, #32]
 8005dbe:	429c      	cmp	r4, r3
 8005dc0:	d006      	beq.n	8005dd0 <std+0x48>
 8005dc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dc6:	4294      	cmp	r4, r2
 8005dc8:	d002      	beq.n	8005dd0 <std+0x48>
 8005dca:	33d0      	adds	r3, #208	@ 0xd0
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	d105      	bne.n	8005ddc <std+0x54>
 8005dd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f000 bad8 	b.w	800638c <__retarget_lock_init_recursive>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	bf00      	nop
 8005de0:	0800602d 	.word	0x0800602d
 8005de4:	0800604f 	.word	0x0800604f
 8005de8:	08006087 	.word	0x08006087
 8005dec:	080060ab 	.word	0x080060ab
 8005df0:	2000048c 	.word	0x2000048c

08005df4 <stdio_exit_handler>:
 8005df4:	4a02      	ldr	r2, [pc, #8]	@ (8005e00 <stdio_exit_handler+0xc>)
 8005df6:	4903      	ldr	r1, [pc, #12]	@ (8005e04 <stdio_exit_handler+0x10>)
 8005df8:	4803      	ldr	r0, [pc, #12]	@ (8005e08 <stdio_exit_handler+0x14>)
 8005dfa:	f000 b869 	b.w	8005ed0 <_fwalk_sglue>
 8005dfe:	bf00      	nop
 8005e00:	20000038 	.word	0x20000038
 8005e04:	08007fb9 	.word	0x08007fb9
 8005e08:	20000048 	.word	0x20000048

08005e0c <cleanup_stdio>:
 8005e0c:	6841      	ldr	r1, [r0, #4]
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <cleanup_stdio+0x34>)
 8005e10:	4299      	cmp	r1, r3
 8005e12:	b510      	push	{r4, lr}
 8005e14:	4604      	mov	r4, r0
 8005e16:	d001      	beq.n	8005e1c <cleanup_stdio+0x10>
 8005e18:	f002 f8ce 	bl	8007fb8 <_fflush_r>
 8005e1c:	68a1      	ldr	r1, [r4, #8]
 8005e1e:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <cleanup_stdio+0x38>)
 8005e20:	4299      	cmp	r1, r3
 8005e22:	d002      	beq.n	8005e2a <cleanup_stdio+0x1e>
 8005e24:	4620      	mov	r0, r4
 8005e26:	f002 f8c7 	bl	8007fb8 <_fflush_r>
 8005e2a:	68e1      	ldr	r1, [r4, #12]
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <cleanup_stdio+0x3c>)
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	d004      	beq.n	8005e3c <cleanup_stdio+0x30>
 8005e32:	4620      	mov	r0, r4
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e38:	f002 b8be 	b.w	8007fb8 <_fflush_r>
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000048c 	.word	0x2000048c
 8005e44:	200004f4 	.word	0x200004f4
 8005e48:	2000055c 	.word	0x2000055c

08005e4c <global_stdio_init.part.0>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <global_stdio_init.part.0+0x30>)
 8005e50:	4c0b      	ldr	r4, [pc, #44]	@ (8005e80 <global_stdio_init.part.0+0x34>)
 8005e52:	4a0c      	ldr	r2, [pc, #48]	@ (8005e84 <global_stdio_init.part.0+0x38>)
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	4620      	mov	r0, r4
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	f7ff ff94 	bl	8005d88 <std>
 8005e60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e64:	2201      	movs	r2, #1
 8005e66:	2109      	movs	r1, #9
 8005e68:	f7ff ff8e 	bl	8005d88 <std>
 8005e6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e70:	2202      	movs	r2, #2
 8005e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e76:	2112      	movs	r1, #18
 8005e78:	f7ff bf86 	b.w	8005d88 <std>
 8005e7c:	200005c4 	.word	0x200005c4
 8005e80:	2000048c 	.word	0x2000048c
 8005e84:	08005df5 	.word	0x08005df5

08005e88 <__sfp_lock_acquire>:
 8005e88:	4801      	ldr	r0, [pc, #4]	@ (8005e90 <__sfp_lock_acquire+0x8>)
 8005e8a:	f000 ba80 	b.w	800638e <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200005cd 	.word	0x200005cd

08005e94 <__sfp_lock_release>:
 8005e94:	4801      	ldr	r0, [pc, #4]	@ (8005e9c <__sfp_lock_release+0x8>)
 8005e96:	f000 ba7b 	b.w	8006390 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	200005cd 	.word	0x200005cd

08005ea0 <__sinit>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f7ff fff0 	bl	8005e88 <__sfp_lock_acquire>
 8005ea8:	6a23      	ldr	r3, [r4, #32]
 8005eaa:	b11b      	cbz	r3, 8005eb4 <__sinit+0x14>
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	f7ff bff0 	b.w	8005e94 <__sfp_lock_release>
 8005eb4:	4b04      	ldr	r3, [pc, #16]	@ (8005ec8 <__sinit+0x28>)
 8005eb6:	6223      	str	r3, [r4, #32]
 8005eb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ecc <__sinit+0x2c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f5      	bne.n	8005eac <__sinit+0xc>
 8005ec0:	f7ff ffc4 	bl	8005e4c <global_stdio_init.part.0>
 8005ec4:	e7f2      	b.n	8005eac <__sinit+0xc>
 8005ec6:	bf00      	nop
 8005ec8:	08005e0d 	.word	0x08005e0d
 8005ecc:	200005c4 	.word	0x200005c4

08005ed0 <_fwalk_sglue>:
 8005ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	4688      	mov	r8, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	2600      	movs	r6, #0
 8005edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee4:	d505      	bpl.n	8005ef2 <_fwalk_sglue+0x22>
 8005ee6:	6824      	ldr	r4, [r4, #0]
 8005ee8:	2c00      	cmp	r4, #0
 8005eea:	d1f7      	bne.n	8005edc <_fwalk_sglue+0xc>
 8005eec:	4630      	mov	r0, r6
 8005eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d907      	bls.n	8005f08 <_fwalk_sglue+0x38>
 8005ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005efc:	3301      	adds	r3, #1
 8005efe:	d003      	beq.n	8005f08 <_fwalk_sglue+0x38>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c0      	blx	r8
 8005f06:	4306      	orrs	r6, r0
 8005f08:	3568      	adds	r5, #104	@ 0x68
 8005f0a:	e7e9      	b.n	8005ee0 <_fwalk_sglue+0x10>

08005f0c <iprintf>:
 8005f0c:	b40f      	push	{r0, r1, r2, r3}
 8005f0e:	b507      	push	{r0, r1, r2, lr}
 8005f10:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <iprintf+0x20>)
 8005f12:	ab04      	add	r3, sp, #16
 8005f14:	6808      	ldr	r0, [r1, #0]
 8005f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1a:	6881      	ldr	r1, [r0, #8]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	f001 feaf 	bl	8007c80 <_vfiprintf_r>
 8005f22:	b003      	add	sp, #12
 8005f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f28:	b004      	add	sp, #16
 8005f2a:	4770      	bx	lr
 8005f2c:	20000044 	.word	0x20000044

08005f30 <_puts_r>:
 8005f30:	6a03      	ldr	r3, [r0, #32]
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	6884      	ldr	r4, [r0, #8]
 8005f36:	4605      	mov	r5, r0
 8005f38:	460e      	mov	r6, r1
 8005f3a:	b90b      	cbnz	r3, 8005f40 <_puts_r+0x10>
 8005f3c:	f7ff ffb0 	bl	8005ea0 <__sinit>
 8005f40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f42:	07db      	lsls	r3, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_puts_r+0x22>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	0598      	lsls	r0, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_puts_r+0x22>
 8005f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f4e:	f000 fa1e 	bl	800638e <__retarget_lock_acquire_recursive>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	0719      	lsls	r1, r3, #28
 8005f56:	d502      	bpl.n	8005f5e <_puts_r+0x2e>
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d135      	bne.n	8005fca <_puts_r+0x9a>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 f8e5 	bl	8006130 <__swsetup_r>
 8005f66:	b380      	cbz	r0, 8005fca <_puts_r+0x9a>
 8005f68:	f04f 35ff 	mov.w	r5, #4294967295
 8005f6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f6e:	07da      	lsls	r2, r3, #31
 8005f70:	d405      	bmi.n	8005f7e <_puts_r+0x4e>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	d402      	bmi.n	8005f7e <_puts_r+0x4e>
 8005f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f7a:	f000 fa09 	bl	8006390 <__retarget_lock_release_recursive>
 8005f7e:	4628      	mov	r0, r5
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da04      	bge.n	8005f90 <_puts_r+0x60>
 8005f86:	69a2      	ldr	r2, [r4, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	dc17      	bgt.n	8005fbc <_puts_r+0x8c>
 8005f8c:	290a      	cmp	r1, #10
 8005f8e:	d015      	beq.n	8005fbc <_puts_r+0x8c>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	6022      	str	r2, [r4, #0]
 8005f96:	7019      	strb	r1, [r3, #0]
 8005f98:	68a3      	ldr	r3, [r4, #8]
 8005f9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	60a3      	str	r3, [r4, #8]
 8005fa2:	2900      	cmp	r1, #0
 8005fa4:	d1ed      	bne.n	8005f82 <_puts_r+0x52>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da11      	bge.n	8005fce <_puts_r+0x9e>
 8005faa:	4622      	mov	r2, r4
 8005fac:	210a      	movs	r1, #10
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 f87f 	bl	80060b2 <__swbuf_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d0d7      	beq.n	8005f68 <_puts_r+0x38>
 8005fb8:	250a      	movs	r5, #10
 8005fba:	e7d7      	b.n	8005f6c <_puts_r+0x3c>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 f877 	bl	80060b2 <__swbuf_r>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d1e7      	bne.n	8005f98 <_puts_r+0x68>
 8005fc8:	e7ce      	b.n	8005f68 <_puts_r+0x38>
 8005fca:	3e01      	subs	r6, #1
 8005fcc:	e7e4      	b.n	8005f98 <_puts_r+0x68>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	6022      	str	r2, [r4, #0]
 8005fd4:	220a      	movs	r2, #10
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e7ee      	b.n	8005fb8 <_puts_r+0x88>
	...

08005fdc <puts>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	@ (8005fe8 <puts+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f7ff bfa5 	b.w	8005f30 <_puts_r>
 8005fe6:	bf00      	nop
 8005fe8:	20000044 	.word	0x20000044

08005fec <siprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	b500      	push	{lr}
 8005ff0:	b09c      	sub	sp, #112	@ 0x70
 8005ff2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	9006      	str	r0, [sp, #24]
 8005ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ffc:	4809      	ldr	r0, [pc, #36]	@ (8006024 <siprintf+0x38>)
 8005ffe:	9107      	str	r1, [sp, #28]
 8006000:	9104      	str	r1, [sp, #16]
 8006002:	4909      	ldr	r1, [pc, #36]	@ (8006028 <siprintf+0x3c>)
 8006004:	f853 2b04 	ldr.w	r2, [r3], #4
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	a902      	add	r1, sp, #8
 8006010:	f001 fd10 	bl	8007a34 <_svfiprintf_r>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	@ 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	20000044 	.word	0x20000044
 8006028:	ffff0208 	.word	0xffff0208

0800602c <__sread>:
 800602c:	b510      	push	{r4, lr}
 800602e:	460c      	mov	r4, r1
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	f000 f95c 	bl	80062f0 <_read_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	bfab      	itete	ge
 800603c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800603e:	89a3      	ldrhlt	r3, [r4, #12]
 8006040:	181b      	addge	r3, r3, r0
 8006042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006046:	bfac      	ite	ge
 8006048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800604a:	81a3      	strhlt	r3, [r4, #12]
 800604c:	bd10      	pop	{r4, pc}

0800604e <__swrite>:
 800604e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	461f      	mov	r7, r3
 8006054:	898b      	ldrh	r3, [r1, #12]
 8006056:	05db      	lsls	r3, r3, #23
 8006058:	4605      	mov	r5, r0
 800605a:	460c      	mov	r4, r1
 800605c:	4616      	mov	r6, r2
 800605e:	d505      	bpl.n	800606c <__swrite+0x1e>
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2302      	movs	r3, #2
 8006066:	2200      	movs	r2, #0
 8006068:	f000 f930 	bl	80062cc <_lseek_r>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	4628      	mov	r0, r5
 800607e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	f000 b947 	b.w	8006314 <_write_r>

08006086 <__sseek>:
 8006086:	b510      	push	{r4, lr}
 8006088:	460c      	mov	r4, r1
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 f91d 	bl	80062cc <_lseek_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	bf15      	itete	ne
 8006098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800609a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800609e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060a2:	81a3      	strheq	r3, [r4, #12]
 80060a4:	bf18      	it	ne
 80060a6:	81a3      	strhne	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__sclose>:
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	f000 b8fd 	b.w	80062ac <_close_r>

080060b2 <__swbuf_r>:
 80060b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b4:	460e      	mov	r6, r1
 80060b6:	4614      	mov	r4, r2
 80060b8:	4605      	mov	r5, r0
 80060ba:	b118      	cbz	r0, 80060c4 <__swbuf_r+0x12>
 80060bc:	6a03      	ldr	r3, [r0, #32]
 80060be:	b90b      	cbnz	r3, 80060c4 <__swbuf_r+0x12>
 80060c0:	f7ff feee 	bl	8005ea0 <__sinit>
 80060c4:	69a3      	ldr	r3, [r4, #24]
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	071a      	lsls	r2, r3, #28
 80060cc:	d501      	bpl.n	80060d2 <__swbuf_r+0x20>
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	b943      	cbnz	r3, 80060e4 <__swbuf_r+0x32>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f82b 	bl	8006130 <__swsetup_r>
 80060da:	b118      	cbz	r0, 80060e4 <__swbuf_r+0x32>
 80060dc:	f04f 37ff 	mov.w	r7, #4294967295
 80060e0:	4638      	mov	r0, r7
 80060e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	6922      	ldr	r2, [r4, #16]
 80060e8:	1a98      	subs	r0, r3, r2
 80060ea:	6963      	ldr	r3, [r4, #20]
 80060ec:	b2f6      	uxtb	r6, r6
 80060ee:	4283      	cmp	r3, r0
 80060f0:	4637      	mov	r7, r6
 80060f2:	dc05      	bgt.n	8006100 <__swbuf_r+0x4e>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	f001 ff5e 	bl	8007fb8 <_fflush_r>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1ed      	bne.n	80060dc <__swbuf_r+0x2a>
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	3b01      	subs	r3, #1
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	701e      	strb	r6, [r3, #0]
 800610e:	6962      	ldr	r2, [r4, #20]
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	429a      	cmp	r2, r3
 8006114:	d004      	beq.n	8006120 <__swbuf_r+0x6e>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	07db      	lsls	r3, r3, #31
 800611a:	d5e1      	bpl.n	80060e0 <__swbuf_r+0x2e>
 800611c:	2e0a      	cmp	r6, #10
 800611e:	d1df      	bne.n	80060e0 <__swbuf_r+0x2e>
 8006120:	4621      	mov	r1, r4
 8006122:	4628      	mov	r0, r5
 8006124:	f001 ff48 	bl	8007fb8 <_fflush_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	d0d9      	beq.n	80060e0 <__swbuf_r+0x2e>
 800612c:	e7d6      	b.n	80060dc <__swbuf_r+0x2a>
	...

08006130 <__swsetup_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4b29      	ldr	r3, [pc, #164]	@ (80061d8 <__swsetup_r+0xa8>)
 8006134:	4605      	mov	r5, r0
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	460c      	mov	r4, r1
 800613a:	b118      	cbz	r0, 8006144 <__swsetup_r+0x14>
 800613c:	6a03      	ldr	r3, [r0, #32]
 800613e:	b90b      	cbnz	r3, 8006144 <__swsetup_r+0x14>
 8006140:	f7ff feae 	bl	8005ea0 <__sinit>
 8006144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006148:	0719      	lsls	r1, r3, #28
 800614a:	d422      	bmi.n	8006192 <__swsetup_r+0x62>
 800614c:	06da      	lsls	r2, r3, #27
 800614e:	d407      	bmi.n	8006160 <__swsetup_r+0x30>
 8006150:	2209      	movs	r2, #9
 8006152:	602a      	str	r2, [r5, #0]
 8006154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e033      	b.n	80061c8 <__swsetup_r+0x98>
 8006160:	0758      	lsls	r0, r3, #29
 8006162:	d512      	bpl.n	800618a <__swsetup_r+0x5a>
 8006164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006166:	b141      	cbz	r1, 800617a <__swsetup_r+0x4a>
 8006168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <__swsetup_r+0x46>
 8006170:	4628      	mov	r0, r5
 8006172:	f000 ff81 	bl	8007078 <_free_r>
 8006176:	2300      	movs	r3, #0
 8006178:	6363      	str	r3, [r4, #52]	@ 0x34
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	2300      	movs	r3, #0
 8006184:	6063      	str	r3, [r4, #4]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	f043 0308 	orr.w	r3, r3, #8
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	b94b      	cbnz	r3, 80061aa <__swsetup_r+0x7a>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800619c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a0:	d003      	beq.n	80061aa <__swsetup_r+0x7a>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4628      	mov	r0, r5
 80061a6:	f001 ff67 	bl	8008078 <__smakebuf_r>
 80061aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ae:	f013 0201 	ands.w	r2, r3, #1
 80061b2:	d00a      	beq.n	80061ca <__swsetup_r+0x9a>
 80061b4:	2200      	movs	r2, #0
 80061b6:	60a2      	str	r2, [r4, #8]
 80061b8:	6962      	ldr	r2, [r4, #20]
 80061ba:	4252      	negs	r2, r2
 80061bc:	61a2      	str	r2, [r4, #24]
 80061be:	6922      	ldr	r2, [r4, #16]
 80061c0:	b942      	cbnz	r2, 80061d4 <__swsetup_r+0xa4>
 80061c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061c6:	d1c5      	bne.n	8006154 <__swsetup_r+0x24>
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
 80061ca:	0799      	lsls	r1, r3, #30
 80061cc:	bf58      	it	pl
 80061ce:	6962      	ldrpl	r2, [r4, #20]
 80061d0:	60a2      	str	r2, [r4, #8]
 80061d2:	e7f4      	b.n	80061be <__swsetup_r+0x8e>
 80061d4:	2000      	movs	r0, #0
 80061d6:	e7f7      	b.n	80061c8 <__swsetup_r+0x98>
 80061d8:	20000044 	.word	0x20000044

080061dc <memset>:
 80061dc:	4402      	add	r2, r0
 80061de:	4603      	mov	r3, r0
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d100      	bne.n	80061e6 <memset+0xa>
 80061e4:	4770      	bx	lr
 80061e6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ea:	e7f9      	b.n	80061e0 <memset+0x4>

080061ec <strtok>:
 80061ec:	4b16      	ldr	r3, [pc, #88]	@ (8006248 <strtok+0x5c>)
 80061ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f2:	681f      	ldr	r7, [r3, #0]
 80061f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80061f6:	4605      	mov	r5, r0
 80061f8:	460e      	mov	r6, r1
 80061fa:	b9ec      	cbnz	r4, 8006238 <strtok+0x4c>
 80061fc:	2050      	movs	r0, #80	@ 0x50
 80061fe:	f000 ff85 	bl	800710c <malloc>
 8006202:	4602      	mov	r2, r0
 8006204:	6478      	str	r0, [r7, #68]	@ 0x44
 8006206:	b920      	cbnz	r0, 8006212 <strtok+0x26>
 8006208:	4b10      	ldr	r3, [pc, #64]	@ (800624c <strtok+0x60>)
 800620a:	4811      	ldr	r0, [pc, #68]	@ (8006250 <strtok+0x64>)
 800620c:	215b      	movs	r1, #91	@ 0x5b
 800620e:	f000 f8c9 	bl	80063a4 <__assert_func>
 8006212:	e9c0 4400 	strd	r4, r4, [r0]
 8006216:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800621a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800621e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006222:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006226:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800622a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800622e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006232:	6184      	str	r4, [r0, #24]
 8006234:	7704      	strb	r4, [r0, #28]
 8006236:	6244      	str	r4, [r0, #36]	@ 0x24
 8006238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	2301      	movs	r3, #1
 8006240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	f000 b806 	b.w	8006254 <__strtok_r>
 8006248:	20000044 	.word	0x20000044
 800624c:	080084ac 	.word	0x080084ac
 8006250:	080084c3 	.word	0x080084c3

08006254 <__strtok_r>:
 8006254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006256:	4604      	mov	r4, r0
 8006258:	b908      	cbnz	r0, 800625e <__strtok_r+0xa>
 800625a:	6814      	ldr	r4, [r2, #0]
 800625c:	b144      	cbz	r4, 8006270 <__strtok_r+0x1c>
 800625e:	4620      	mov	r0, r4
 8006260:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006264:	460f      	mov	r7, r1
 8006266:	f817 6b01 	ldrb.w	r6, [r7], #1
 800626a:	b91e      	cbnz	r6, 8006274 <__strtok_r+0x20>
 800626c:	b965      	cbnz	r5, 8006288 <__strtok_r+0x34>
 800626e:	6015      	str	r5, [r2, #0]
 8006270:	2000      	movs	r0, #0
 8006272:	e005      	b.n	8006280 <__strtok_r+0x2c>
 8006274:	42b5      	cmp	r5, r6
 8006276:	d1f6      	bne.n	8006266 <__strtok_r+0x12>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f0      	bne.n	800625e <__strtok_r+0xa>
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	7003      	strb	r3, [r0, #0]
 8006280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006282:	461c      	mov	r4, r3
 8006284:	e00c      	b.n	80062a0 <__strtok_r+0x4c>
 8006286:	b915      	cbnz	r5, 800628e <__strtok_r+0x3a>
 8006288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800628c:	460e      	mov	r6, r1
 800628e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006292:	42ab      	cmp	r3, r5
 8006294:	d1f7      	bne.n	8006286 <__strtok_r+0x32>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f3      	beq.n	8006282 <__strtok_r+0x2e>
 800629a:	2300      	movs	r3, #0
 800629c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80062a0:	6014      	str	r4, [r2, #0]
 80062a2:	e7ed      	b.n	8006280 <__strtok_r+0x2c>

080062a4 <_localeconv_r>:
 80062a4:	4800      	ldr	r0, [pc, #0]	@ (80062a8 <_localeconv_r+0x4>)
 80062a6:	4770      	bx	lr
 80062a8:	20000184 	.word	0x20000184

080062ac <_close_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	@ (80062c8 <_close_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fb fefc 	bl	80020b4 <_close>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_close_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_close_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200005c8 	.word	0x200005c8

080062cc <_lseek_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	@ (80062ec <_lseek_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb ff11 	bl	8002102 <_lseek>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_lseek_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_lseek_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	200005c8 	.word	0x200005c8

080062f0 <_read_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	@ (8006310 <_read_r+0x20>)
 80062f4:	4604      	mov	r4, r0
 80062f6:	4608      	mov	r0, r1
 80062f8:	4611      	mov	r1, r2
 80062fa:	2200      	movs	r2, #0
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7fb fe9f 	bl	8002042 <_read>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_read_r+0x1e>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_read_r+0x1e>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	200005c8 	.word	0x200005c8

08006314 <_write_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d07      	ldr	r5, [pc, #28]	@ (8006334 <_write_r+0x20>)
 8006318:	4604      	mov	r4, r0
 800631a:	4608      	mov	r0, r1
 800631c:	4611      	mov	r1, r2
 800631e:	2200      	movs	r2, #0
 8006320:	602a      	str	r2, [r5, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	f7fb feaa 	bl	800207c <_write>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_write_r+0x1e>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_write_r+0x1e>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200005c8 	.word	0x200005c8

08006338 <__errno>:
 8006338:	4b01      	ldr	r3, [pc, #4]	@ (8006340 <__errno+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000044 	.word	0x20000044

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	@ (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	@ (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	@ (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	@ (8006388 <__libc_init_array+0x44>)
 8006358:	f001 ffd8 	bl	800830c <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	0800884c 	.word	0x0800884c
 8006380:	0800884c 	.word	0x0800884c
 8006384:	0800884c 	.word	0x0800884c
 8006388:	08008850 	.word	0x08008850

0800638c <__retarget_lock_init_recursive>:
 800638c:	4770      	bx	lr

0800638e <__retarget_lock_acquire_recursive>:
 800638e:	4770      	bx	lr

08006390 <__retarget_lock_release_recursive>:
 8006390:	4770      	bx	lr

08006392 <strcpy>:
 8006392:	4603      	mov	r3, r0
 8006394:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006398:	f803 2b01 	strb.w	r2, [r3], #1
 800639c:	2a00      	cmp	r2, #0
 800639e:	d1f9      	bne.n	8006394 <strcpy+0x2>
 80063a0:	4770      	bx	lr
	...

080063a4 <__assert_func>:
 80063a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063a6:	4614      	mov	r4, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <__assert_func+0x2c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4605      	mov	r5, r0
 80063b0:	68d8      	ldr	r0, [r3, #12]
 80063b2:	b954      	cbnz	r4, 80063ca <__assert_func+0x26>
 80063b4:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <__assert_func+0x30>)
 80063b6:	461c      	mov	r4, r3
 80063b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063bc:	9100      	str	r1, [sp, #0]
 80063be:	462b      	mov	r3, r5
 80063c0:	4905      	ldr	r1, [pc, #20]	@ (80063d8 <__assert_func+0x34>)
 80063c2:	f001 fe21 	bl	8008008 <fiprintf>
 80063c6:	f001 feed 	bl	80081a4 <abort>
 80063ca:	4b04      	ldr	r3, [pc, #16]	@ (80063dc <__assert_func+0x38>)
 80063cc:	e7f4      	b.n	80063b8 <__assert_func+0x14>
 80063ce:	bf00      	nop
 80063d0:	20000044 	.word	0x20000044
 80063d4:	08008558 	.word	0x08008558
 80063d8:	0800852a 	.word	0x0800852a
 80063dc:	0800851d 	.word	0x0800851d

080063e0 <quorem>:
 80063e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	6903      	ldr	r3, [r0, #16]
 80063e6:	690c      	ldr	r4, [r1, #16]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	4607      	mov	r7, r0
 80063ec:	db7e      	blt.n	80064ec <quorem+0x10c>
 80063ee:	3c01      	subs	r4, #1
 80063f0:	f101 0814 	add.w	r8, r1, #20
 80063f4:	00a3      	lsls	r3, r4, #2
 80063f6:	f100 0514 	add.w	r5, r0, #20
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800640a:	3301      	adds	r3, #1
 800640c:	429a      	cmp	r2, r3
 800640e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006412:	fbb2 f6f3 	udiv	r6, r2, r3
 8006416:	d32e      	bcc.n	8006476 <quorem+0x96>
 8006418:	f04f 0a00 	mov.w	sl, #0
 800641c:	46c4      	mov	ip, r8
 800641e:	46ae      	mov	lr, r5
 8006420:	46d3      	mov	fp, sl
 8006422:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006426:	b298      	uxth	r0, r3
 8006428:	fb06 a000 	mla	r0, r6, r0, sl
 800642c:	0c02      	lsrs	r2, r0, #16
 800642e:	0c1b      	lsrs	r3, r3, #16
 8006430:	fb06 2303 	mla	r3, r6, r3, r2
 8006434:	f8de 2000 	ldr.w	r2, [lr]
 8006438:	b280      	uxth	r0, r0
 800643a:	b292      	uxth	r2, r2
 800643c:	1a12      	subs	r2, r2, r0
 800643e:	445a      	add	r2, fp
 8006440:	f8de 0000 	ldr.w	r0, [lr]
 8006444:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006448:	b29b      	uxth	r3, r3
 800644a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800644e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006452:	b292      	uxth	r2, r2
 8006454:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006458:	45e1      	cmp	r9, ip
 800645a:	f84e 2b04 	str.w	r2, [lr], #4
 800645e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006462:	d2de      	bcs.n	8006422 <quorem+0x42>
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	58eb      	ldr	r3, [r5, r3]
 8006468:	b92b      	cbnz	r3, 8006476 <quorem+0x96>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	3b04      	subs	r3, #4
 800646e:	429d      	cmp	r5, r3
 8006470:	461a      	mov	r2, r3
 8006472:	d32f      	bcc.n	80064d4 <quorem+0xf4>
 8006474:	613c      	str	r4, [r7, #16]
 8006476:	4638      	mov	r0, r7
 8006478:	f001 f978 	bl	800776c <__mcmp>
 800647c:	2800      	cmp	r0, #0
 800647e:	db25      	blt.n	80064cc <quorem+0xec>
 8006480:	4629      	mov	r1, r5
 8006482:	2000      	movs	r0, #0
 8006484:	f858 2b04 	ldr.w	r2, [r8], #4
 8006488:	f8d1 c000 	ldr.w	ip, [r1]
 800648c:	fa1f fe82 	uxth.w	lr, r2
 8006490:	fa1f f38c 	uxth.w	r3, ip
 8006494:	eba3 030e 	sub.w	r3, r3, lr
 8006498:	4403      	add	r3, r0
 800649a:	0c12      	lsrs	r2, r2, #16
 800649c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064aa:	45c1      	cmp	r9, r8
 80064ac:	f841 3b04 	str.w	r3, [r1], #4
 80064b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064b4:	d2e6      	bcs.n	8006484 <quorem+0xa4>
 80064b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064be:	b922      	cbnz	r2, 80064ca <quorem+0xea>
 80064c0:	3b04      	subs	r3, #4
 80064c2:	429d      	cmp	r5, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	d30b      	bcc.n	80064e0 <quorem+0x100>
 80064c8:	613c      	str	r4, [r7, #16]
 80064ca:	3601      	adds	r6, #1
 80064cc:	4630      	mov	r0, r6
 80064ce:	b003      	add	sp, #12
 80064d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	2a00      	cmp	r2, #0
 80064da:	d1cb      	bne.n	8006474 <quorem+0x94>
 80064dc:	3c01      	subs	r4, #1
 80064de:	e7c6      	b.n	800646e <quorem+0x8e>
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	3b04      	subs	r3, #4
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d1ef      	bne.n	80064c8 <quorem+0xe8>
 80064e8:	3c01      	subs	r4, #1
 80064ea:	e7ea      	b.n	80064c2 <quorem+0xe2>
 80064ec:	2000      	movs	r0, #0
 80064ee:	e7ee      	b.n	80064ce <quorem+0xee>

080064f0 <_dtoa_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	69c7      	ldr	r7, [r0, #28]
 80064f6:	b099      	sub	sp, #100	@ 0x64
 80064f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064fc:	ec55 4b10 	vmov	r4, r5, d0
 8006500:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006502:	9109      	str	r1, [sp, #36]	@ 0x24
 8006504:	4683      	mov	fp, r0
 8006506:	920e      	str	r2, [sp, #56]	@ 0x38
 8006508:	9313      	str	r3, [sp, #76]	@ 0x4c
 800650a:	b97f      	cbnz	r7, 800652c <_dtoa_r+0x3c>
 800650c:	2010      	movs	r0, #16
 800650e:	f000 fdfd 	bl	800710c <malloc>
 8006512:	4602      	mov	r2, r0
 8006514:	f8cb 001c 	str.w	r0, [fp, #28]
 8006518:	b920      	cbnz	r0, 8006524 <_dtoa_r+0x34>
 800651a:	4ba7      	ldr	r3, [pc, #668]	@ (80067b8 <_dtoa_r+0x2c8>)
 800651c:	21ef      	movs	r1, #239	@ 0xef
 800651e:	48a7      	ldr	r0, [pc, #668]	@ (80067bc <_dtoa_r+0x2cc>)
 8006520:	f7ff ff40 	bl	80063a4 <__assert_func>
 8006524:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006528:	6007      	str	r7, [r0, #0]
 800652a:	60c7      	str	r7, [r0, #12]
 800652c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006530:	6819      	ldr	r1, [r3, #0]
 8006532:	b159      	cbz	r1, 800654c <_dtoa_r+0x5c>
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	604a      	str	r2, [r1, #4]
 8006538:	2301      	movs	r3, #1
 800653a:	4093      	lsls	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
 800653e:	4658      	mov	r0, fp
 8006540:	f000 feda 	bl	80072f8 <_Bfree>
 8006544:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	1e2b      	subs	r3, r5, #0
 800654e:	bfb9      	ittee	lt
 8006550:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006554:	9303      	strlt	r3, [sp, #12]
 8006556:	2300      	movge	r3, #0
 8006558:	6033      	strge	r3, [r6, #0]
 800655a:	9f03      	ldr	r7, [sp, #12]
 800655c:	4b98      	ldr	r3, [pc, #608]	@ (80067c0 <_dtoa_r+0x2d0>)
 800655e:	bfbc      	itt	lt
 8006560:	2201      	movlt	r2, #1
 8006562:	6032      	strlt	r2, [r6, #0]
 8006564:	43bb      	bics	r3, r7
 8006566:	d112      	bne.n	800658e <_dtoa_r+0x9e>
 8006568:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800656a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006574:	4323      	orrs	r3, r4
 8006576:	f000 854d 	beq.w	8007014 <_dtoa_r+0xb24>
 800657a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800657c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067d4 <_dtoa_r+0x2e4>
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 854f 	beq.w	8007024 <_dtoa_r+0xb34>
 8006586:	f10a 0303 	add.w	r3, sl, #3
 800658a:	f000 bd49 	b.w	8007020 <_dtoa_r+0xb30>
 800658e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	ec51 0b17 	vmov	r0, r1, d7
 8006598:	2300      	movs	r3, #0
 800659a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800659e:	f7fa faab 	bl	8000af8 <__aeabi_dcmpeq>
 80065a2:	4680      	mov	r8, r0
 80065a4:	b158      	cbz	r0, 80065be <_dtoa_r+0xce>
 80065a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065a8:	2301      	movs	r3, #1
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065ae:	b113      	cbz	r3, 80065b6 <_dtoa_r+0xc6>
 80065b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065b2:	4b84      	ldr	r3, [pc, #528]	@ (80067c4 <_dtoa_r+0x2d4>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067d8 <_dtoa_r+0x2e8>
 80065ba:	f000 bd33 	b.w	8007024 <_dtoa_r+0xb34>
 80065be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065c2:	aa16      	add	r2, sp, #88	@ 0x58
 80065c4:	a917      	add	r1, sp, #92	@ 0x5c
 80065c6:	4658      	mov	r0, fp
 80065c8:	f001 f980 	bl	80078cc <__d2b>
 80065cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065d0:	4681      	mov	r9, r0
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	d077      	beq.n	80066c6 <_dtoa_r+0x1d6>
 80065d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065f0:	4619      	mov	r1, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	4b74      	ldr	r3, [pc, #464]	@ (80067c8 <_dtoa_r+0x2d8>)
 80065f6:	f7f9 fe5f 	bl	80002b8 <__aeabi_dsub>
 80065fa:	a369      	add	r3, pc, #420	@ (adr r3, 80067a0 <_dtoa_r+0x2b0>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7fa f812 	bl	8000628 <__aeabi_dmul>
 8006604:	a368      	add	r3, pc, #416	@ (adr r3, 80067a8 <_dtoa_r+0x2b8>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 fe57 	bl	80002bc <__adddf3>
 800660e:	4604      	mov	r4, r0
 8006610:	4630      	mov	r0, r6
 8006612:	460d      	mov	r5, r1
 8006614:	f7f9 ff9e 	bl	8000554 <__aeabi_i2d>
 8006618:	a365      	add	r3, pc, #404	@ (adr r3, 80067b0 <_dtoa_r+0x2c0>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7fa f803 	bl	8000628 <__aeabi_dmul>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7f9 fe47 	bl	80002bc <__adddf3>
 800662e:	4604      	mov	r4, r0
 8006630:	460d      	mov	r5, r1
 8006632:	f7fa faa9 	bl	8000b88 <__aeabi_d2iz>
 8006636:	2200      	movs	r2, #0
 8006638:	4607      	mov	r7, r0
 800663a:	2300      	movs	r3, #0
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7fa fa64 	bl	8000b0c <__aeabi_dcmplt>
 8006644:	b140      	cbz	r0, 8006658 <_dtoa_r+0x168>
 8006646:	4638      	mov	r0, r7
 8006648:	f7f9 ff84 	bl	8000554 <__aeabi_i2d>
 800664c:	4622      	mov	r2, r4
 800664e:	462b      	mov	r3, r5
 8006650:	f7fa fa52 	bl	8000af8 <__aeabi_dcmpeq>
 8006654:	b900      	cbnz	r0, 8006658 <_dtoa_r+0x168>
 8006656:	3f01      	subs	r7, #1
 8006658:	2f16      	cmp	r7, #22
 800665a:	d851      	bhi.n	8006700 <_dtoa_r+0x210>
 800665c:	4b5b      	ldr	r3, [pc, #364]	@ (80067cc <_dtoa_r+0x2dc>)
 800665e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800666a:	f7fa fa4f 	bl	8000b0c <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d048      	beq.n	8006704 <_dtoa_r+0x214>
 8006672:	3f01      	subs	r7, #1
 8006674:	2300      	movs	r3, #0
 8006676:	9312      	str	r3, [sp, #72]	@ 0x48
 8006678:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800667a:	1b9b      	subs	r3, r3, r6
 800667c:	1e5a      	subs	r2, r3, #1
 800667e:	bf44      	itt	mi
 8006680:	f1c3 0801 	rsbmi	r8, r3, #1
 8006684:	2300      	movmi	r3, #0
 8006686:	9208      	str	r2, [sp, #32]
 8006688:	bf54      	ite	pl
 800668a:	f04f 0800 	movpl.w	r8, #0
 800668e:	9308      	strmi	r3, [sp, #32]
 8006690:	2f00      	cmp	r7, #0
 8006692:	db39      	blt.n	8006708 <_dtoa_r+0x218>
 8006694:	9b08      	ldr	r3, [sp, #32]
 8006696:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006698:	443b      	add	r3, r7
 800669a:	9308      	str	r3, [sp, #32]
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	d864      	bhi.n	8006770 <_dtoa_r+0x280>
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	bfc4      	itt	gt
 80066aa:	3b04      	subgt	r3, #4
 80066ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b0:	f1a3 0302 	sub.w	r3, r3, #2
 80066b4:	bfcc      	ite	gt
 80066b6:	2400      	movgt	r4, #0
 80066b8:	2401      	movle	r4, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d863      	bhi.n	8006786 <_dtoa_r+0x296>
 80066be:	e8df f003 	tbb	[pc, r3]
 80066c2:	372a      	.short	0x372a
 80066c4:	5535      	.short	0x5535
 80066c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066ca:	441e      	add	r6, r3
 80066cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	bfc1      	itttt	gt
 80066d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066d8:	409f      	lslgt	r7, r3
 80066da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066e2:	bfd6      	itet	le
 80066e4:	f1c3 0320 	rsble	r3, r3, #32
 80066e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80066ec:	fa04 f003 	lslle.w	r0, r4, r3
 80066f0:	f7f9 ff20 	bl	8000534 <__aeabi_ui2d>
 80066f4:	2201      	movs	r2, #1
 80066f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066fa:	3e01      	subs	r6, #1
 80066fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80066fe:	e777      	b.n	80065f0 <_dtoa_r+0x100>
 8006700:	2301      	movs	r3, #1
 8006702:	e7b8      	b.n	8006676 <_dtoa_r+0x186>
 8006704:	9012      	str	r0, [sp, #72]	@ 0x48
 8006706:	e7b7      	b.n	8006678 <_dtoa_r+0x188>
 8006708:	427b      	negs	r3, r7
 800670a:	930a      	str	r3, [sp, #40]	@ 0x28
 800670c:	2300      	movs	r3, #0
 800670e:	eba8 0807 	sub.w	r8, r8, r7
 8006712:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006714:	e7c4      	b.n	80066a0 <_dtoa_r+0x1b0>
 8006716:	2300      	movs	r3, #0
 8006718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	dc35      	bgt.n	800678c <_dtoa_r+0x29c>
 8006720:	2301      	movs	r3, #1
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	461a      	mov	r2, r3
 8006728:	920e      	str	r2, [sp, #56]	@ 0x38
 800672a:	e00b      	b.n	8006744 <_dtoa_r+0x254>
 800672c:	2301      	movs	r3, #1
 800672e:	e7f3      	b.n	8006718 <_dtoa_r+0x228>
 8006730:	2300      	movs	r3, #0
 8006732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	9307      	str	r3, [sp, #28]
 8006740:	bfb8      	it	lt
 8006742:	2301      	movlt	r3, #1
 8006744:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006748:	2100      	movs	r1, #0
 800674a:	2204      	movs	r2, #4
 800674c:	f102 0514 	add.w	r5, r2, #20
 8006750:	429d      	cmp	r5, r3
 8006752:	d91f      	bls.n	8006794 <_dtoa_r+0x2a4>
 8006754:	6041      	str	r1, [r0, #4]
 8006756:	4658      	mov	r0, fp
 8006758:	f000 fd8e 	bl	8007278 <_Balloc>
 800675c:	4682      	mov	sl, r0
 800675e:	2800      	cmp	r0, #0
 8006760:	d13c      	bne.n	80067dc <_dtoa_r+0x2ec>
 8006762:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <_dtoa_r+0x2e0>)
 8006764:	4602      	mov	r2, r0
 8006766:	f240 11af 	movw	r1, #431	@ 0x1af
 800676a:	e6d8      	b.n	800651e <_dtoa_r+0x2e>
 800676c:	2301      	movs	r3, #1
 800676e:	e7e0      	b.n	8006732 <_dtoa_r+0x242>
 8006770:	2401      	movs	r4, #1
 8006772:	2300      	movs	r3, #0
 8006774:	9309      	str	r3, [sp, #36]	@ 0x24
 8006776:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006778:	f04f 33ff 	mov.w	r3, #4294967295
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	9307      	str	r3, [sp, #28]
 8006780:	2200      	movs	r2, #0
 8006782:	2312      	movs	r3, #18
 8006784:	e7d0      	b.n	8006728 <_dtoa_r+0x238>
 8006786:	2301      	movs	r3, #1
 8006788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800678a:	e7f5      	b.n	8006778 <_dtoa_r+0x288>
 800678c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	e7d7      	b.n	8006744 <_dtoa_r+0x254>
 8006794:	3101      	adds	r1, #1
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	e7d8      	b.n	800674c <_dtoa_r+0x25c>
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w
 80067a0:	636f4361 	.word	0x636f4361
 80067a4:	3fd287a7 	.word	0x3fd287a7
 80067a8:	8b60c8b3 	.word	0x8b60c8b3
 80067ac:	3fc68a28 	.word	0x3fc68a28
 80067b0:	509f79fb 	.word	0x509f79fb
 80067b4:	3fd34413 	.word	0x3fd34413
 80067b8:	080084ac 	.word	0x080084ac
 80067bc:	08008566 	.word	0x08008566
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	08008489 	.word	0x08008489
 80067c8:	3ff80000 	.word	0x3ff80000
 80067cc:	08008660 	.word	0x08008660
 80067d0:	080085be 	.word	0x080085be
 80067d4:	08008562 	.word	0x08008562
 80067d8:	08008488 	.word	0x08008488
 80067dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e0:	6018      	str	r0, [r3, #0]
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	2b0e      	cmp	r3, #14
 80067e6:	f200 80a4 	bhi.w	8006932 <_dtoa_r+0x442>
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	f000 80a1 	beq.w	8006932 <_dtoa_r+0x442>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	dd33      	ble.n	800685c <_dtoa_r+0x36c>
 80067f4:	4bad      	ldr	r3, [pc, #692]	@ (8006aac <_dtoa_r+0x5bc>)
 80067f6:	f007 020f 	and.w	r2, r7, #15
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	ed93 7b00 	vldr	d7, [r3]
 8006802:	05f8      	lsls	r0, r7, #23
 8006804:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006808:	ea4f 1427 	mov.w	r4, r7, asr #4
 800680c:	d516      	bpl.n	800683c <_dtoa_r+0x34c>
 800680e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006818:	f7fa f830 	bl	800087c <__aeabi_ddiv>
 800681c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006820:	f004 040f 	and.w	r4, r4, #15
 8006824:	2603      	movs	r6, #3
 8006826:	4da2      	ldr	r5, [pc, #648]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006828:	b954      	cbnz	r4, 8006840 <_dtoa_r+0x350>
 800682a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006832:	f7fa f823 	bl	800087c <__aeabi_ddiv>
 8006836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683a:	e028      	b.n	800688e <_dtoa_r+0x39e>
 800683c:	2602      	movs	r6, #2
 800683e:	e7f2      	b.n	8006826 <_dtoa_r+0x336>
 8006840:	07e1      	lsls	r1, r4, #31
 8006842:	d508      	bpl.n	8006856 <_dtoa_r+0x366>
 8006844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800684c:	f7f9 feec 	bl	8000628 <__aeabi_dmul>
 8006850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006854:	3601      	adds	r6, #1
 8006856:	1064      	asrs	r4, r4, #1
 8006858:	3508      	adds	r5, #8
 800685a:	e7e5      	b.n	8006828 <_dtoa_r+0x338>
 800685c:	f000 80d2 	beq.w	8006a04 <_dtoa_r+0x514>
 8006860:	427c      	negs	r4, r7
 8006862:	4b92      	ldr	r3, [pc, #584]	@ (8006aac <_dtoa_r+0x5bc>)
 8006864:	4d92      	ldr	r5, [pc, #584]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006866:	f004 020f 	and.w	r2, r4, #15
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006876:	f7f9 fed7 	bl	8000628 <__aeabi_dmul>
 800687a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687e:	1124      	asrs	r4, r4, #4
 8006880:	2300      	movs	r3, #0
 8006882:	2602      	movs	r6, #2
 8006884:	2c00      	cmp	r4, #0
 8006886:	f040 80b2 	bne.w	80069ee <_dtoa_r+0x4fe>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d3      	bne.n	8006836 <_dtoa_r+0x346>
 800688e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006890:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80b7 	beq.w	8006a08 <_dtoa_r+0x518>
 800689a:	4b86      	ldr	r3, [pc, #536]	@ (8006ab4 <_dtoa_r+0x5c4>)
 800689c:	2200      	movs	r2, #0
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7fa f933 	bl	8000b0c <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f000 80ae 	beq.w	8006a08 <_dtoa_r+0x518>
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80aa 	beq.w	8006a08 <_dtoa_r+0x518>
 80068b4:	9b00      	ldr	r3, [sp, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd37      	ble.n	800692a <_dtoa_r+0x43a>
 80068ba:	1e7b      	subs	r3, r7, #1
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	4620      	mov	r0, r4
 80068c0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ab8 <_dtoa_r+0x5c8>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7f9 feaf 	bl	8000628 <__aeabi_dmul>
 80068ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ce:	9c00      	ldr	r4, [sp, #0]
 80068d0:	3601      	adds	r6, #1
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fe3e 	bl	8000554 <__aeabi_i2d>
 80068d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068dc:	f7f9 fea4 	bl	8000628 <__aeabi_dmul>
 80068e0:	4b76      	ldr	r3, [pc, #472]	@ (8006abc <_dtoa_r+0x5cc>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fcea 	bl	80002bc <__adddf3>
 80068e8:	4605      	mov	r5, r0
 80068ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	f040 808d 	bne.w	8006a0e <_dtoa_r+0x51e>
 80068f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f8:	4b71      	ldr	r3, [pc, #452]	@ (8006ac0 <_dtoa_r+0x5d0>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7f9 fcdc 	bl	80002b8 <__aeabi_dsub>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006908:	462a      	mov	r2, r5
 800690a:	4633      	mov	r3, r6
 800690c:	f7fa f91c 	bl	8000b48 <__aeabi_dcmpgt>
 8006910:	2800      	cmp	r0, #0
 8006912:	f040 828b 	bne.w	8006e2c <_dtoa_r+0x93c>
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	462a      	mov	r2, r5
 800691c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006920:	f7fa f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8128 	bne.w	8006b7a <_dtoa_r+0x68a>
 800692a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800692e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f2c0 815a 	blt.w	8006bee <_dtoa_r+0x6fe>
 800693a:	2f0e      	cmp	r7, #14
 800693c:	f300 8157 	bgt.w	8006bee <_dtoa_r+0x6fe>
 8006940:	4b5a      	ldr	r3, [pc, #360]	@ (8006aac <_dtoa_r+0x5bc>)
 8006942:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006946:	ed93 7b00 	vldr	d7, [r3]
 800694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	ed8d 7b00 	vstr	d7, [sp]
 8006952:	da03      	bge.n	800695c <_dtoa_r+0x46c>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f340 8101 	ble.w	8006b5e <_dtoa_r+0x66e>
 800695c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006960:	4656      	mov	r6, sl
 8006962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 ff87 	bl	800087c <__aeabi_ddiv>
 800696e:	f7fa f90b 	bl	8000b88 <__aeabi_d2iz>
 8006972:	4680      	mov	r8, r0
 8006974:	f7f9 fdee 	bl	8000554 <__aeabi_i2d>
 8006978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697c:	f7f9 fe54 	bl	8000628 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800698c:	f7f9 fc94 	bl	80002b8 <__aeabi_dsub>
 8006990:	f806 4b01 	strb.w	r4, [r6], #1
 8006994:	9d07      	ldr	r5, [sp, #28]
 8006996:	eba6 040a 	sub.w	r4, r6, sl
 800699a:	42a5      	cmp	r5, r4
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	f040 8117 	bne.w	8006bd2 <_dtoa_r+0x6e2>
 80069a4:	f7f9 fc8a 	bl	80002bc <__adddf3>
 80069a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	f7fa f8ca 	bl	8000b48 <__aeabi_dcmpgt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 80f9 	bne.w	8006bac <_dtoa_r+0x6bc>
 80069ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7fa f899 	bl	8000af8 <__aeabi_dcmpeq>
 80069c6:	b118      	cbz	r0, 80069d0 <_dtoa_r+0x4e0>
 80069c8:	f018 0f01 	tst.w	r8, #1
 80069cc:	f040 80ee 	bne.w	8006bac <_dtoa_r+0x6bc>
 80069d0:	4649      	mov	r1, r9
 80069d2:	4658      	mov	r0, fp
 80069d4:	f000 fc90 	bl	80072f8 <_Bfree>
 80069d8:	2300      	movs	r3, #0
 80069da:	7033      	strb	r3, [r6, #0]
 80069dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069de:	3701      	adds	r7, #1
 80069e0:	601f      	str	r7, [r3, #0]
 80069e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 831d 	beq.w	8007024 <_dtoa_r+0xb34>
 80069ea:	601e      	str	r6, [r3, #0]
 80069ec:	e31a      	b.n	8007024 <_dtoa_r+0xb34>
 80069ee:	07e2      	lsls	r2, r4, #31
 80069f0:	d505      	bpl.n	80069fe <_dtoa_r+0x50e>
 80069f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069f6:	f7f9 fe17 	bl	8000628 <__aeabi_dmul>
 80069fa:	3601      	adds	r6, #1
 80069fc:	2301      	movs	r3, #1
 80069fe:	1064      	asrs	r4, r4, #1
 8006a00:	3508      	adds	r5, #8
 8006a02:	e73f      	b.n	8006884 <_dtoa_r+0x394>
 8006a04:	2602      	movs	r6, #2
 8006a06:	e742      	b.n	800688e <_dtoa_r+0x39e>
 8006a08:	9c07      	ldr	r4, [sp, #28]
 8006a0a:	9704      	str	r7, [sp, #16]
 8006a0c:	e761      	b.n	80068d2 <_dtoa_r+0x3e2>
 8006a0e:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <_dtoa_r+0x5bc>)
 8006a10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a1a:	4454      	add	r4, sl
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d053      	beq.n	8006ac8 <_dtoa_r+0x5d8>
 8006a20:	4928      	ldr	r1, [pc, #160]	@ (8006ac4 <_dtoa_r+0x5d4>)
 8006a22:	2000      	movs	r0, #0
 8006a24:	f7f9 ff2a 	bl	800087c <__aeabi_ddiv>
 8006a28:	4633      	mov	r3, r6
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	f7f9 fc44 	bl	80002b8 <__aeabi_dsub>
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	4656      	mov	r6, sl
 8006a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3a:	f7fa f8a5 	bl	8000b88 <__aeabi_d2iz>
 8006a3e:	4605      	mov	r5, r0
 8006a40:	f7f9 fd88 	bl	8000554 <__aeabi_i2d>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4c:	f7f9 fc34 	bl	80002b8 <__aeabi_dsub>
 8006a50:	3530      	adds	r5, #48	@ 0x30
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a5a:	f806 5b01 	strb.w	r5, [r6], #1
 8006a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a62:	f7fa f853 	bl	8000b0c <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d171      	bne.n	8006b4e <_dtoa_r+0x65e>
 8006a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a6e:	4911      	ldr	r1, [pc, #68]	@ (8006ab4 <_dtoa_r+0x5c4>)
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7f9 fc21 	bl	80002b8 <__aeabi_dsub>
 8006a76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a7a:	f7fa f847 	bl	8000b0c <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f040 8095 	bne.w	8006bae <_dtoa_r+0x6be>
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	f43f af50 	beq.w	800692a <_dtoa_r+0x43a>
 8006a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <_dtoa_r+0x5c8>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	f7f9 fdc9 	bl	8000628 <__aeabi_dmul>
 8006a96:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <_dtoa_r+0x5c8>)
 8006a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa2:	f7f9 fdc1 	bl	8000628 <__aeabi_dmul>
 8006aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aaa:	e7c4      	b.n	8006a36 <_dtoa_r+0x546>
 8006aac:	08008660 	.word	0x08008660
 8006ab0:	08008638 	.word	0x08008638
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	401c0000 	.word	0x401c0000
 8006ac0:	40140000 	.word	0x40140000
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7f9 fdac 	bl	8000628 <__aeabi_dmul>
 8006ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ad4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ad6:	4656      	mov	r6, sl
 8006ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006adc:	f7fa f854 	bl	8000b88 <__aeabi_d2iz>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	f7f9 fd37 	bl	8000554 <__aeabi_i2d>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aee:	f7f9 fbe3 	bl	80002b8 <__aeabi_dsub>
 8006af2:	3530      	adds	r5, #48	@ 0x30
 8006af4:	f806 5b01 	strb.w	r5, [r6], #1
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	42a6      	cmp	r6, r4
 8006afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	d124      	bne.n	8006b52 <_dtoa_r+0x662>
 8006b08:	4bac      	ldr	r3, [pc, #688]	@ (8006dbc <_dtoa_r+0x8cc>)
 8006b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b0e:	f7f9 fbd5 	bl	80002bc <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1a:	f7fa f815 	bl	8000b48 <__aeabi_dcmpgt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d145      	bne.n	8006bae <_dtoa_r+0x6be>
 8006b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b26:	49a5      	ldr	r1, [pc, #660]	@ (8006dbc <_dtoa_r+0x8cc>)
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f7f9 fbc5 	bl	80002b8 <__aeabi_dsub>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b36:	f7f9 ffe9 	bl	8000b0c <__aeabi_dcmplt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f43f aef5 	beq.w	800692a <_dtoa_r+0x43a>
 8006b40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b42:	1e73      	subs	r3, r6, #1
 8006b44:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b4a:	2b30      	cmp	r3, #48	@ 0x30
 8006b4c:	d0f8      	beq.n	8006b40 <_dtoa_r+0x650>
 8006b4e:	9f04      	ldr	r7, [sp, #16]
 8006b50:	e73e      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006b52:	4b9b      	ldr	r3, [pc, #620]	@ (8006dc0 <_dtoa_r+0x8d0>)
 8006b54:	f7f9 fd68 	bl	8000628 <__aeabi_dmul>
 8006b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5c:	e7bc      	b.n	8006ad8 <_dtoa_r+0x5e8>
 8006b5e:	d10c      	bne.n	8006b7a <_dtoa_r+0x68a>
 8006b60:	4b98      	ldr	r3, [pc, #608]	@ (8006dc4 <_dtoa_r+0x8d4>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b68:	f7f9 fd5e 	bl	8000628 <__aeabi_dmul>
 8006b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b70:	f7f9 ffe0 	bl	8000b34 <__aeabi_dcmpge>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f000 8157 	beq.w	8006e28 <_dtoa_r+0x938>
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	4625      	mov	r5, r4
 8006b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b80:	43db      	mvns	r3, r3
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	4656      	mov	r6, sl
 8006b86:	2700      	movs	r7, #0
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f000 fbb4 	bl	80072f8 <_Bfree>
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	d0dc      	beq.n	8006b4e <_dtoa_r+0x65e>
 8006b94:	b12f      	cbz	r7, 8006ba2 <_dtoa_r+0x6b2>
 8006b96:	42af      	cmp	r7, r5
 8006b98:	d003      	beq.n	8006ba2 <_dtoa_r+0x6b2>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	f000 fbab 	bl	80072f8 <_Bfree>
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 fba7 	bl	80072f8 <_Bfree>
 8006baa:	e7d0      	b.n	8006b4e <_dtoa_r+0x65e>
 8006bac:	9704      	str	r7, [sp, #16]
 8006bae:	4633      	mov	r3, r6
 8006bb0:	461e      	mov	r6, r3
 8006bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bb6:	2a39      	cmp	r2, #57	@ 0x39
 8006bb8:	d107      	bne.n	8006bca <_dtoa_r+0x6da>
 8006bba:	459a      	cmp	sl, r3
 8006bbc:	d1f8      	bne.n	8006bb0 <_dtoa_r+0x6c0>
 8006bbe:	9a04      	ldr	r2, [sp, #16]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	9204      	str	r2, [sp, #16]
 8006bc4:	2230      	movs	r2, #48	@ 0x30
 8006bc6:	f88a 2000 	strb.w	r2, [sl]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	3201      	adds	r2, #1
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e7bd      	b.n	8006b4e <_dtoa_r+0x65e>
 8006bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc0 <_dtoa_r+0x8d0>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f7f9 fd27 	bl	8000628 <__aeabi_dmul>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	460d      	mov	r5, r1
 8006be2:	f7f9 ff89 	bl	8000af8 <__aeabi_dcmpeq>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f aebb 	beq.w	8006962 <_dtoa_r+0x472>
 8006bec:	e6f0      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006bee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	f000 80db 	beq.w	8006dac <_dtoa_r+0x8bc>
 8006bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf8:	2a01      	cmp	r2, #1
 8006bfa:	f300 80bf 	bgt.w	8006d7c <_dtoa_r+0x88c>
 8006bfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	f000 80b7 	beq.w	8006d74 <_dtoa_r+0x884>
 8006c06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c0c:	4646      	mov	r6, r8
 8006c0e:	9a08      	ldr	r2, [sp, #32]
 8006c10:	2101      	movs	r1, #1
 8006c12:	441a      	add	r2, r3
 8006c14:	4658      	mov	r0, fp
 8006c16:	4498      	add	r8, r3
 8006c18:	9208      	str	r2, [sp, #32]
 8006c1a:	f000 fc21 	bl	8007460 <__i2b>
 8006c1e:	4605      	mov	r5, r0
 8006c20:	b15e      	cbz	r6, 8006c3a <_dtoa_r+0x74a>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dd08      	ble.n	8006c3a <_dtoa_r+0x74a>
 8006c28:	42b3      	cmp	r3, r6
 8006c2a:	9a08      	ldr	r2, [sp, #32]
 8006c2c:	bfa8      	it	ge
 8006c2e:	4633      	movge	r3, r6
 8006c30:	eba8 0803 	sub.w	r8, r8, r3
 8006c34:	1af6      	subs	r6, r6, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	9308      	str	r3, [sp, #32]
 8006c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c3c:	b1f3      	cbz	r3, 8006c7c <_dtoa_r+0x78c>
 8006c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80b7 	beq.w	8006db4 <_dtoa_r+0x8c4>
 8006c46:	b18c      	cbz	r4, 8006c6c <_dtoa_r+0x77c>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	f000 fcc7 	bl	80075e0 <__pow5mult>
 8006c52:	464a      	mov	r2, r9
 8006c54:	4601      	mov	r1, r0
 8006c56:	4605      	mov	r5, r0
 8006c58:	4658      	mov	r0, fp
 8006c5a:	f000 fc17 	bl	800748c <__multiply>
 8006c5e:	4649      	mov	r1, r9
 8006c60:	9004      	str	r0, [sp, #16]
 8006c62:	4658      	mov	r0, fp
 8006c64:	f000 fb48 	bl	80072f8 <_Bfree>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	4699      	mov	r9, r3
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c6e:	1b1a      	subs	r2, r3, r4
 8006c70:	d004      	beq.n	8006c7c <_dtoa_r+0x78c>
 8006c72:	4649      	mov	r1, r9
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fcb3 	bl	80075e0 <__pow5mult>
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f000 fbee 	bl	8007460 <__i2b>
 8006c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c86:	4604      	mov	r4, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 81cf 	beq.w	800702c <_dtoa_r+0xb3c>
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4601      	mov	r1, r0
 8006c92:	4658      	mov	r0, fp
 8006c94:	f000 fca4 	bl	80075e0 <__pow5mult>
 8006c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	f300 8095 	bgt.w	8006dcc <_dtoa_r+0x8dc>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 8087 	bne.w	8006db8 <_dtoa_r+0x8c8>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8089 	bne.w	8006dc8 <_dtoa_r+0x8d8>
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cbc:	0d1b      	lsrs	r3, r3, #20
 8006cbe:	051b      	lsls	r3, r3, #20
 8006cc0:	b12b      	cbz	r3, 8006cce <_dtoa_r+0x7de>
 8006cc2:	9b08      	ldr	r3, [sp, #32]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	9308      	str	r3, [sp, #32]
 8006cc8:	f108 0801 	add.w	r8, r8, #1
 8006ccc:	2301      	movs	r3, #1
 8006cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 81b0 	beq.w	8007038 <_dtoa_r+0xb48>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cde:	6918      	ldr	r0, [r3, #16]
 8006ce0:	f000 fb72 	bl	80073c8 <__hi0bits>
 8006ce4:	f1c0 0020 	rsb	r0, r0, #32
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	4418      	add	r0, r3
 8006cec:	f010 001f 	ands.w	r0, r0, #31
 8006cf0:	d077      	beq.n	8006de2 <_dtoa_r+0x8f2>
 8006cf2:	f1c0 0320 	rsb	r3, r0, #32
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	dd6b      	ble.n	8006dd2 <_dtoa_r+0x8e2>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	f1c0 001c 	rsb	r0, r0, #28
 8006d00:	4403      	add	r3, r0
 8006d02:	4480      	add	r8, r0
 8006d04:	4406      	add	r6, r0
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	dd05      	ble.n	8006d1a <_dtoa_r+0x82a>
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4642      	mov	r2, r8
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 fcbe 	bl	8007694 <__lshift>
 8006d18:	4681      	mov	r9, r0
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dd05      	ble.n	8006d2c <_dtoa_r+0x83c>
 8006d20:	4621      	mov	r1, r4
 8006d22:	461a      	mov	r2, r3
 8006d24:	4658      	mov	r0, fp
 8006d26:	f000 fcb5 	bl	8007694 <__lshift>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d059      	beq.n	8006de6 <_dtoa_r+0x8f6>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4648      	mov	r0, r9
 8006d36:	f000 fd19 	bl	800776c <__mcmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	da53      	bge.n	8006de6 <_dtoa_r+0x8f6>
 8006d3e:	1e7b      	subs	r3, r7, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	4649      	mov	r1, r9
 8006d44:	2300      	movs	r3, #0
 8006d46:	220a      	movs	r2, #10
 8006d48:	4658      	mov	r0, fp
 8006d4a:	f000 faf7 	bl	800733c <__multadd>
 8006d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d50:	4681      	mov	r9, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8172 	beq.w	800703c <_dtoa_r+0xb4c>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f000 faec 	bl	800733c <__multadd>
 8006d64:	9b00      	ldr	r3, [sp, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	4605      	mov	r5, r0
 8006d6a:	dc67      	bgt.n	8006e3c <_dtoa_r+0x94c>
 8006d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	dc41      	bgt.n	8006df6 <_dtoa_r+0x906>
 8006d72:	e063      	b.n	8006e3c <_dtoa_r+0x94c>
 8006d74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d7a:	e746      	b.n	8006c0a <_dtoa_r+0x71a>
 8006d7c:	9b07      	ldr	r3, [sp, #28]
 8006d7e:	1e5c      	subs	r4, r3, #1
 8006d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	bfbf      	itttt	lt
 8006d86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d8c:	1ae3      	sublt	r3, r4, r3
 8006d8e:	bfb4      	ite	lt
 8006d90:	18d2      	addlt	r2, r2, r3
 8006d92:	1b1c      	subge	r4, r3, r4
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	bfbc      	itt	lt
 8006d98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d9a:	2400      	movlt	r4, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bfb5      	itete	lt
 8006da0:	eba8 0603 	sublt.w	r6, r8, r3
 8006da4:	9b07      	ldrge	r3, [sp, #28]
 8006da6:	2300      	movlt	r3, #0
 8006da8:	4646      	movge	r6, r8
 8006daa:	e730      	b.n	8006c0e <_dtoa_r+0x71e>
 8006dac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006db0:	4646      	mov	r6, r8
 8006db2:	e735      	b.n	8006c20 <_dtoa_r+0x730>
 8006db4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006db6:	e75c      	b.n	8006c72 <_dtoa_r+0x782>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e788      	b.n	8006cce <_dtoa_r+0x7de>
 8006dbc:	3fe00000 	.word	0x3fe00000
 8006dc0:	40240000 	.word	0x40240000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	e780      	b.n	8006cce <_dtoa_r+0x7de>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd0:	e782      	b.n	8006cd8 <_dtoa_r+0x7e8>
 8006dd2:	d099      	beq.n	8006d08 <_dtoa_r+0x818>
 8006dd4:	9a08      	ldr	r2, [sp, #32]
 8006dd6:	331c      	adds	r3, #28
 8006dd8:	441a      	add	r2, r3
 8006dda:	4498      	add	r8, r3
 8006ddc:	441e      	add	r6, r3
 8006dde:	9208      	str	r2, [sp, #32]
 8006de0:	e792      	b.n	8006d08 <_dtoa_r+0x818>
 8006de2:	4603      	mov	r3, r0
 8006de4:	e7f6      	b.n	8006dd4 <_dtoa_r+0x8e4>
 8006de6:	9b07      	ldr	r3, [sp, #28]
 8006de8:	9704      	str	r7, [sp, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dc20      	bgt.n	8006e30 <_dtoa_r+0x940>
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	dd1e      	ble.n	8006e34 <_dtoa_r+0x944>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f aec0 	bne.w	8006b7e <_dtoa_r+0x68e>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	2205      	movs	r2, #5
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fa9a 	bl	800733c <__multadd>
 8006e08:	4601      	mov	r1, r0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4648      	mov	r0, r9
 8006e0e:	f000 fcad 	bl	800776c <__mcmp>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f77f aeb3 	ble.w	8006b7e <_dtoa_r+0x68e>
 8006e18:	4656      	mov	r6, sl
 8006e1a:	2331      	movs	r3, #49	@ 0x31
 8006e1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	3301      	adds	r3, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	e6ae      	b.n	8006b86 <_dtoa_r+0x696>
 8006e28:	9c07      	ldr	r4, [sp, #28]
 8006e2a:	9704      	str	r7, [sp, #16]
 8006e2c:	4625      	mov	r5, r4
 8006e2e:	e7f3      	b.n	8006e18 <_dtoa_r+0x928>
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 8104 	beq.w	8007044 <_dtoa_r+0xb54>
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	dd05      	ble.n	8006e4c <_dtoa_r+0x95c>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4632      	mov	r2, r6
 8006e44:	4658      	mov	r0, fp
 8006e46:	f000 fc25 	bl	8007694 <__lshift>
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d05a      	beq.n	8006f08 <_dtoa_r+0xa18>
 8006e52:	6869      	ldr	r1, [r5, #4]
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 fa0f 	bl	8007278 <_Balloc>
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <_dtoa_r+0x97a>
 8006e5e:	4b84      	ldr	r3, [pc, #528]	@ (8007070 <_dtoa_r+0xb80>)
 8006e60:	4602      	mov	r2, r0
 8006e62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e66:	f7ff bb5a 	b.w	800651e <_dtoa_r+0x2e>
 8006e6a:	692a      	ldr	r2, [r5, #16]
 8006e6c:	3202      	adds	r2, #2
 8006e6e:	0092      	lsls	r2, r2, #2
 8006e70:	f105 010c 	add.w	r1, r5, #12
 8006e74:	300c      	adds	r0, #12
 8006e76:	f001 f987 	bl	8008188 <memcpy>
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f000 fc08 	bl	8007694 <__lshift>
 8006e84:	f10a 0301 	add.w	r3, sl, #1
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	9b00      	ldr	r3, [sp, #0]
 8006e8c:	4453      	add	r3, sl
 8006e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e90:	9b02      	ldr	r3, [sp, #8]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	462f      	mov	r7, r5
 8006e98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	9b07      	ldr	r3, [sp, #28]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f7ff fa9b 	bl	80063e0 <quorem>
 8006eaa:	4639      	mov	r1, r7
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f000 fc5a 	bl	800776c <__mcmp>
 8006eb8:	462a      	mov	r2, r5
 8006eba:	9008      	str	r0, [sp, #32]
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fc70 	bl	80077a4 <__mdiff>
 8006ec4:	68c2      	ldr	r2, [r0, #12]
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	bb02      	cbnz	r2, 8006f0c <_dtoa_r+0xa1c>
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fc4d 	bl	800776c <__mcmp>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eda:	f000 fa0d 	bl	80072f8 <_Bfree>
 8006ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee2:	9e07      	ldr	r6, [sp, #28]
 8006ee4:	ea43 0102 	orr.w	r1, r3, r2
 8006ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eea:	4319      	orrs	r1, r3
 8006eec:	d110      	bne.n	8006f10 <_dtoa_r+0xa20>
 8006eee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ef2:	d029      	beq.n	8006f48 <_dtoa_r+0xa58>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd02      	ble.n	8006f00 <_dtoa_r+0xa10>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	f883 8000 	strb.w	r8, [r3]
 8006f06:	e63f      	b.n	8006b88 <_dtoa_r+0x698>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	e7bb      	b.n	8006e84 <_dtoa_r+0x994>
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	e7e1      	b.n	8006ed4 <_dtoa_r+0x9e4>
 8006f10:	9b08      	ldr	r3, [sp, #32]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db04      	blt.n	8006f20 <_dtoa_r+0xa30>
 8006f16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	d120      	bne.n	8006f62 <_dtoa_r+0xa72>
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	dded      	ble.n	8006f00 <_dtoa_r+0xa10>
 8006f24:	4649      	mov	r1, r9
 8006f26:	2201      	movs	r2, #1
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f000 fbb3 	bl	8007694 <__lshift>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4681      	mov	r9, r0
 8006f32:	f000 fc1b 	bl	800776c <__mcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dc03      	bgt.n	8006f42 <_dtoa_r+0xa52>
 8006f3a:	d1e1      	bne.n	8006f00 <_dtoa_r+0xa10>
 8006f3c:	f018 0f01 	tst.w	r8, #1
 8006f40:	d0de      	beq.n	8006f00 <_dtoa_r+0xa10>
 8006f42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f46:	d1d8      	bne.n	8006efa <_dtoa_r+0xa0a>
 8006f48:	9a00      	ldr	r2, [sp, #0]
 8006f4a:	2339      	movs	r3, #57	@ 0x39
 8006f4c:	7013      	strb	r3, [r2, #0]
 8006f4e:	4633      	mov	r3, r6
 8006f50:	461e      	mov	r6, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f58:	2a39      	cmp	r2, #57	@ 0x39
 8006f5a:	d052      	beq.n	8007002 <_dtoa_r+0xb12>
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e612      	b.n	8006b88 <_dtoa_r+0x698>
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	dd07      	ble.n	8006f76 <_dtoa_r+0xa86>
 8006f66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f6a:	d0ed      	beq.n	8006f48 <_dtoa_r+0xa58>
 8006f6c:	9a00      	ldr	r2, [sp, #0]
 8006f6e:	f108 0301 	add.w	r3, r8, #1
 8006f72:	7013      	strb	r3, [r2, #0]
 8006f74:	e608      	b.n	8006b88 <_dtoa_r+0x698>
 8006f76:	9b07      	ldr	r3, [sp, #28]
 8006f78:	9a07      	ldr	r2, [sp, #28]
 8006f7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d028      	beq.n	8006fd6 <_dtoa_r+0xae6>
 8006f84:	4649      	mov	r1, r9
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 f9d6 	bl	800733c <__multadd>
 8006f90:	42af      	cmp	r7, r5
 8006f92:	4681      	mov	r9, r0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	f04f 020a 	mov.w	r2, #10
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	d107      	bne.n	8006fb2 <_dtoa_r+0xac2>
 8006fa2:	f000 f9cb 	bl	800733c <__multadd>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	4605      	mov	r5, r0
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	e774      	b.n	8006e9c <_dtoa_r+0x9ac>
 8006fb2:	f000 f9c3 	bl	800733c <__multadd>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	f000 f9bc 	bl	800733c <__multadd>
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	e7f0      	b.n	8006faa <_dtoa_r+0xaba>
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfcc      	ite	gt
 8006fce:	461e      	movgt	r6, r3
 8006fd0:	2601      	movle	r6, #1
 8006fd2:	4456      	add	r6, sl
 8006fd4:	2700      	movs	r7, #0
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	2201      	movs	r2, #1
 8006fda:	4658      	mov	r0, fp
 8006fdc:	f000 fb5a 	bl	8007694 <__lshift>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4681      	mov	r9, r0
 8006fe4:	f000 fbc2 	bl	800776c <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dcb0      	bgt.n	8006f4e <_dtoa_r+0xa5e>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xb04>
 8006fee:	f018 0f01 	tst.w	r8, #1
 8006ff2:	d1ac      	bne.n	8006f4e <_dtoa_r+0xa5e>
 8006ff4:	4633      	mov	r3, r6
 8006ff6:	461e      	mov	r6, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	@ 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xb06>
 8007000:	e5c2      	b.n	8006b88 <_dtoa_r+0x698>
 8007002:	459a      	cmp	sl, r3
 8007004:	d1a4      	bne.n	8006f50 <_dtoa_r+0xa60>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	3301      	adds	r3, #1
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	2331      	movs	r3, #49	@ 0x31
 800700e:	f88a 3000 	strb.w	r3, [sl]
 8007012:	e5b9      	b.n	8006b88 <_dtoa_r+0x698>
 8007014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007016:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007074 <_dtoa_r+0xb84>
 800701a:	b11b      	cbz	r3, 8007024 <_dtoa_r+0xb34>
 800701c:	f10a 0308 	add.w	r3, sl, #8
 8007020:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	4650      	mov	r0, sl
 8007026:	b019      	add	sp, #100	@ 0x64
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800702e:	2b01      	cmp	r3, #1
 8007030:	f77f ae37 	ble.w	8006ca2 <_dtoa_r+0x7b2>
 8007034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007036:	930a      	str	r3, [sp, #40]	@ 0x28
 8007038:	2001      	movs	r0, #1
 800703a:	e655      	b.n	8006ce8 <_dtoa_r+0x7f8>
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f77f aed6 	ble.w	8006df0 <_dtoa_r+0x900>
 8007044:	4656      	mov	r6, sl
 8007046:	4621      	mov	r1, r4
 8007048:	4648      	mov	r0, r9
 800704a:	f7ff f9c9 	bl	80063e0 <quorem>
 800704e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007052:	f806 8b01 	strb.w	r8, [r6], #1
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	eba6 020a 	sub.w	r2, r6, sl
 800705c:	4293      	cmp	r3, r2
 800705e:	ddb3      	ble.n	8006fc8 <_dtoa_r+0xad8>
 8007060:	4649      	mov	r1, r9
 8007062:	2300      	movs	r3, #0
 8007064:	220a      	movs	r2, #10
 8007066:	4658      	mov	r0, fp
 8007068:	f000 f968 	bl	800733c <__multadd>
 800706c:	4681      	mov	r9, r0
 800706e:	e7ea      	b.n	8007046 <_dtoa_r+0xb56>
 8007070:	080085be 	.word	0x080085be
 8007074:	08008559 	.word	0x08008559

08007078 <_free_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4605      	mov	r5, r0
 800707c:	2900      	cmp	r1, #0
 800707e:	d041      	beq.n	8007104 <_free_r+0x8c>
 8007080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007084:	1f0c      	subs	r4, r1, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb8      	it	lt
 800708a:	18e4      	addlt	r4, r4, r3
 800708c:	f000 f8e8 	bl	8007260 <__malloc_lock>
 8007090:	4a1d      	ldr	r2, [pc, #116]	@ (8007108 <_free_r+0x90>)
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	b933      	cbnz	r3, 80070a4 <_free_r+0x2c>
 8007096:	6063      	str	r3, [r4, #4]
 8007098:	6014      	str	r4, [r2, #0]
 800709a:	4628      	mov	r0, r5
 800709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a0:	f000 b8e4 	b.w	800726c <__malloc_unlock>
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d908      	bls.n	80070ba <_free_r+0x42>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	1821      	adds	r1, r4, r0
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf01      	itttt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	1809      	addeq	r1, r1, r0
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	e7ed      	b.n	8007096 <_free_r+0x1e>
 80070ba:	461a      	mov	r2, r3
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b10b      	cbz	r3, 80070c4 <_free_r+0x4c>
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x42>
 80070c4:	6811      	ldr	r1, [r2, #0]
 80070c6:	1850      	adds	r0, r2, r1
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x6c>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	4401      	add	r1, r0
 80070d0:	1850      	adds	r0, r2, r1
 80070d2:	4283      	cmp	r3, r0
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	d1e0      	bne.n	800709a <_free_r+0x22>
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	4408      	add	r0, r1
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e7da      	b.n	800709a <_free_r+0x22>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x74>
 80070e6:	230c      	movs	r3, #12
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	e7d6      	b.n	800709a <_free_r+0x22>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1809      	addeq	r1, r1, r0
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	6054      	str	r4, [r2, #4]
 8007102:	e7ca      	b.n	800709a <_free_r+0x22>
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	200005d4 	.word	0x200005d4

0800710c <malloc>:
 800710c:	4b02      	ldr	r3, [pc, #8]	@ (8007118 <malloc+0xc>)
 800710e:	4601      	mov	r1, r0
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f000 b825 	b.w	8007160 <_malloc_r>
 8007116:	bf00      	nop
 8007118:	20000044 	.word	0x20000044

0800711c <sbrk_aligned>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4e0f      	ldr	r6, [pc, #60]	@ (800715c <sbrk_aligned+0x40>)
 8007120:	460c      	mov	r4, r1
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	b911      	cbnz	r1, 800712e <sbrk_aligned+0x12>
 8007128:	f001 f81e 	bl	8008168 <_sbrk_r>
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f001 f819 	bl	8008168 <_sbrk_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d103      	bne.n	8007142 <sbrk_aligned+0x26>
 800713a:	f04f 34ff 	mov.w	r4, #4294967295
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0f8      	beq.n	800713e <sbrk_aligned+0x22>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f001 f80a 	bl	8008168 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1f2      	bne.n	800713e <sbrk_aligned+0x22>
 8007158:	e7ef      	b.n	800713a <sbrk_aligned+0x1e>
 800715a:	bf00      	nop
 800715c:	200005d0 	.word	0x200005d0

08007160 <_malloc_r>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4606      	mov	r6, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d904      	bls.n	8007186 <_malloc_r+0x26>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800725c <_malloc_r+0xfc>
 800718a:	f000 f869 	bl	8007260 <__malloc_lock>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	461c      	mov	r4, r3
 8007194:	bb44      	cbnz	r4, 80071e8 <_malloc_r+0x88>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbf 	bl	800711c <sbrk_aligned>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	4604      	mov	r4, r0
 80071a2:	d158      	bne.n	8007256 <_malloc_r+0xf6>
 80071a4:	f8d8 4000 	ldr.w	r4, [r8]
 80071a8:	4627      	mov	r7, r4
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d143      	bne.n	8007236 <_malloc_r+0xd6>
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d04b      	beq.n	800724a <_malloc_r+0xea>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	eb04 0903 	add.w	r9, r4, r3
 80071bc:	f000 ffd4 	bl	8008168 <_sbrk_r>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d142      	bne.n	800724a <_malloc_r+0xea>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	1a6d      	subs	r5, r5, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ffa6 	bl	800711c <sbrk_aligned>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d03a      	beq.n	800724a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	442b      	add	r3, r5
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	bb62      	cbnz	r2, 800723c <_malloc_r+0xdc>
 80071e2:	f8c8 7000 	str.w	r7, [r8]
 80071e6:	e00f      	b.n	8007208 <_malloc_r+0xa8>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	d420      	bmi.n	8007230 <_malloc_r+0xd0>
 80071ee:	2a0b      	cmp	r2, #11
 80071f0:	d917      	bls.n	8007222 <_malloc_r+0xc2>
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	bf18      	it	ne
 80071fa:	6059      	strne	r1, [r3, #4]
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	bf08      	it	eq
 8007200:	f8c8 1000 	streq.w	r1, [r8]
 8007204:	5162      	str	r2, [r4, r5]
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f82f 	bl	800726c <__malloc_unlock>
 800720e:	f104 000b 	add.w	r0, r4, #11
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	f020 0007 	bic.w	r0, r0, #7
 8007218:	1ac2      	subs	r2, r0, r3
 800721a:	bf1c      	itt	ne
 800721c:	1a1b      	subne	r3, r3, r0
 800721e:	50a3      	strne	r3, [r4, r2]
 8007220:	e7af      	b.n	8007182 <_malloc_r+0x22>
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	bf0c      	ite	eq
 8007228:	f8c8 2000 	streq.w	r2, [r8]
 800722c:	605a      	strne	r2, [r3, #4]
 800722e:	e7eb      	b.n	8007208 <_malloc_r+0xa8>
 8007230:	4623      	mov	r3, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7ae      	b.n	8007194 <_malloc_r+0x34>
 8007236:	463c      	mov	r4, r7
 8007238:	687f      	ldr	r7, [r7, #4]
 800723a:	e7b6      	b.n	80071aa <_malloc_r+0x4a>
 800723c:	461a      	mov	r2, r3
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	42a3      	cmp	r3, r4
 8007242:	d1fb      	bne.n	800723c <_malloc_r+0xdc>
 8007244:	2300      	movs	r3, #0
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e7de      	b.n	8007208 <_malloc_r+0xa8>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f80c 	bl	800726c <__malloc_unlock>
 8007254:	e794      	b.n	8007180 <_malloc_r+0x20>
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	e7d6      	b.n	8007208 <_malloc_r+0xa8>
 800725a:	bf00      	nop
 800725c:	200005d4 	.word	0x200005d4

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff b894 	b.w	800638e <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	200005cc 	.word	0x200005cc

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff b88f 	b.w	8006390 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	200005cc 	.word	0x200005cc

08007278 <_Balloc>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	69c6      	ldr	r6, [r0, #28]
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	b976      	cbnz	r6, 80072a0 <_Balloc+0x28>
 8007282:	2010      	movs	r0, #16
 8007284:	f7ff ff42 	bl	800710c <malloc>
 8007288:	4602      	mov	r2, r0
 800728a:	61e0      	str	r0, [r4, #28]
 800728c:	b920      	cbnz	r0, 8007298 <_Balloc+0x20>
 800728e:	4b18      	ldr	r3, [pc, #96]	@ (80072f0 <_Balloc+0x78>)
 8007290:	4818      	ldr	r0, [pc, #96]	@ (80072f4 <_Balloc+0x7c>)
 8007292:	216b      	movs	r1, #107	@ 0x6b
 8007294:	f7ff f886 	bl	80063a4 <__assert_func>
 8007298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800729c:	6006      	str	r6, [r0, #0]
 800729e:	60c6      	str	r6, [r0, #12]
 80072a0:	69e6      	ldr	r6, [r4, #28]
 80072a2:	68f3      	ldr	r3, [r6, #12]
 80072a4:	b183      	cbz	r3, 80072c8 <_Balloc+0x50>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ae:	b9b8      	cbnz	r0, 80072e0 <_Balloc+0x68>
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f605 	lsl.w	r6, r1, r5
 80072b6:	1d72      	adds	r2, r6, #5
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 ff79 	bl	80081b2 <_calloc_r>
 80072c0:	b160      	cbz	r0, 80072dc <_Balloc+0x64>
 80072c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072c6:	e00e      	b.n	80072e6 <_Balloc+0x6e>
 80072c8:	2221      	movs	r2, #33	@ 0x21
 80072ca:	2104      	movs	r1, #4
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 ff70 	bl	80081b2 <_calloc_r>
 80072d2:	69e3      	ldr	r3, [r4, #28]
 80072d4:	60f0      	str	r0, [r6, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e4      	bne.n	80072a6 <_Balloc+0x2e>
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	6802      	ldr	r2, [r0, #0]
 80072e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072e6:	2300      	movs	r3, #0
 80072e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072ec:	e7f7      	b.n	80072de <_Balloc+0x66>
 80072ee:	bf00      	nop
 80072f0:	080084ac 	.word	0x080084ac
 80072f4:	080085cf 	.word	0x080085cf

080072f8 <_Bfree>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	69c6      	ldr	r6, [r0, #28]
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b976      	cbnz	r6, 8007320 <_Bfree+0x28>
 8007302:	2010      	movs	r0, #16
 8007304:	f7ff ff02 	bl	800710c <malloc>
 8007308:	4602      	mov	r2, r0
 800730a:	61e8      	str	r0, [r5, #28]
 800730c:	b920      	cbnz	r0, 8007318 <_Bfree+0x20>
 800730e:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <_Bfree+0x3c>)
 8007310:	4809      	ldr	r0, [pc, #36]	@ (8007338 <_Bfree+0x40>)
 8007312:	218f      	movs	r1, #143	@ 0x8f
 8007314:	f7ff f846 	bl	80063a4 <__assert_func>
 8007318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800731c:	6006      	str	r6, [r0, #0]
 800731e:	60c6      	str	r6, [r0, #12]
 8007320:	b13c      	cbz	r4, 8007332 <_Bfree+0x3a>
 8007322:	69eb      	ldr	r3, [r5, #28]
 8007324:	6862      	ldr	r2, [r4, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800732c:	6021      	str	r1, [r4, #0]
 800732e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	080084ac 	.word	0x080084ac
 8007338:	080085cf 	.word	0x080085cf

0800733c <__multadd>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	690d      	ldr	r5, [r1, #16]
 8007342:	4607      	mov	r7, r0
 8007344:	460c      	mov	r4, r1
 8007346:	461e      	mov	r6, r3
 8007348:	f101 0c14 	add.w	ip, r1, #20
 800734c:	2000      	movs	r0, #0
 800734e:	f8dc 3000 	ldr.w	r3, [ip]
 8007352:	b299      	uxth	r1, r3
 8007354:	fb02 6101 	mla	r1, r2, r1, r6
 8007358:	0c1e      	lsrs	r6, r3, #16
 800735a:	0c0b      	lsrs	r3, r1, #16
 800735c:	fb02 3306 	mla	r3, r2, r6, r3
 8007360:	b289      	uxth	r1, r1
 8007362:	3001      	adds	r0, #1
 8007364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007368:	4285      	cmp	r5, r0
 800736a:	f84c 1b04 	str.w	r1, [ip], #4
 800736e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007372:	dcec      	bgt.n	800734e <__multadd+0x12>
 8007374:	b30e      	cbz	r6, 80073ba <__multadd+0x7e>
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	42ab      	cmp	r3, r5
 800737a:	dc19      	bgt.n	80073b0 <__multadd+0x74>
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	4638      	mov	r0, r7
 8007380:	3101      	adds	r1, #1
 8007382:	f7ff ff79 	bl	8007278 <_Balloc>
 8007386:	4680      	mov	r8, r0
 8007388:	b928      	cbnz	r0, 8007396 <__multadd+0x5a>
 800738a:	4602      	mov	r2, r0
 800738c:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <__multadd+0x84>)
 800738e:	480d      	ldr	r0, [pc, #52]	@ (80073c4 <__multadd+0x88>)
 8007390:	21ba      	movs	r1, #186	@ 0xba
 8007392:	f7ff f807 	bl	80063a4 <__assert_func>
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	3202      	adds	r2, #2
 800739a:	f104 010c 	add.w	r1, r4, #12
 800739e:	0092      	lsls	r2, r2, #2
 80073a0:	300c      	adds	r0, #12
 80073a2:	f000 fef1 	bl	8008188 <memcpy>
 80073a6:	4621      	mov	r1, r4
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff ffa5 	bl	80072f8 <_Bfree>
 80073ae:	4644      	mov	r4, r8
 80073b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073b4:	3501      	adds	r5, #1
 80073b6:	615e      	str	r6, [r3, #20]
 80073b8:	6125      	str	r5, [r4, #16]
 80073ba:	4620      	mov	r0, r4
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	080085be 	.word	0x080085be
 80073c4:	080085cf 	.word	0x080085cf

080073c8 <__hi0bits>:
 80073c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073cc:	4603      	mov	r3, r0
 80073ce:	bf36      	itet	cc
 80073d0:	0403      	lslcc	r3, r0, #16
 80073d2:	2000      	movcs	r0, #0
 80073d4:	2010      	movcc	r0, #16
 80073d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073da:	bf3c      	itt	cc
 80073dc:	021b      	lslcc	r3, r3, #8
 80073de:	3008      	addcc	r0, #8
 80073e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e4:	bf3c      	itt	cc
 80073e6:	011b      	lslcc	r3, r3, #4
 80073e8:	3004      	addcc	r0, #4
 80073ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ee:	bf3c      	itt	cc
 80073f0:	009b      	lslcc	r3, r3, #2
 80073f2:	3002      	addcc	r0, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	db05      	blt.n	8007404 <__hi0bits+0x3c>
 80073f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073fc:	f100 0001 	add.w	r0, r0, #1
 8007400:	bf08      	it	eq
 8007402:	2020      	moveq	r0, #32
 8007404:	4770      	bx	lr

08007406 <__lo0bits>:
 8007406:	6803      	ldr	r3, [r0, #0]
 8007408:	4602      	mov	r2, r0
 800740a:	f013 0007 	ands.w	r0, r3, #7
 800740e:	d00b      	beq.n	8007428 <__lo0bits+0x22>
 8007410:	07d9      	lsls	r1, r3, #31
 8007412:	d421      	bmi.n	8007458 <__lo0bits+0x52>
 8007414:	0798      	lsls	r0, r3, #30
 8007416:	bf49      	itett	mi
 8007418:	085b      	lsrmi	r3, r3, #1
 800741a:	089b      	lsrpl	r3, r3, #2
 800741c:	2001      	movmi	r0, #1
 800741e:	6013      	strmi	r3, [r2, #0]
 8007420:	bf5c      	itt	pl
 8007422:	6013      	strpl	r3, [r2, #0]
 8007424:	2002      	movpl	r0, #2
 8007426:	4770      	bx	lr
 8007428:	b299      	uxth	r1, r3
 800742a:	b909      	cbnz	r1, 8007430 <__lo0bits+0x2a>
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	2010      	movs	r0, #16
 8007430:	b2d9      	uxtb	r1, r3
 8007432:	b909      	cbnz	r1, 8007438 <__lo0bits+0x32>
 8007434:	3008      	adds	r0, #8
 8007436:	0a1b      	lsrs	r3, r3, #8
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	bf04      	itt	eq
 800743c:	091b      	lsreq	r3, r3, #4
 800743e:	3004      	addeq	r0, #4
 8007440:	0799      	lsls	r1, r3, #30
 8007442:	bf04      	itt	eq
 8007444:	089b      	lsreq	r3, r3, #2
 8007446:	3002      	addeq	r0, #2
 8007448:	07d9      	lsls	r1, r3, #31
 800744a:	d403      	bmi.n	8007454 <__lo0bits+0x4e>
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	f100 0001 	add.w	r0, r0, #1
 8007452:	d003      	beq.n	800745c <__lo0bits+0x56>
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	4770      	bx	lr
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr
 800745c:	2020      	movs	r0, #32
 800745e:	4770      	bx	lr

08007460 <__i2b>:
 8007460:	b510      	push	{r4, lr}
 8007462:	460c      	mov	r4, r1
 8007464:	2101      	movs	r1, #1
 8007466:	f7ff ff07 	bl	8007278 <_Balloc>
 800746a:	4602      	mov	r2, r0
 800746c:	b928      	cbnz	r0, 800747a <__i2b+0x1a>
 800746e:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <__i2b+0x24>)
 8007470:	4805      	ldr	r0, [pc, #20]	@ (8007488 <__i2b+0x28>)
 8007472:	f240 1145 	movw	r1, #325	@ 0x145
 8007476:	f7fe ff95 	bl	80063a4 <__assert_func>
 800747a:	2301      	movs	r3, #1
 800747c:	6144      	str	r4, [r0, #20]
 800747e:	6103      	str	r3, [r0, #16]
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	080085be 	.word	0x080085be
 8007488:	080085cf 	.word	0x080085cf

0800748c <__multiply>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4614      	mov	r4, r2
 8007492:	690a      	ldr	r2, [r1, #16]
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	bfa8      	it	ge
 800749a:	4623      	movge	r3, r4
 800749c:	460f      	mov	r7, r1
 800749e:	bfa4      	itt	ge
 80074a0:	460c      	movge	r4, r1
 80074a2:	461f      	movge	r7, r3
 80074a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	6861      	ldr	r1, [r4, #4]
 80074b0:	eb0a 0609 	add.w	r6, sl, r9
 80074b4:	42b3      	cmp	r3, r6
 80074b6:	b085      	sub	sp, #20
 80074b8:	bfb8      	it	lt
 80074ba:	3101      	addlt	r1, #1
 80074bc:	f7ff fedc 	bl	8007278 <_Balloc>
 80074c0:	b930      	cbnz	r0, 80074d0 <__multiply+0x44>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4b44      	ldr	r3, [pc, #272]	@ (80075d8 <__multiply+0x14c>)
 80074c6:	4845      	ldr	r0, [pc, #276]	@ (80075dc <__multiply+0x150>)
 80074c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074cc:	f7fe ff6a 	bl	80063a4 <__assert_func>
 80074d0:	f100 0514 	add.w	r5, r0, #20
 80074d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074d8:	462b      	mov	r3, r5
 80074da:	2200      	movs	r2, #0
 80074dc:	4543      	cmp	r3, r8
 80074de:	d321      	bcc.n	8007524 <__multiply+0x98>
 80074e0:	f107 0114 	add.w	r1, r7, #20
 80074e4:	f104 0214 	add.w	r2, r4, #20
 80074e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80074ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80074f0:	9302      	str	r3, [sp, #8]
 80074f2:	1b13      	subs	r3, r2, r4
 80074f4:	3b15      	subs	r3, #21
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	3304      	adds	r3, #4
 80074fc:	f104 0715 	add.w	r7, r4, #21
 8007500:	42ba      	cmp	r2, r7
 8007502:	bf38      	it	cc
 8007504:	2304      	movcc	r3, #4
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	9103      	str	r1, [sp, #12]
 800750c:	428b      	cmp	r3, r1
 800750e:	d80c      	bhi.n	800752a <__multiply+0x9e>
 8007510:	2e00      	cmp	r6, #0
 8007512:	dd03      	ble.n	800751c <__multiply+0x90>
 8007514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007518:	2b00      	cmp	r3, #0
 800751a:	d05b      	beq.n	80075d4 <__multiply+0x148>
 800751c:	6106      	str	r6, [r0, #16]
 800751e:	b005      	add	sp, #20
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	f843 2b04 	str.w	r2, [r3], #4
 8007528:	e7d8      	b.n	80074dc <__multiply+0x50>
 800752a:	f8b1 a000 	ldrh.w	sl, [r1]
 800752e:	f1ba 0f00 	cmp.w	sl, #0
 8007532:	d024      	beq.n	800757e <__multiply+0xf2>
 8007534:	f104 0e14 	add.w	lr, r4, #20
 8007538:	46a9      	mov	r9, r5
 800753a:	f04f 0c00 	mov.w	ip, #0
 800753e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007542:	f8d9 3000 	ldr.w	r3, [r9]
 8007546:	fa1f fb87 	uxth.w	fp, r7
 800754a:	b29b      	uxth	r3, r3
 800754c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007550:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007554:	f8d9 7000 	ldr.w	r7, [r9]
 8007558:	4463      	add	r3, ip
 800755a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800755e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007562:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800756c:	4572      	cmp	r2, lr
 800756e:	f849 3b04 	str.w	r3, [r9], #4
 8007572:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007576:	d8e2      	bhi.n	800753e <__multiply+0xb2>
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	f845 c003 	str.w	ip, [r5, r3]
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007584:	3104      	adds	r1, #4
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	d021      	beq.n	80075d0 <__multiply+0x144>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	f104 0c14 	add.w	ip, r4, #20
 8007592:	46ae      	mov	lr, r5
 8007594:	f04f 0a00 	mov.w	sl, #0
 8007598:	f8bc b000 	ldrh.w	fp, [ip]
 800759c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075a0:	fb09 770b 	mla	r7, r9, fp, r7
 80075a4:	4457      	add	r7, sl
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075ac:	f84e 3b04 	str.w	r3, [lr], #4
 80075b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075b8:	f8be 3000 	ldrh.w	r3, [lr]
 80075bc:	fb09 330a 	mla	r3, r9, sl, r3
 80075c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075c4:	4562      	cmp	r2, ip
 80075c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ca:	d8e5      	bhi.n	8007598 <__multiply+0x10c>
 80075cc:	9f01      	ldr	r7, [sp, #4]
 80075ce:	51eb      	str	r3, [r5, r7]
 80075d0:	3504      	adds	r5, #4
 80075d2:	e799      	b.n	8007508 <__multiply+0x7c>
 80075d4:	3e01      	subs	r6, #1
 80075d6:	e79b      	b.n	8007510 <__multiply+0x84>
 80075d8:	080085be 	.word	0x080085be
 80075dc:	080085cf 	.word	0x080085cf

080075e0 <__pow5mult>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	4615      	mov	r5, r2
 80075e6:	f012 0203 	ands.w	r2, r2, #3
 80075ea:	4607      	mov	r7, r0
 80075ec:	460e      	mov	r6, r1
 80075ee:	d007      	beq.n	8007600 <__pow5mult+0x20>
 80075f0:	4c25      	ldr	r4, [pc, #148]	@ (8007688 <__pow5mult+0xa8>)
 80075f2:	3a01      	subs	r2, #1
 80075f4:	2300      	movs	r3, #0
 80075f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075fa:	f7ff fe9f 	bl	800733c <__multadd>
 80075fe:	4606      	mov	r6, r0
 8007600:	10ad      	asrs	r5, r5, #2
 8007602:	d03d      	beq.n	8007680 <__pow5mult+0xa0>
 8007604:	69fc      	ldr	r4, [r7, #28]
 8007606:	b97c      	cbnz	r4, 8007628 <__pow5mult+0x48>
 8007608:	2010      	movs	r0, #16
 800760a:	f7ff fd7f 	bl	800710c <malloc>
 800760e:	4602      	mov	r2, r0
 8007610:	61f8      	str	r0, [r7, #28]
 8007612:	b928      	cbnz	r0, 8007620 <__pow5mult+0x40>
 8007614:	4b1d      	ldr	r3, [pc, #116]	@ (800768c <__pow5mult+0xac>)
 8007616:	481e      	ldr	r0, [pc, #120]	@ (8007690 <__pow5mult+0xb0>)
 8007618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800761c:	f7fe fec2 	bl	80063a4 <__assert_func>
 8007620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007624:	6004      	str	r4, [r0, #0]
 8007626:	60c4      	str	r4, [r0, #12]
 8007628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800762c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007630:	b94c      	cbnz	r4, 8007646 <__pow5mult+0x66>
 8007632:	f240 2171 	movw	r1, #625	@ 0x271
 8007636:	4638      	mov	r0, r7
 8007638:	f7ff ff12 	bl	8007460 <__i2b>
 800763c:	2300      	movs	r3, #0
 800763e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007642:	4604      	mov	r4, r0
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	07eb      	lsls	r3, r5, #31
 800764c:	d50a      	bpl.n	8007664 <__pow5mult+0x84>
 800764e:	4631      	mov	r1, r6
 8007650:	4622      	mov	r2, r4
 8007652:	4638      	mov	r0, r7
 8007654:	f7ff ff1a 	bl	800748c <__multiply>
 8007658:	4631      	mov	r1, r6
 800765a:	4680      	mov	r8, r0
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff fe4b 	bl	80072f8 <_Bfree>
 8007662:	4646      	mov	r6, r8
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	d00b      	beq.n	8007680 <__pow5mult+0xa0>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	b938      	cbnz	r0, 800767c <__pow5mult+0x9c>
 800766c:	4622      	mov	r2, r4
 800766e:	4621      	mov	r1, r4
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff ff0b 	bl	800748c <__multiply>
 8007676:	6020      	str	r0, [r4, #0]
 8007678:	f8c0 9000 	str.w	r9, [r0]
 800767c:	4604      	mov	r4, r0
 800767e:	e7e4      	b.n	800764a <__pow5mult+0x6a>
 8007680:	4630      	mov	r0, r6
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	bf00      	nop
 8007688:	08008628 	.word	0x08008628
 800768c:	080084ac 	.word	0x080084ac
 8007690:	080085cf 	.word	0x080085cf

08007694 <__lshift>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	460c      	mov	r4, r1
 800769a:	6849      	ldr	r1, [r1, #4]
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	4607      	mov	r7, r0
 80076a6:	4691      	mov	r9, r2
 80076a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076ac:	f108 0601 	add.w	r6, r8, #1
 80076b0:	42b3      	cmp	r3, r6
 80076b2:	db0b      	blt.n	80076cc <__lshift+0x38>
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff fddf 	bl	8007278 <_Balloc>
 80076ba:	4605      	mov	r5, r0
 80076bc:	b948      	cbnz	r0, 80076d2 <__lshift+0x3e>
 80076be:	4602      	mov	r2, r0
 80076c0:	4b28      	ldr	r3, [pc, #160]	@ (8007764 <__lshift+0xd0>)
 80076c2:	4829      	ldr	r0, [pc, #164]	@ (8007768 <__lshift+0xd4>)
 80076c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076c8:	f7fe fe6c 	bl	80063a4 <__assert_func>
 80076cc:	3101      	adds	r1, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	e7ee      	b.n	80076b0 <__lshift+0x1c>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f100 0114 	add.w	r1, r0, #20
 80076d8:	f100 0210 	add.w	r2, r0, #16
 80076dc:	4618      	mov	r0, r3
 80076de:	4553      	cmp	r3, sl
 80076e0:	db33      	blt.n	800774a <__lshift+0xb6>
 80076e2:	6920      	ldr	r0, [r4, #16]
 80076e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076e8:	f104 0314 	add.w	r3, r4, #20
 80076ec:	f019 091f 	ands.w	r9, r9, #31
 80076f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076f8:	d02b      	beq.n	8007752 <__lshift+0xbe>
 80076fa:	f1c9 0e20 	rsb	lr, r9, #32
 80076fe:	468a      	mov	sl, r1
 8007700:	2200      	movs	r2, #0
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	fa00 f009 	lsl.w	r0, r0, r9
 8007708:	4310      	orrs	r0, r2
 800770a:	f84a 0b04 	str.w	r0, [sl], #4
 800770e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007712:	459c      	cmp	ip, r3
 8007714:	fa22 f20e 	lsr.w	r2, r2, lr
 8007718:	d8f3      	bhi.n	8007702 <__lshift+0x6e>
 800771a:	ebac 0304 	sub.w	r3, ip, r4
 800771e:	3b15      	subs	r3, #21
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	3304      	adds	r3, #4
 8007726:	f104 0015 	add.w	r0, r4, #21
 800772a:	4584      	cmp	ip, r0
 800772c:	bf38      	it	cc
 800772e:	2304      	movcc	r3, #4
 8007730:	50ca      	str	r2, [r1, r3]
 8007732:	b10a      	cbz	r2, 8007738 <__lshift+0xa4>
 8007734:	f108 0602 	add.w	r6, r8, #2
 8007738:	3e01      	subs	r6, #1
 800773a:	4638      	mov	r0, r7
 800773c:	612e      	str	r6, [r5, #16]
 800773e:	4621      	mov	r1, r4
 8007740:	f7ff fdda 	bl	80072f8 <_Bfree>
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774a:	f842 0f04 	str.w	r0, [r2, #4]!
 800774e:	3301      	adds	r3, #1
 8007750:	e7c5      	b.n	80076de <__lshift+0x4a>
 8007752:	3904      	subs	r1, #4
 8007754:	f853 2b04 	ldr.w	r2, [r3], #4
 8007758:	f841 2f04 	str.w	r2, [r1, #4]!
 800775c:	459c      	cmp	ip, r3
 800775e:	d8f9      	bhi.n	8007754 <__lshift+0xc0>
 8007760:	e7ea      	b.n	8007738 <__lshift+0xa4>
 8007762:	bf00      	nop
 8007764:	080085be 	.word	0x080085be
 8007768:	080085cf 	.word	0x080085cf

0800776c <__mcmp>:
 800776c:	690a      	ldr	r2, [r1, #16]
 800776e:	4603      	mov	r3, r0
 8007770:	6900      	ldr	r0, [r0, #16]
 8007772:	1a80      	subs	r0, r0, r2
 8007774:	b530      	push	{r4, r5, lr}
 8007776:	d10e      	bne.n	8007796 <__mcmp+0x2a>
 8007778:	3314      	adds	r3, #20
 800777a:	3114      	adds	r1, #20
 800777c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800778c:	4295      	cmp	r5, r2
 800778e:	d003      	beq.n	8007798 <__mcmp+0x2c>
 8007790:	d205      	bcs.n	800779e <__mcmp+0x32>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	42a3      	cmp	r3, r4
 800779a:	d3f3      	bcc.n	8007784 <__mcmp+0x18>
 800779c:	e7fb      	b.n	8007796 <__mcmp+0x2a>
 800779e:	2001      	movs	r0, #1
 80077a0:	e7f9      	b.n	8007796 <__mcmp+0x2a>
	...

080077a4 <__mdiff>:
 80077a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	4689      	mov	r9, r1
 80077aa:	4606      	mov	r6, r0
 80077ac:	4611      	mov	r1, r2
 80077ae:	4648      	mov	r0, r9
 80077b0:	4614      	mov	r4, r2
 80077b2:	f7ff ffdb 	bl	800776c <__mcmp>
 80077b6:	1e05      	subs	r5, r0, #0
 80077b8:	d112      	bne.n	80077e0 <__mdiff+0x3c>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fd5b 	bl	8007278 <_Balloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	b928      	cbnz	r0, 80077d2 <__mdiff+0x2e>
 80077c6:	4b3f      	ldr	r3, [pc, #252]	@ (80078c4 <__mdiff+0x120>)
 80077c8:	f240 2137 	movw	r1, #567	@ 0x237
 80077cc:	483e      	ldr	r0, [pc, #248]	@ (80078c8 <__mdiff+0x124>)
 80077ce:	f7fe fde9 	bl	80063a4 <__assert_func>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077d8:	4610      	mov	r0, r2
 80077da:	b003      	add	sp, #12
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e0:	bfbc      	itt	lt
 80077e2:	464b      	movlt	r3, r9
 80077e4:	46a1      	movlt	r9, r4
 80077e6:	4630      	mov	r0, r6
 80077e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077ec:	bfba      	itte	lt
 80077ee:	461c      	movlt	r4, r3
 80077f0:	2501      	movlt	r5, #1
 80077f2:	2500      	movge	r5, #0
 80077f4:	f7ff fd40 	bl	8007278 <_Balloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	b918      	cbnz	r0, 8007804 <__mdiff+0x60>
 80077fc:	4b31      	ldr	r3, [pc, #196]	@ (80078c4 <__mdiff+0x120>)
 80077fe:	f240 2145 	movw	r1, #581	@ 0x245
 8007802:	e7e3      	b.n	80077cc <__mdiff+0x28>
 8007804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007808:	6926      	ldr	r6, [r4, #16]
 800780a:	60c5      	str	r5, [r0, #12]
 800780c:	f109 0310 	add.w	r3, r9, #16
 8007810:	f109 0514 	add.w	r5, r9, #20
 8007814:	f104 0e14 	add.w	lr, r4, #20
 8007818:	f100 0b14 	add.w	fp, r0, #20
 800781c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	46d9      	mov	r9, fp
 8007828:	f04f 0c00 	mov.w	ip, #0
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	fa1f f38a 	uxth.w	r3, sl
 800783c:	4619      	mov	r1, r3
 800783e:	b283      	uxth	r3, r0
 8007840:	1acb      	subs	r3, r1, r3
 8007842:	0c00      	lsrs	r0, r0, #16
 8007844:	4463      	add	r3, ip
 8007846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800784a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800784e:	b29b      	uxth	r3, r3
 8007850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007854:	4576      	cmp	r6, lr
 8007856:	f849 3b04 	str.w	r3, [r9], #4
 800785a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800785e:	d8e5      	bhi.n	800782c <__mdiff+0x88>
 8007860:	1b33      	subs	r3, r6, r4
 8007862:	3b15      	subs	r3, #21
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	3415      	adds	r4, #21
 800786a:	3304      	adds	r3, #4
 800786c:	42a6      	cmp	r6, r4
 800786e:	bf38      	it	cc
 8007870:	2304      	movcc	r3, #4
 8007872:	441d      	add	r5, r3
 8007874:	445b      	add	r3, fp
 8007876:	461e      	mov	r6, r3
 8007878:	462c      	mov	r4, r5
 800787a:	4544      	cmp	r4, r8
 800787c:	d30e      	bcc.n	800789c <__mdiff+0xf8>
 800787e:	f108 0103 	add.w	r1, r8, #3
 8007882:	1b49      	subs	r1, r1, r5
 8007884:	f021 0103 	bic.w	r1, r1, #3
 8007888:	3d03      	subs	r5, #3
 800788a:	45a8      	cmp	r8, r5
 800788c:	bf38      	it	cc
 800788e:	2100      	movcc	r1, #0
 8007890:	440b      	add	r3, r1
 8007892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007896:	b191      	cbz	r1, 80078be <__mdiff+0x11a>
 8007898:	6117      	str	r7, [r2, #16]
 800789a:	e79d      	b.n	80077d8 <__mdiff+0x34>
 800789c:	f854 1b04 	ldr.w	r1, [r4], #4
 80078a0:	46e6      	mov	lr, ip
 80078a2:	0c08      	lsrs	r0, r1, #16
 80078a4:	fa1c fc81 	uxtah	ip, ip, r1
 80078a8:	4471      	add	r1, lr
 80078aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078ae:	b289      	uxth	r1, r1
 80078b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078b4:	f846 1b04 	str.w	r1, [r6], #4
 80078b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078bc:	e7dd      	b.n	800787a <__mdiff+0xd6>
 80078be:	3f01      	subs	r7, #1
 80078c0:	e7e7      	b.n	8007892 <__mdiff+0xee>
 80078c2:	bf00      	nop
 80078c4:	080085be 	.word	0x080085be
 80078c8:	080085cf 	.word	0x080085cf

080078cc <__d2b>:
 80078cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d0:	460f      	mov	r7, r1
 80078d2:	2101      	movs	r1, #1
 80078d4:	ec59 8b10 	vmov	r8, r9, d0
 80078d8:	4616      	mov	r6, r2
 80078da:	f7ff fccd 	bl	8007278 <_Balloc>
 80078de:	4604      	mov	r4, r0
 80078e0:	b930      	cbnz	r0, 80078f0 <__d2b+0x24>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b23      	ldr	r3, [pc, #140]	@ (8007974 <__d2b+0xa8>)
 80078e6:	4824      	ldr	r0, [pc, #144]	@ (8007978 <__d2b+0xac>)
 80078e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80078ec:	f7fe fd5a 	bl	80063a4 <__assert_func>
 80078f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078f8:	b10d      	cbz	r5, 80078fe <__d2b+0x32>
 80078fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	f1b8 0300 	subs.w	r3, r8, #0
 8007904:	d023      	beq.n	800794e <__d2b+0x82>
 8007906:	4668      	mov	r0, sp
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	f7ff fd7c 	bl	8007406 <__lo0bits>
 800790e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007912:	b1d0      	cbz	r0, 800794a <__d2b+0x7e>
 8007914:	f1c0 0320 	rsb	r3, r0, #32
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	430b      	orrs	r3, r1
 800791e:	40c2      	lsrs	r2, r0
 8007920:	6163      	str	r3, [r4, #20]
 8007922:	9201      	str	r2, [sp, #4]
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	61a3      	str	r3, [r4, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	bf0c      	ite	eq
 800792c:	2201      	moveq	r2, #1
 800792e:	2202      	movne	r2, #2
 8007930:	6122      	str	r2, [r4, #16]
 8007932:	b1a5      	cbz	r5, 800795e <__d2b+0x92>
 8007934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007938:	4405      	add	r5, r0
 800793a:	603d      	str	r5, [r7, #0]
 800793c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007940:	6030      	str	r0, [r6, #0]
 8007942:	4620      	mov	r0, r4
 8007944:	b003      	add	sp, #12
 8007946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800794a:	6161      	str	r1, [r4, #20]
 800794c:	e7ea      	b.n	8007924 <__d2b+0x58>
 800794e:	a801      	add	r0, sp, #4
 8007950:	f7ff fd59 	bl	8007406 <__lo0bits>
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	6163      	str	r3, [r4, #20]
 8007958:	3020      	adds	r0, #32
 800795a:	2201      	movs	r2, #1
 800795c:	e7e8      	b.n	8007930 <__d2b+0x64>
 800795e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007966:	6038      	str	r0, [r7, #0]
 8007968:	6918      	ldr	r0, [r3, #16]
 800796a:	f7ff fd2d 	bl	80073c8 <__hi0bits>
 800796e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007972:	e7e5      	b.n	8007940 <__d2b+0x74>
 8007974:	080085be 	.word	0x080085be
 8007978:	080085cf 	.word	0x080085cf

0800797c <__ssputs_r>:
 800797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007980:	688e      	ldr	r6, [r1, #8]
 8007982:	461f      	mov	r7, r3
 8007984:	42be      	cmp	r6, r7
 8007986:	680b      	ldr	r3, [r1, #0]
 8007988:	4682      	mov	sl, r0
 800798a:	460c      	mov	r4, r1
 800798c:	4690      	mov	r8, r2
 800798e:	d82d      	bhi.n	80079ec <__ssputs_r+0x70>
 8007990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007998:	d026      	beq.n	80079e8 <__ssputs_r+0x6c>
 800799a:	6965      	ldr	r5, [r4, #20]
 800799c:	6909      	ldr	r1, [r1, #16]
 800799e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079a2:	eba3 0901 	sub.w	r9, r3, r1
 80079a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079aa:	1c7b      	adds	r3, r7, #1
 80079ac:	444b      	add	r3, r9
 80079ae:	106d      	asrs	r5, r5, #1
 80079b0:	429d      	cmp	r5, r3
 80079b2:	bf38      	it	cc
 80079b4:	461d      	movcc	r5, r3
 80079b6:	0553      	lsls	r3, r2, #21
 80079b8:	d527      	bpl.n	8007a0a <__ssputs_r+0x8e>
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7ff fbd0 	bl	8007160 <_malloc_r>
 80079c0:	4606      	mov	r6, r0
 80079c2:	b360      	cbz	r0, 8007a1e <__ssputs_r+0xa2>
 80079c4:	6921      	ldr	r1, [r4, #16]
 80079c6:	464a      	mov	r2, r9
 80079c8:	f000 fbde 	bl	8008188 <memcpy>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	6126      	str	r6, [r4, #16]
 80079da:	6165      	str	r5, [r4, #20]
 80079dc:	444e      	add	r6, r9
 80079de:	eba5 0509 	sub.w	r5, r5, r9
 80079e2:	6026      	str	r6, [r4, #0]
 80079e4:	60a5      	str	r5, [r4, #8]
 80079e6:	463e      	mov	r6, r7
 80079e8:	42be      	cmp	r6, r7
 80079ea:	d900      	bls.n	80079ee <__ssputs_r+0x72>
 80079ec:	463e      	mov	r6, r7
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	4632      	mov	r2, r6
 80079f2:	4641      	mov	r1, r8
 80079f4:	f000 fb7c 	bl	80080f0 <memmove>
 80079f8:	68a3      	ldr	r3, [r4, #8]
 80079fa:	1b9b      	subs	r3, r3, r6
 80079fc:	60a3      	str	r3, [r4, #8]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	4433      	add	r3, r6
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	2000      	movs	r0, #0
 8007a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0a:	462a      	mov	r2, r5
 8007a0c:	f000 fbf7 	bl	80081fe <_realloc_r>
 8007a10:	4606      	mov	r6, r0
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d1e0      	bne.n	80079d8 <__ssputs_r+0x5c>
 8007a16:	6921      	ldr	r1, [r4, #16]
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f7ff fb2d 	bl	8007078 <_free_r>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	f8ca 3000 	str.w	r3, [sl]
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e7e9      	b.n	8007a06 <__ssputs_r+0x8a>
	...

08007a34 <_svfiprintf_r>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	4698      	mov	r8, r3
 8007a3a:	898b      	ldrh	r3, [r1, #12]
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	b09d      	sub	sp, #116	@ 0x74
 8007a40:	4607      	mov	r7, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	d510      	bpl.n	8007a6a <_svfiprintf_r+0x36>
 8007a48:	690b      	ldr	r3, [r1, #16]
 8007a4a:	b973      	cbnz	r3, 8007a6a <_svfiprintf_r+0x36>
 8007a4c:	2140      	movs	r1, #64	@ 0x40
 8007a4e:	f7ff fb87 	bl	8007160 <_malloc_r>
 8007a52:	6028      	str	r0, [r5, #0]
 8007a54:	6128      	str	r0, [r5, #16]
 8007a56:	b930      	cbnz	r0, 8007a66 <_svfiprintf_r+0x32>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	b01d      	add	sp, #116	@ 0x74
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	2340      	movs	r3, #64	@ 0x40
 8007a68:	616b      	str	r3, [r5, #20]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a6e:	2320      	movs	r3, #32
 8007a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a78:	2330      	movs	r3, #48	@ 0x30
 8007a7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c18 <_svfiprintf_r+0x1e4>
 8007a7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a82:	f04f 0901 	mov.w	r9, #1
 8007a86:	4623      	mov	r3, r4
 8007a88:	469a      	mov	sl, r3
 8007a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8e:	b10a      	cbz	r2, 8007a94 <_svfiprintf_r+0x60>
 8007a90:	2a25      	cmp	r2, #37	@ 0x25
 8007a92:	d1f9      	bne.n	8007a88 <_svfiprintf_r+0x54>
 8007a94:	ebba 0b04 	subs.w	fp, sl, r4
 8007a98:	d00b      	beq.n	8007ab2 <_svfiprintf_r+0x7e>
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7ff ff6b 	bl	800797c <__ssputs_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f000 80a7 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aae:	445a      	add	r2, fp
 8007ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 809f 	beq.w	8007bfa <_svfiprintf_r+0x1c6>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac6:	f10a 0a01 	add.w	sl, sl, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	9307      	str	r3, [sp, #28]
 8007ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2205      	movs	r2, #5
 8007ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007adc:	484e      	ldr	r0, [pc, #312]	@ (8007c18 <_svfiprintf_r+0x1e4>)
 8007ade:	f7f8 fb8f 	bl	8000200 <memchr>
 8007ae2:	9a04      	ldr	r2, [sp, #16]
 8007ae4:	b9d8      	cbnz	r0, 8007b1e <_svfiprintf_r+0xea>
 8007ae6:	06d0      	lsls	r0, r2, #27
 8007ae8:	bf44      	itt	mi
 8007aea:	2320      	movmi	r3, #32
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af0:	0711      	lsls	r1, r2, #28
 8007af2:	bf44      	itt	mi
 8007af4:	232b      	movmi	r3, #43	@ 0x2b
 8007af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007afa:	f89a 3000 	ldrb.w	r3, [sl]
 8007afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b00:	d015      	beq.n	8007b2e <_svfiprintf_r+0xfa>
 8007b02:	9a07      	ldr	r2, [sp, #28]
 8007b04:	4654      	mov	r4, sl
 8007b06:	2000      	movs	r0, #0
 8007b08:	f04f 0c0a 	mov.w	ip, #10
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b12:	3b30      	subs	r3, #48	@ 0x30
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d94b      	bls.n	8007bb0 <_svfiprintf_r+0x17c>
 8007b18:	b1b0      	cbz	r0, 8007b48 <_svfiprintf_r+0x114>
 8007b1a:	9207      	str	r2, [sp, #28]
 8007b1c:	e014      	b.n	8007b48 <_svfiprintf_r+0x114>
 8007b1e:	eba0 0308 	sub.w	r3, r0, r8
 8007b22:	fa09 f303 	lsl.w	r3, r9, r3
 8007b26:	4313      	orrs	r3, r2
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	46a2      	mov	sl, r4
 8007b2c:	e7d2      	b.n	8007ad4 <_svfiprintf_r+0xa0>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	1d19      	adds	r1, r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	9103      	str	r1, [sp, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfbb      	ittet	lt
 8007b3a:	425b      	neglt	r3, r3
 8007b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b40:	9307      	strge	r3, [sp, #28]
 8007b42:	9307      	strlt	r3, [sp, #28]
 8007b44:	bfb8      	it	lt
 8007b46:	9204      	strlt	r2, [sp, #16]
 8007b48:	7823      	ldrb	r3, [r4, #0]
 8007b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b4c:	d10a      	bne.n	8007b64 <_svfiprintf_r+0x130>
 8007b4e:	7863      	ldrb	r3, [r4, #1]
 8007b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b52:	d132      	bne.n	8007bba <_svfiprintf_r+0x186>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	1d1a      	adds	r2, r3, #4
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	9203      	str	r2, [sp, #12]
 8007b5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b60:	3402      	adds	r4, #2
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c28 <_svfiprintf_r+0x1f4>
 8007b68:	7821      	ldrb	r1, [r4, #0]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f7f8 fb47 	bl	8000200 <memchr>
 8007b72:	b138      	cbz	r0, 8007b84 <_svfiprintf_r+0x150>
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	eba0 000a 	sub.w	r0, r0, sl
 8007b7a:	2240      	movs	r2, #64	@ 0x40
 8007b7c:	4082      	lsls	r2, r0
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	3401      	adds	r4, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	4824      	ldr	r0, [pc, #144]	@ (8007c1c <_svfiprintf_r+0x1e8>)
 8007b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b8e:	2206      	movs	r2, #6
 8007b90:	f7f8 fb36 	bl	8000200 <memchr>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d036      	beq.n	8007c06 <_svfiprintf_r+0x1d2>
 8007b98:	4b21      	ldr	r3, [pc, #132]	@ (8007c20 <_svfiprintf_r+0x1ec>)
 8007b9a:	bb1b      	cbnz	r3, 8007be4 <_svfiprintf_r+0x1b0>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007baa:	4433      	add	r3, r6
 8007bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bae:	e76a      	b.n	8007a86 <_svfiprintf_r+0x52>
 8007bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	e7a8      	b.n	8007b0c <_svfiprintf_r+0xd8>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	3401      	adds	r4, #1
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f04f 0c0a 	mov.w	ip, #10
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bcc:	3a30      	subs	r2, #48	@ 0x30
 8007bce:	2a09      	cmp	r2, #9
 8007bd0:	d903      	bls.n	8007bda <_svfiprintf_r+0x1a6>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0c6      	beq.n	8007b64 <_svfiprintf_r+0x130>
 8007bd6:	9105      	str	r1, [sp, #20]
 8007bd8:	e7c4      	b.n	8007b64 <_svfiprintf_r+0x130>
 8007bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bde:	4604      	mov	r4, r0
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7f0      	b.n	8007bc6 <_svfiprintf_r+0x192>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <_svfiprintf_r+0x1f0>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f7fd fd12 	bl	8005618 <_printf_float>
 8007bf4:	1c42      	adds	r2, r0, #1
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	d1d6      	bne.n	8007ba8 <_svfiprintf_r+0x174>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	065b      	lsls	r3, r3, #25
 8007bfe:	f53f af2d 	bmi.w	8007a5c <_svfiprintf_r+0x28>
 8007c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c04:	e72c      	b.n	8007a60 <_svfiprintf_r+0x2c>
 8007c06:	ab03      	add	r3, sp, #12
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <_svfiprintf_r+0x1f0>)
 8007c0e:	a904      	add	r1, sp, #16
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7fd ff99 	bl	8005b48 <_printf_i>
 8007c16:	e7ed      	b.n	8007bf4 <_svfiprintf_r+0x1c0>
 8007c18:	08008728 	.word	0x08008728
 8007c1c:	08008732 	.word	0x08008732
 8007c20:	08005619 	.word	0x08005619
 8007c24:	0800797d 	.word	0x0800797d
 8007c28:	0800872e 	.word	0x0800872e

08007c2c <__sfputc_r>:
 8007c2c:	6893      	ldr	r3, [r2, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	b410      	push	{r4}
 8007c34:	6093      	str	r3, [r2, #8]
 8007c36:	da08      	bge.n	8007c4a <__sfputc_r+0x1e>
 8007c38:	6994      	ldr	r4, [r2, #24]
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	db01      	blt.n	8007c42 <__sfputc_r+0x16>
 8007c3e:	290a      	cmp	r1, #10
 8007c40:	d103      	bne.n	8007c4a <__sfputc_r+0x1e>
 8007c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c46:	f7fe ba34 	b.w	80060b2 <__swbuf_r>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	4608      	mov	r0, r1
 8007c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <__sfputs_r>:
 8007c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	18d5      	adds	r5, r2, r3
 8007c64:	42ac      	cmp	r4, r5
 8007c66:	d101      	bne.n	8007c6c <__sfputs_r+0x12>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e007      	b.n	8007c7c <__sfputs_r+0x22>
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	463a      	mov	r2, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ffda 	bl	8007c2c <__sfputc_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d1f3      	bne.n	8007c64 <__sfputs_r+0xa>
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c80 <_vfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	b09d      	sub	sp, #116	@ 0x74
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_vfiprintf_r+0x18>
 8007c90:	6a03      	ldr	r3, [r0, #32]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x18>
 8007c94:	f7fe f904 	bl	8005ea0 <__sinit>
 8007c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	059a      	lsls	r2, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ca6:	f7fe fb72 	bl	800638e <__retarget_lock_acquire_recursive>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	071b      	lsls	r3, r3, #28
 8007cae:	d501      	bpl.n	8007cb4 <_vfiprintf_r+0x34>
 8007cb0:	692b      	ldr	r3, [r5, #16]
 8007cb2:	b99b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x5c>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7fe fa3a 	bl	8006130 <__swsetup_r>
 8007cbc:	b170      	cbz	r0, 8007cdc <_vfiprintf_r+0x5c>
 8007cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cc0:	07dc      	lsls	r4, r3, #31
 8007cc2:	d504      	bpl.n	8007cce <_vfiprintf_r+0x4e>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	b01d      	add	sp, #116	@ 0x74
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	89ab      	ldrh	r3, [r5, #12]
 8007cd0:	0598      	lsls	r0, r3, #22
 8007cd2:	d4f7      	bmi.n	8007cc4 <_vfiprintf_r+0x44>
 8007cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cd6:	f7fe fb5b 	bl	8006390 <__retarget_lock_release_recursive>
 8007cda:	e7f3      	b.n	8007cc4 <_vfiprintf_r+0x44>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cea:	2330      	movs	r3, #48	@ 0x30
 8007cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e9c <_vfiprintf_r+0x21c>
 8007cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cf4:	f04f 0901 	mov.w	r9, #1
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	469a      	mov	sl, r3
 8007cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d00:	b10a      	cbz	r2, 8007d06 <_vfiprintf_r+0x86>
 8007d02:	2a25      	cmp	r2, #37	@ 0x25
 8007d04:	d1f9      	bne.n	8007cfa <_vfiprintf_r+0x7a>
 8007d06:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0a:	d00b      	beq.n	8007d24 <_vfiprintf_r+0xa4>
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7ff ffa1 	bl	8007c5a <__sfputs_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f000 80a7 	beq.w	8007e6c <_vfiprintf_r+0x1ec>
 8007d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d20:	445a      	add	r2, fp
 8007d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d24:	f89a 3000 	ldrb.w	r3, [sl]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 809f 	beq.w	8007e6c <_vfiprintf_r+0x1ec>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295
 8007d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d38:	f10a 0a01 	add.w	sl, sl, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d46:	4654      	mov	r4, sl
 8007d48:	2205      	movs	r2, #5
 8007d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4e:	4853      	ldr	r0, [pc, #332]	@ (8007e9c <_vfiprintf_r+0x21c>)
 8007d50:	f7f8 fa56 	bl	8000200 <memchr>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	b9d8      	cbnz	r0, 8007d90 <_vfiprintf_r+0x110>
 8007d58:	06d1      	lsls	r1, r2, #27
 8007d5a:	bf44      	itt	mi
 8007d5c:	2320      	movmi	r3, #32
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d62:	0713      	lsls	r3, r2, #28
 8007d64:	bf44      	itt	mi
 8007d66:	232b      	movmi	r3, #43	@ 0x2b
 8007d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d72:	d015      	beq.n	8007da0 <_vfiprintf_r+0x120>
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4654      	mov	r4, sl
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f04f 0c0a 	mov.w	ip, #10
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d84:	3b30      	subs	r3, #48	@ 0x30
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d94b      	bls.n	8007e22 <_vfiprintf_r+0x1a2>
 8007d8a:	b1b0      	cbz	r0, 8007dba <_vfiprintf_r+0x13a>
 8007d8c:	9207      	str	r2, [sp, #28]
 8007d8e:	e014      	b.n	8007dba <_vfiprintf_r+0x13a>
 8007d90:	eba0 0308 	sub.w	r3, r0, r8
 8007d94:	fa09 f303 	lsl.w	r3, r9, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	46a2      	mov	sl, r4
 8007d9e:	e7d2      	b.n	8007d46 <_vfiprintf_r+0xc6>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	1d19      	adds	r1, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	9103      	str	r1, [sp, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfbb      	ittet	lt
 8007dac:	425b      	neglt	r3, r3
 8007dae:	f042 0202 	orrlt.w	r2, r2, #2
 8007db2:	9307      	strge	r3, [sp, #28]
 8007db4:	9307      	strlt	r3, [sp, #28]
 8007db6:	bfb8      	it	lt
 8007db8:	9204      	strlt	r2, [sp, #16]
 8007dba:	7823      	ldrb	r3, [r4, #0]
 8007dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dbe:	d10a      	bne.n	8007dd6 <_vfiprintf_r+0x156>
 8007dc0:	7863      	ldrb	r3, [r4, #1]
 8007dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dc4:	d132      	bne.n	8007e2c <_vfiprintf_r+0x1ac>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	9203      	str	r2, [sp, #12]
 8007dce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dd2:	3402      	adds	r4, #2
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007eac <_vfiprintf_r+0x22c>
 8007dda:	7821      	ldrb	r1, [r4, #0]
 8007ddc:	2203      	movs	r2, #3
 8007dde:	4650      	mov	r0, sl
 8007de0:	f7f8 fa0e 	bl	8000200 <memchr>
 8007de4:	b138      	cbz	r0, 8007df6 <_vfiprintf_r+0x176>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	eba0 000a 	sub.w	r0, r0, sl
 8007dec:	2240      	movs	r2, #64	@ 0x40
 8007dee:	4082      	lsls	r2, r0
 8007df0:	4313      	orrs	r3, r2
 8007df2:	3401      	adds	r4, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfa:	4829      	ldr	r0, [pc, #164]	@ (8007ea0 <_vfiprintf_r+0x220>)
 8007dfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e00:	2206      	movs	r2, #6
 8007e02:	f7f8 f9fd 	bl	8000200 <memchr>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d03f      	beq.n	8007e8a <_vfiprintf_r+0x20a>
 8007e0a:	4b26      	ldr	r3, [pc, #152]	@ (8007ea4 <_vfiprintf_r+0x224>)
 8007e0c:	bb1b      	cbnz	r3, 8007e56 <_vfiprintf_r+0x1d6>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	3308      	adds	r3, #8
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e1c:	443b      	add	r3, r7
 8007e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e20:	e76a      	b.n	8007cf8 <_vfiprintf_r+0x78>
 8007e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e26:	460c      	mov	r4, r1
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e7a8      	b.n	8007d7e <_vfiprintf_r+0xfe>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	3401      	adds	r4, #1
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	4619      	mov	r1, r3
 8007e34:	f04f 0c0a 	mov.w	ip, #10
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3e:	3a30      	subs	r2, #48	@ 0x30
 8007e40:	2a09      	cmp	r2, #9
 8007e42:	d903      	bls.n	8007e4c <_vfiprintf_r+0x1cc>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c6      	beq.n	8007dd6 <_vfiprintf_r+0x156>
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	e7c4      	b.n	8007dd6 <_vfiprintf_r+0x156>
 8007e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e50:	4604      	mov	r4, r0
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7f0      	b.n	8007e38 <_vfiprintf_r+0x1b8>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <_vfiprintf_r+0x228>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7fd fbd9 	bl	8005618 <_printf_float>
 8007e66:	4607      	mov	r7, r0
 8007e68:	1c78      	adds	r0, r7, #1
 8007e6a:	d1d6      	bne.n	8007e1a <_vfiprintf_r+0x19a>
 8007e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e6e:	07d9      	lsls	r1, r3, #31
 8007e70:	d405      	bmi.n	8007e7e <_vfiprintf_r+0x1fe>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	059a      	lsls	r2, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_vfiprintf_r+0x1fe>
 8007e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e7a:	f7fe fa89 	bl	8006390 <__retarget_lock_release_recursive>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	065b      	lsls	r3, r3, #25
 8007e82:	f53f af1f 	bmi.w	8007cc4 <_vfiprintf_r+0x44>
 8007e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e88:	e71e      	b.n	8007cc8 <_vfiprintf_r+0x48>
 8007e8a:	ab03      	add	r3, sp, #12
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4b05      	ldr	r3, [pc, #20]	@ (8007ea8 <_vfiprintf_r+0x228>)
 8007e92:	a904      	add	r1, sp, #16
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7fd fe57 	bl	8005b48 <_printf_i>
 8007e9a:	e7e4      	b.n	8007e66 <_vfiprintf_r+0x1e6>
 8007e9c:	08008728 	.word	0x08008728
 8007ea0:	08008732 	.word	0x08008732
 8007ea4:	08005619 	.word	0x08005619
 8007ea8:	08007c5b 	.word	0x08007c5b
 8007eac:	0800872e 	.word	0x0800872e

08007eb0 <__sflush_r>:
 8007eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb8:	0716      	lsls	r6, r2, #28
 8007eba:	4605      	mov	r5, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	d454      	bmi.n	8007f6a <__sflush_r+0xba>
 8007ec0:	684b      	ldr	r3, [r1, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dc02      	bgt.n	8007ecc <__sflush_r+0x1c>
 8007ec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dd48      	ble.n	8007f5e <__sflush_r+0xae>
 8007ecc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	d045      	beq.n	8007f5e <__sflush_r+0xae>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ed8:	682f      	ldr	r7, [r5, #0]
 8007eda:	6a21      	ldr	r1, [r4, #32]
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	d030      	beq.n	8007f42 <__sflush_r+0x92>
 8007ee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	0759      	lsls	r1, r3, #29
 8007ee6:	d505      	bpl.n	8007ef4 <__sflush_r+0x44>
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eee:	b10b      	cbz	r3, 8007ef4 <__sflush_r+0x44>
 8007ef0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ef8:	6a21      	ldr	r1, [r4, #32]
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b0      	blx	r6
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	d106      	bne.n	8007f12 <__sflush_r+0x62>
 8007f04:	6829      	ldr	r1, [r5, #0]
 8007f06:	291d      	cmp	r1, #29
 8007f08:	d82b      	bhi.n	8007f62 <__sflush_r+0xb2>
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fb4 <__sflush_r+0x104>)
 8007f0c:	410a      	asrs	r2, r1
 8007f0e:	07d6      	lsls	r6, r2, #31
 8007f10:	d427      	bmi.n	8007f62 <__sflush_r+0xb2>
 8007f12:	2200      	movs	r2, #0
 8007f14:	6062      	str	r2, [r4, #4]
 8007f16:	04d9      	lsls	r1, r3, #19
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	6022      	str	r2, [r4, #0]
 8007f1c:	d504      	bpl.n	8007f28 <__sflush_r+0x78>
 8007f1e:	1c42      	adds	r2, r0, #1
 8007f20:	d101      	bne.n	8007f26 <__sflush_r+0x76>
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	b903      	cbnz	r3, 8007f28 <__sflush_r+0x78>
 8007f26:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	b1b9      	cbz	r1, 8007f5e <__sflush_r+0xae>
 8007f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f32:	4299      	cmp	r1, r3
 8007f34:	d002      	beq.n	8007f3c <__sflush_r+0x8c>
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7ff f89e 	bl	8007078 <_free_r>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f40:	e00d      	b.n	8007f5e <__sflush_r+0xae>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b0      	blx	r6
 8007f48:	4602      	mov	r2, r0
 8007f4a:	1c50      	adds	r0, r2, #1
 8007f4c:	d1c9      	bne.n	8007ee2 <__sflush_r+0x32>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0c6      	beq.n	8007ee2 <__sflush_r+0x32>
 8007f54:	2b1d      	cmp	r3, #29
 8007f56:	d001      	beq.n	8007f5c <__sflush_r+0xac>
 8007f58:	2b16      	cmp	r3, #22
 8007f5a:	d11e      	bne.n	8007f9a <__sflush_r+0xea>
 8007f5c:	602f      	str	r7, [r5, #0]
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e022      	b.n	8007fa8 <__sflush_r+0xf8>
 8007f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f66:	b21b      	sxth	r3, r3
 8007f68:	e01b      	b.n	8007fa2 <__sflush_r+0xf2>
 8007f6a:	690f      	ldr	r7, [r1, #16]
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	d0f6      	beq.n	8007f5e <__sflush_r+0xae>
 8007f70:	0793      	lsls	r3, r2, #30
 8007f72:	680e      	ldr	r6, [r1, #0]
 8007f74:	bf08      	it	eq
 8007f76:	694b      	ldreq	r3, [r1, #20]
 8007f78:	600f      	str	r7, [r1, #0]
 8007f7a:	bf18      	it	ne
 8007f7c:	2300      	movne	r3, #0
 8007f7e:	eba6 0807 	sub.w	r8, r6, r7
 8007f82:	608b      	str	r3, [r1, #8]
 8007f84:	f1b8 0f00 	cmp.w	r8, #0
 8007f88:	dde9      	ble.n	8007f5e <__sflush_r+0xae>
 8007f8a:	6a21      	ldr	r1, [r4, #32]
 8007f8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f8e:	4643      	mov	r3, r8
 8007f90:	463a      	mov	r2, r7
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b0      	blx	r6
 8007f96:	2800      	cmp	r0, #0
 8007f98:	dc08      	bgt.n	8007fac <__sflush_r+0xfc>
 8007f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	4407      	add	r7, r0
 8007fae:	eba8 0800 	sub.w	r8, r8, r0
 8007fb2:	e7e7      	b.n	8007f84 <__sflush_r+0xd4>
 8007fb4:	dfbffffe 	.word	0xdfbffffe

08007fb8 <_fflush_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	690b      	ldr	r3, [r1, #16]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	b913      	cbnz	r3, 8007fc8 <_fflush_r+0x10>
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	b118      	cbz	r0, 8007fd2 <_fflush_r+0x1a>
 8007fca:	6a03      	ldr	r3, [r0, #32]
 8007fcc:	b90b      	cbnz	r3, 8007fd2 <_fflush_r+0x1a>
 8007fce:	f7fd ff67 	bl	8005ea0 <__sinit>
 8007fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f3      	beq.n	8007fc2 <_fflush_r+0xa>
 8007fda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fdc:	07d0      	lsls	r0, r2, #31
 8007fde:	d404      	bmi.n	8007fea <_fflush_r+0x32>
 8007fe0:	0599      	lsls	r1, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_fflush_r+0x32>
 8007fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fe6:	f7fe f9d2 	bl	800638e <__retarget_lock_acquire_recursive>
 8007fea:	4628      	mov	r0, r5
 8007fec:	4621      	mov	r1, r4
 8007fee:	f7ff ff5f 	bl	8007eb0 <__sflush_r>
 8007ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ff4:	07da      	lsls	r2, r3, #31
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	d4e4      	bmi.n	8007fc4 <_fflush_r+0xc>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	059b      	lsls	r3, r3, #22
 8007ffe:	d4e1      	bmi.n	8007fc4 <_fflush_r+0xc>
 8008000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008002:	f7fe f9c5 	bl	8006390 <__retarget_lock_release_recursive>
 8008006:	e7dd      	b.n	8007fc4 <_fflush_r+0xc>

08008008 <fiprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	b503      	push	{r0, r1, lr}
 800800c:	4601      	mov	r1, r0
 800800e:	ab03      	add	r3, sp, #12
 8008010:	4805      	ldr	r0, [pc, #20]	@ (8008028 <fiprintf+0x20>)
 8008012:	f853 2b04 	ldr.w	r2, [r3], #4
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	f7ff fe31 	bl	8007c80 <_vfiprintf_r>
 800801e:	b002      	add	sp, #8
 8008020:	f85d eb04 	ldr.w	lr, [sp], #4
 8008024:	b003      	add	sp, #12
 8008026:	4770      	bx	lr
 8008028:	20000044 	.word	0x20000044

0800802c <__swhatbuf_r>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	460c      	mov	r4, r1
 8008030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008034:	2900      	cmp	r1, #0
 8008036:	b096      	sub	sp, #88	@ 0x58
 8008038:	4615      	mov	r5, r2
 800803a:	461e      	mov	r6, r3
 800803c:	da0d      	bge.n	800805a <__swhatbuf_r+0x2e>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008044:	f04f 0100 	mov.w	r1, #0
 8008048:	bf14      	ite	ne
 800804a:	2340      	movne	r3, #64	@ 0x40
 800804c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008050:	2000      	movs	r0, #0
 8008052:	6031      	str	r1, [r6, #0]
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	b016      	add	sp, #88	@ 0x58
 8008058:	bd70      	pop	{r4, r5, r6, pc}
 800805a:	466a      	mov	r2, sp
 800805c:	f000 f862 	bl	8008124 <_fstat_r>
 8008060:	2800      	cmp	r0, #0
 8008062:	dbec      	blt.n	800803e <__swhatbuf_r+0x12>
 8008064:	9901      	ldr	r1, [sp, #4]
 8008066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800806a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800806e:	4259      	negs	r1, r3
 8008070:	4159      	adcs	r1, r3
 8008072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008076:	e7eb      	b.n	8008050 <__swhatbuf_r+0x24>

08008078 <__smakebuf_r>:
 8008078:	898b      	ldrh	r3, [r1, #12]
 800807a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807c:	079d      	lsls	r5, r3, #30
 800807e:	4606      	mov	r6, r0
 8008080:	460c      	mov	r4, r1
 8008082:	d507      	bpl.n	8008094 <__smakebuf_r+0x1c>
 8008084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	2301      	movs	r3, #1
 800808e:	6163      	str	r3, [r4, #20]
 8008090:	b003      	add	sp, #12
 8008092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008094:	ab01      	add	r3, sp, #4
 8008096:	466a      	mov	r2, sp
 8008098:	f7ff ffc8 	bl	800802c <__swhatbuf_r>
 800809c:	9f00      	ldr	r7, [sp, #0]
 800809e:	4605      	mov	r5, r0
 80080a0:	4639      	mov	r1, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff f85c 	bl	8007160 <_malloc_r>
 80080a8:	b948      	cbnz	r0, 80080be <__smakebuf_r+0x46>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	059a      	lsls	r2, r3, #22
 80080b0:	d4ee      	bmi.n	8008090 <__smakebuf_r+0x18>
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	f043 0302 	orr.w	r3, r3, #2
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	e7e2      	b.n	8008084 <__smakebuf_r+0xc>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	6020      	str	r0, [r4, #0]
 80080c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ce:	b15b      	cbz	r3, 80080e8 <__smakebuf_r+0x70>
 80080d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 f837 	bl	8008148 <_isatty_r>
 80080da:	b128      	cbz	r0, 80080e8 <__smakebuf_r+0x70>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	431d      	orrs	r5, r3
 80080ec:	81a5      	strh	r5, [r4, #12]
 80080ee:	e7cf      	b.n	8008090 <__smakebuf_r+0x18>

080080f0 <memmove>:
 80080f0:	4288      	cmp	r0, r1
 80080f2:	b510      	push	{r4, lr}
 80080f4:	eb01 0402 	add.w	r4, r1, r2
 80080f8:	d902      	bls.n	8008100 <memmove+0x10>
 80080fa:	4284      	cmp	r4, r0
 80080fc:	4623      	mov	r3, r4
 80080fe:	d807      	bhi.n	8008110 <memmove+0x20>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	42a1      	cmp	r1, r4
 8008104:	d008      	beq.n	8008118 <memmove+0x28>
 8008106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810e:	e7f8      	b.n	8008102 <memmove+0x12>
 8008110:	4402      	add	r2, r0
 8008112:	4601      	mov	r1, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	d100      	bne.n	800811a <memmove+0x2a>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008122:	e7f7      	b.n	8008114 <memmove+0x24>

08008124 <_fstat_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d07      	ldr	r5, [pc, #28]	@ (8008144 <_fstat_r+0x20>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	f7f9 ffcb 	bl	80020cc <_fstat>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d102      	bne.n	8008140 <_fstat_r+0x1c>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	b103      	cbz	r3, 8008140 <_fstat_r+0x1c>
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	bd38      	pop	{r3, r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	200005c8 	.word	0x200005c8

08008148 <_isatty_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	@ (8008164 <_isatty_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f9 ffca 	bl	80020ec <_isatty>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_isatty_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_isatty_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	200005c8 	.word	0x200005c8

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	@ (8008184 <_sbrk_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 ffd2 	bl	800211c <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	200005c8 	.word	0x200005c8

08008188 <memcpy>:
 8008188:	440a      	add	r2, r1
 800818a:	4291      	cmp	r1, r2
 800818c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008190:	d100      	bne.n	8008194 <memcpy+0xc>
 8008192:	4770      	bx	lr
 8008194:	b510      	push	{r4, lr}
 8008196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819e:	4291      	cmp	r1, r2
 80081a0:	d1f9      	bne.n	8008196 <memcpy+0xe>
 80081a2:	bd10      	pop	{r4, pc}

080081a4 <abort>:
 80081a4:	b508      	push	{r3, lr}
 80081a6:	2006      	movs	r0, #6
 80081a8:	f000 f88c 	bl	80082c4 <raise>
 80081ac:	2001      	movs	r0, #1
 80081ae:	f7f9 ff3d 	bl	800202c <_exit>

080081b2 <_calloc_r>:
 80081b2:	b570      	push	{r4, r5, r6, lr}
 80081b4:	fba1 5402 	umull	r5, r4, r1, r2
 80081b8:	b93c      	cbnz	r4, 80081ca <_calloc_r+0x18>
 80081ba:	4629      	mov	r1, r5
 80081bc:	f7fe ffd0 	bl	8007160 <_malloc_r>
 80081c0:	4606      	mov	r6, r0
 80081c2:	b928      	cbnz	r0, 80081d0 <_calloc_r+0x1e>
 80081c4:	2600      	movs	r6, #0
 80081c6:	4630      	mov	r0, r6
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
 80081ca:	220c      	movs	r2, #12
 80081cc:	6002      	str	r2, [r0, #0]
 80081ce:	e7f9      	b.n	80081c4 <_calloc_r+0x12>
 80081d0:	462a      	mov	r2, r5
 80081d2:	4621      	mov	r1, r4
 80081d4:	f7fe f802 	bl	80061dc <memset>
 80081d8:	e7f5      	b.n	80081c6 <_calloc_r+0x14>

080081da <__ascii_mbtowc>:
 80081da:	b082      	sub	sp, #8
 80081dc:	b901      	cbnz	r1, 80081e0 <__ascii_mbtowc+0x6>
 80081de:	a901      	add	r1, sp, #4
 80081e0:	b142      	cbz	r2, 80081f4 <__ascii_mbtowc+0x1a>
 80081e2:	b14b      	cbz	r3, 80081f8 <__ascii_mbtowc+0x1e>
 80081e4:	7813      	ldrb	r3, [r2, #0]
 80081e6:	600b      	str	r3, [r1, #0]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	1e10      	subs	r0, r2, #0
 80081ec:	bf18      	it	ne
 80081ee:	2001      	movne	r0, #1
 80081f0:	b002      	add	sp, #8
 80081f2:	4770      	bx	lr
 80081f4:	4610      	mov	r0, r2
 80081f6:	e7fb      	b.n	80081f0 <__ascii_mbtowc+0x16>
 80081f8:	f06f 0001 	mvn.w	r0, #1
 80081fc:	e7f8      	b.n	80081f0 <__ascii_mbtowc+0x16>

080081fe <_realloc_r>:
 80081fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	4680      	mov	r8, r0
 8008204:	4615      	mov	r5, r2
 8008206:	460c      	mov	r4, r1
 8008208:	b921      	cbnz	r1, 8008214 <_realloc_r+0x16>
 800820a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800820e:	4611      	mov	r1, r2
 8008210:	f7fe bfa6 	b.w	8007160 <_malloc_r>
 8008214:	b92a      	cbnz	r2, 8008222 <_realloc_r+0x24>
 8008216:	f7fe ff2f 	bl	8007078 <_free_r>
 800821a:	2400      	movs	r4, #0
 800821c:	4620      	mov	r0, r4
 800821e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008222:	f000 f86b 	bl	80082fc <_malloc_usable_size_r>
 8008226:	4285      	cmp	r5, r0
 8008228:	4606      	mov	r6, r0
 800822a:	d802      	bhi.n	8008232 <_realloc_r+0x34>
 800822c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008230:	d8f4      	bhi.n	800821c <_realloc_r+0x1e>
 8008232:	4629      	mov	r1, r5
 8008234:	4640      	mov	r0, r8
 8008236:	f7fe ff93 	bl	8007160 <_malloc_r>
 800823a:	4607      	mov	r7, r0
 800823c:	2800      	cmp	r0, #0
 800823e:	d0ec      	beq.n	800821a <_realloc_r+0x1c>
 8008240:	42b5      	cmp	r5, r6
 8008242:	462a      	mov	r2, r5
 8008244:	4621      	mov	r1, r4
 8008246:	bf28      	it	cs
 8008248:	4632      	movcs	r2, r6
 800824a:	f7ff ff9d 	bl	8008188 <memcpy>
 800824e:	4621      	mov	r1, r4
 8008250:	4640      	mov	r0, r8
 8008252:	f7fe ff11 	bl	8007078 <_free_r>
 8008256:	463c      	mov	r4, r7
 8008258:	e7e0      	b.n	800821c <_realloc_r+0x1e>

0800825a <__ascii_wctomb>:
 800825a:	4603      	mov	r3, r0
 800825c:	4608      	mov	r0, r1
 800825e:	b141      	cbz	r1, 8008272 <__ascii_wctomb+0x18>
 8008260:	2aff      	cmp	r2, #255	@ 0xff
 8008262:	d904      	bls.n	800826e <__ascii_wctomb+0x14>
 8008264:	228a      	movs	r2, #138	@ 0x8a
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	4770      	bx	lr
 800826e:	700a      	strb	r2, [r1, #0]
 8008270:	2001      	movs	r0, #1
 8008272:	4770      	bx	lr

08008274 <_raise_r>:
 8008274:	291f      	cmp	r1, #31
 8008276:	b538      	push	{r3, r4, r5, lr}
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	d904      	bls.n	8008288 <_raise_r+0x14>
 800827e:	2316      	movs	r3, #22
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800828a:	b112      	cbz	r2, 8008292 <_raise_r+0x1e>
 800828c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008290:	b94b      	cbnz	r3, 80082a6 <_raise_r+0x32>
 8008292:	4628      	mov	r0, r5
 8008294:	f000 f830 	bl	80082f8 <_getpid_r>
 8008298:	4622      	mov	r2, r4
 800829a:	4601      	mov	r1, r0
 800829c:	4628      	mov	r0, r5
 800829e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a2:	f000 b817 	b.w	80082d4 <_kill_r>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d00a      	beq.n	80082c0 <_raise_r+0x4c>
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	d103      	bne.n	80082b6 <_raise_r+0x42>
 80082ae:	2316      	movs	r3, #22
 80082b0:	6003      	str	r3, [r0, #0]
 80082b2:	2001      	movs	r0, #1
 80082b4:	e7e7      	b.n	8008286 <_raise_r+0x12>
 80082b6:	2100      	movs	r1, #0
 80082b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082bc:	4620      	mov	r0, r4
 80082be:	4798      	blx	r3
 80082c0:	2000      	movs	r0, #0
 80082c2:	e7e0      	b.n	8008286 <_raise_r+0x12>

080082c4 <raise>:
 80082c4:	4b02      	ldr	r3, [pc, #8]	@ (80082d0 <raise+0xc>)
 80082c6:	4601      	mov	r1, r0
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	f7ff bfd3 	b.w	8008274 <_raise_r>
 80082ce:	bf00      	nop
 80082d0:	20000044 	.word	0x20000044

080082d4 <_kill_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	@ (80082f4 <_kill_r+0x20>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	f7f9 fe93 	bl	800200c <_kill>
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	d102      	bne.n	80082f0 <_kill_r+0x1c>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	b103      	cbz	r3, 80082f0 <_kill_r+0x1c>
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	200005c8 	.word	0x200005c8

080082f8 <_getpid_r>:
 80082f8:	f7f9 be80 	b.w	8001ffc <_getpid>

080082fc <_malloc_usable_size_r>:
 80082fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008300:	1f18      	subs	r0, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfbc      	itt	lt
 8008306:	580b      	ldrlt	r3, [r1, r0]
 8008308:	18c0      	addlt	r0, r0, r3
 800830a:	4770      	bx	lr

0800830c <_init>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr

08008318 <_fini>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr
