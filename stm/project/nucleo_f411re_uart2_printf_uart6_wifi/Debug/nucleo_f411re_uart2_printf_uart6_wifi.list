
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d8  080051d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080051e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  20000068  08005248  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08005248  00007af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093b1  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  00010449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  000120b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000637  00000000  00000000  000128e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a70  00000000  00000000  00012f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a667  00000000  00000000  0002998f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c4d  00000000  00000000  00033ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000bbc43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000bbccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000be9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ab4 	.word	0x08004ab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ab4 	.word	0x08004ab4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f003 f9ee 	bl	800399c <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005c0:	f240 4202 	movw	r2, #1026	@ 0x402
 80005c4:	2100      	movs	r1, #0
 80005c6:	4827      	ldr	r0, [pc, #156]	@ (8000664 <esp_at_command+0xc4>)
 80005c8:	f003 f9e8 	bl	800399c <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff fe11 	bl	80001f4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <esp_at_command+0xc8>)
 80005dc:	f001 ffa6 	bl	800252c <HAL_UART_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d031      	beq.n	800064a <esp_at_command+0xaa>
        return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e037      	b.n	800065c <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <esp_at_command+0xc4>)
 80005ee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005f6:	d302      	bcc.n	80005fe <esp_at_command+0x5e>
            return -2;
 80005f8:	f06f 0301 	mvn.w	r3, #1
 80005fc:	e02e      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80005fe:	491b      	ldr	r1, [pc, #108]	@ (800066c <esp_at_command+0xcc>)
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <esp_at_command+0xc4>)
 8000602:	f003 fa4f 	bl	8003aa4 <strstr>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <esp_at_command+0x72>
            return -3;
 800060c:	f06f 0302 	mvn.w	r3, #2
 8000610:	e024      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000612:	4917      	ldr	r1, [pc, #92]	@ (8000670 <esp_at_command+0xd0>)
 8000614:	4813      	ldr	r0, [pc, #76]	@ (8000664 <esp_at_command+0xc4>)
 8000616:	f003 fa45 	bl	8003aa4 <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <esp_at_command+0xc4>)
 8000622:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000626:	461a      	mov	r2, r3
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <esp_at_command+0xc4>)
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f003 facb 	bl	8003bc6 <memcpy>
            *length = cb_data.length;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <esp_at_command+0xc4>)
 8000632:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	801a      	strh	r2, [r3, #0]

            break;
 800063a:	e00a      	b.n	8000652 <esp_at_command+0xb2>
        }

        time_out -= 10;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3b0a      	subs	r3, #10
 8000640:	b29b      	uxth	r3, r3
 8000642:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f000 ff23 	bl	8001490 <HAL_Delay>
    while(time_out > 0)
 800064a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dccc      	bgt.n	80005ec <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f000 ff1b 	bl	8001490 <HAL_Delay>
    return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000514 	.word	0x20000514
 8000668:	20000918 	.word	0x20000918
 800066c:	08004acc 	.word	0x08004acc
 8000670:	08004ad4 	.word	0x08004ad4

08000674 <esp_reset>:

static int esp_reset(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800067e:	1dba      	adds	r2, r7, #6
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <esp_reset+0x3c>)
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <esp_reset+0x40>)
 8000688:	f7ff ff8a 	bl	80005a0 <esp_at_command>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <esp_reset+0x24>
    {
       return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e007      	b.n	80006a8 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000698:	1dba      	adds	r2, r7, #6
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <esp_reset+0x3c>)
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <esp_reset+0x44>)
 80006a2:	f7ff ff7d 	bl	80005a0 <esp_at_command>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000094 	.word	0x20000094
 80006b4:	08004ad8 	.word	0x08004ad8
 80006b8:	08004ae4 	.word	0x08004ae4

080006bc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	492d      	ldr	r1, [pc, #180]	@ (8000788 <request_ip_addr+0xcc>)
 80006d4:	482d      	ldr	r0, [pc, #180]	@ (800078c <request_ip_addr+0xd0>)
 80006d6:	f7ff ff63 	bl	80005a0 <esp_at_command>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <request_ip_addr+0xd4>)
 80006e2:	f003 f85b 	bl	800379c <puts>
 80006e6:	e049      	b.n	800077c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80006e8:	492a      	ldr	r1, [pc, #168]	@ (8000794 <request_ip_addr+0xd8>)
 80006ea:	4827      	ldr	r0, [pc, #156]	@ (8000788 <request_ip_addr+0xcc>)
 80006ec:	f003 f97e 	bl	80039ec <strtok>
 80006f0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e009      	b.n	8000712 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <request_ip_addr+0xcc>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f002 ffea 	bl	80036e0 <putchar>
            for(int i = 0 ; i < length ; i++)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	461a      	mov	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4293      	cmp	r3, r2
 800071a:	dbf0      	blt.n	80006fe <request_ip_addr+0x42>
        }

        while(line != NULL)
 800071c:	e02b      	b.n	8000776 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800071e:	491e      	ldr	r1, [pc, #120]	@ (8000798 <request_ip_addr+0xdc>)
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f003 f9bf 	bl	8003aa4 <strstr>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d01f      	beq.n	800076c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800072c:	491b      	ldr	r1, [pc, #108]	@ (800079c <request_ip_addr+0xe0>)
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f003 f95c 	bl	80039ec <strtok>
                ip = strtok(NULL, "\"");
 8000734:	4919      	ldr	r1, [pc, #100]	@ (800079c <request_ip_addr+0xe0>)
 8000736:	2000      	movs	r0, #0
 8000738:	f003 f958 	bl	80039ec <strtok>
 800073c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <request_ip_addr+0xe4>)
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fd4d 	bl	80001e0 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00f      	beq.n	800076c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800074c:	2210      	movs	r2, #16
 800074e:	2100      	movs	r1, #0
 8000750:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <request_ip_addr+0xe8>)
 8000752:	f003 f923 	bl	800399c <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff fd4c 	bl	80001f4 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <request_ip_addr+0xe8>)
 8000764:	f003 fa2f 	bl	8003bc6 <memcpy>
                    return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e009      	b.n	8000780 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800076c:	4909      	ldr	r1, [pc, #36]	@ (8000794 <request_ip_addr+0xd8>)
 800076e:	2000      	movs	r0, #0
 8000770:	f003 f93c 	bl	80039ec <strtok>
 8000774:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d0      	bne.n	800071e <request_ip_addr+0x62>
        }
    }

    return -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000094 	.word	0x20000094
 800078c:	08004b28 	.word	0x08004b28
 8000790:	08004b34 	.word	0x08004b34
 8000794:	08004b1c 	.word	0x08004b1c
 8000798:	08004b54 	.word	0x08004b54
 800079c:	08004b24 	.word	0x08004b24
 80007a0:	08004aec 	.word	0x08004aec
 80007a4:	20000084 	.word	0x20000084

080007a8 <esp_client_conn>:
int esp_client_conn()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	@ 0x48
 80007ac:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	223c      	movs	r2, #60	@ 0x3c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f8ee 	bl	800399c <memset>
  uint16_t length = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007c4:	f107 0008 	add.w	r0, r7, #8
 80007c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <esp_client_conn+0x4c>)
 80007ce:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <esp_client_conn+0x50>)
 80007d0:	f002 ffec 	bl	80037ac <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80007d4:	1dba      	adds	r2, r7, #6
 80007d6:	f107 0008 	add.w	r0, r7, #8
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	4907      	ldr	r1, [pc, #28]	@ (80007fc <esp_client_conn+0x54>)
 80007e0:	f7ff fede 	bl	80005a0 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <esp_client_conn+0x58>)
 80007e6:	f000 f95d 	bl	8000aa4 <esp_send_data>
	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3748      	adds	r7, #72	@ 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08004b60 	.word	0x08004b60
 80007f8:	08004b6c 	.word	0x08004b6c
 80007fc:	20000094 	.word	0x20000094
 8000800:	08004b88 	.word	0x08004b88

08000804 <drv_esp_init>:

int drv_esp_init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <drv_esp_init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <drv_esp_init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 38400;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <drv_esp_init+0x68>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <drv_esp_init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <drv_esp_init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <drv_esp_init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <drv_esp_init+0x68>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <drv_esp_init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <drv_esp_init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <drv_esp_init+0x68>)
 800083c:	f001 fe26 	bl	800248c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <drv_esp_init+0x48>
        return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e00c      	b.n	8000866 <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 800084c:	2210      	movs	r2, #16
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <drv_esp_init+0x70>)
 8000852:	f003 f8a3 	bl	800399c <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <drv_esp_init+0x74>)
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <drv_esp_init+0x68>)
 800085c:	f001 fef1 	bl	8002642 <HAL_UART_Receive_IT>

    return esp_reset();
 8000860:	f7ff ff08 	bl	8000674 <esp_reset>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000918 	.word	0x20000918
 8000870:	40011400 	.word	0x40011400
 8000874:	20000084 	.word	0x20000084
 8000878:	20000513 	.word	0x20000513

0800087c <reset_func>:
void reset_func()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <reset_func+0x28>)
 8000882:	f002 ff1b 	bl	80036bc <iprintf>
	if(esp_reset() == 0)
 8000886:	f7ff fef5 	bl	8000674 <esp_reset>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <reset_func+0x1c>
			printf("OK\r\n");
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <reset_func+0x2c>)
 8000892:	f002 ff83 	bl	800379c <puts>
	else
			printf("fail\r\n");
}
 8000896:	e002      	b.n	800089e <reset_func+0x22>
			printf("fail\r\n");
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <reset_func+0x30>)
 800089a:	f002 ff7f 	bl	800379c <puts>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08004b9c 	.word	0x08004b9c
 80008a8:	08004bac 	.word	0x08004bac
 80008ac:	08004bb0 	.word	0x08004bb0

080008b0 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b096      	sub	sp, #88	@ 0x58
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	223c      	movs	r2, #60	@ 0x3c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f865 	bl	800399c <memset>
  if(ssid == NULL || passwd == NULL)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <ap_conn_func+0x2e>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008de:	4832      	ldr	r0, [pc, #200]	@ (80009a8 <ap_conn_func+0xf8>)
 80008e0:	f002 ff5c 	bl	800379c <puts>
 80008e4:	e05c      	b.n	80009a0 <ap_conn_func+0xf0>
      return;
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f854 	bl	800399c <memset>
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80008f4:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80008f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fc:	492b      	ldr	r1, [pc, #172]	@ (80009ac <ap_conn_func+0xfc>)
 80008fe:	482c      	ldr	r0, [pc, #176]	@ (80009b0 <ap_conn_func+0x100>)
 8000900:	f7ff fe4e 	bl	80005a0 <esp_at_command>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <ap_conn_func+0x62>
      printf("Station mode fail\r\n");
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <ap_conn_func+0x104>)
 800090c:	f002 ff46 	bl	800379c <puts>
 8000910:	e012      	b.n	8000938 <ap_conn_func+0x88>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	@ 0x54
 8000916:	e009      	b.n	800092c <ap_conn_func+0x7c>
          printf("%c", response[i]);
 8000918:	4a24      	ldr	r2, [pc, #144]	@ (80009ac <ap_conn_func+0xfc>)
 800091a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fedd 	bl	80036e0 <putchar>
      for(int i = 0 ; i < length ; i++)
 8000926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000928:	3301      	adds	r3, #1
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
 800092c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000930:	461a      	mov	r2, r3
 8000932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000934:	4293      	cmp	r3, r2
 8000936:	dbef      	blt.n	8000918 <ap_conn_func+0x68>
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2240      	movs	r2, #64	@ 0x40
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f82b 	bl	800399c <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000946:	f107 000c 	add.w	r0, r7, #12
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	491a      	ldr	r1, [pc, #104]	@ (80009b8 <ap_conn_func+0x108>)
 8000950:	f002 ff2c 	bl	80037ac <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000954:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000958:	f107 000c 	add.w	r0, r7, #12
 800095c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000960:	4912      	ldr	r1, [pc, #72]	@ (80009ac <ap_conn_func+0xfc>)
 8000962:	f7ff fe1d 	bl	80005a0 <esp_at_command>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <ap_conn_func+0xca>
      printf("ap scan command fail : %s\r\n",at_cmd);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	@ (80009bc <ap_conn_func+0x10c>)
 8000974:	f002 fea2 	bl	80036bc <iprintf>
 8000978:	e012      	b.n	80009a0 <ap_conn_func+0xf0>
  else
  {
      for(int i = 0 ; i < length ; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
 800097e:	e009      	b.n	8000994 <ap_conn_func+0xe4>
          printf("%c", response[i]);
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <ap_conn_func+0xfc>)
 8000982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fea9 	bl	80036e0 <putchar>
      for(int i = 0 ; i < length ; i++)
 800098e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000990:	3301      	adds	r3, #1
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
 8000994:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000998:	461a      	mov	r2, r3
 800099a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800099c:	4293      	cmp	r3, r2
 800099e:	dbef      	blt.n	8000980 <ap_conn_func+0xd0>
  }
}
 80009a0:	3758      	adds	r7, #88	@ 0x58
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08004bf4 	.word	0x08004bf4
 80009ac:	20000094 	.word	0x20000094
 80009b0:	08004c20 	.word	0x08004c20
 80009b4:	08004c30 	.word	0x08004c30
 80009b8:	08004c44 	.word	0x08004c44
 80009bc:	08004c5c 	.word	0x08004c5c

080009c0 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_UART_RxCpltCallback+0x9c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d117      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009dc:	d20c      	bcs.n	80009f8 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	b291      	uxth	r1, r2
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009ea:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_UART_RxCpltCallback+0xa4>)
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_RxCpltCallback+0xa0>)
 80009f6:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	491a      	ldr	r1, [pc, #104]	@ (8000a64 <HAL_UART_RxCpltCallback+0xa4>)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f001 fe20 	bl	8002642 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_UART_RxCpltCallback+0xa8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d122      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_RxCpltCallback+0xb0>)
 8000a12:	7811      	ldrb	r1, [r2, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a16:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a1e:	5cd3      	ldrb	r3, [r2, r3]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b0d      	cmp	r3, #13
 8000a24:	d10b      	bne.n	8000a3e <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_UART_RxCpltCallback+0xb4>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_UART_RxCpltCallback+0xb8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e004      	b.n	8000a48 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_UART_RxCpltCallback+0xac>)
 8000a46:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4909      	ldr	r1, [pc, #36]	@ (8000a70 <HAL_UART_RxCpltCallback+0xb0>)
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 fdf8 	bl	8002642 <HAL_UART_Receive_IT>
    }
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	20000514 	.word	0x20000514
 8000a64:	20000513 	.word	0x20000513
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	20000960 	.word	0x20000960
 8000a70:	20000512 	.word	0x20000512
 8000a74:	200004e0 	.word	0x200004e0
 8000a78:	200004dc 	.word	0x200004dc

08000a7c <AiotClient_Init>:


void AiotClient_Init()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	reset_func();
 8000a80:	f7ff fefc 	bl	800087c <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 8000a84:	4905      	ldr	r1, [pc, #20]	@ (8000a9c <AiotClient_Init+0x20>)
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <AiotClient_Init+0x24>)
 8000a88:	f7ff ff12 	bl	80008b0 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fe15 	bl	80006bc <request_ip_addr>
	esp_client_conn();
 8000a92:	f7ff fe89 	bl	80007a8 <esp_client_conn>
//	ip_state_func();
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08005034 	.word	0x08005034
 8000aa0:	08004fc8 	.word	0x08004fc8

08000aa4 <esp_send_data>:

void esp_send_data(char *data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	@ 0x50
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	223c      	movs	r2, #60	@ 0x3c
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ff6f 	bl	800399c <memset>
  uint16_t length = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fb96 	bl	80001f4 <strlen>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	490e      	ldr	r1, [pc, #56]	@ (8000b08 <esp_send_data+0x64>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fe6b 	bl	80037ac <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000ad6:	f107 020e 	add.w	r2, r7, #14
 8000ada:	f107 0010 	add.w	r0, r7, #16
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	490a      	ldr	r1, [pc, #40]	@ (8000b0c <esp_send_data+0x68>)
 8000ae4:	f7ff fd5c 	bl	80005a0 <esp_at_command>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000aee:	f107 020e 	add.w	r2, r7, #14
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	4905      	ldr	r1, [pc, #20]	@ (8000b0c <esp_send_data+0x68>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fd51 	bl	80005a0 <esp_at_command>
	}
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	@ 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08005040 	.word	0x08005040
 8000b0c:	20000094 	.word	0x20000094

08000b10 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <drv_uart_init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <drv_uart_init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <drv_uart_init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <drv_uart_init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <drv_uart_init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <drv_uart_init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <drv_uart_init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <drv_uart_init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <drv_uart_init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <drv_uart_init+0x58>)
 8000b48:	f001 fca0 	bl	800248c <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <drv_uart_init+0x48>
        return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e005      	b.n	8000b64 <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4905      	ldr	r1, [pc, #20]	@ (8000b70 <drv_uart_init+0x60>)
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <drv_uart_init+0x58>)
 8000b5e:	f001 fd70 	bl	8002642 <HAL_UART_Receive_IT>
    return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000494 	.word	0x20000494
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	20000512 	.word	0x20000512

08000b74 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	230a      	movs	r3, #10
 8000b80:	2201      	movs	r2, #1
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <__io_putchar+0x2c>)
 8000b84:	f001 fcd2 	bl	800252c <HAL_UART_Transmit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <__io_putchar+0x1e>
        return ch;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	e001      	b.n	8000b96 <__io_putchar+0x22>
    return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000494 	.word	0x20000494

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fbfd 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f859 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f8c1 	bl	8000d3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000bba:	f7ff ffa9 	bl	8000b10 <drv_uart_init>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8000bc6:	f7ff fe1d 	bl	8000804 <drv_esp_init>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	607b      	str	r3, [r7, #4]
  if(ret != 0) Error_Handler();
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <main+0x38>
 8000bd8:	f000 f9e6 	bl	8000fa8 <Error_Handler>
  printf("Start main() \r\n");
 8000bdc:	481b      	ldr	r0, [pc, #108]	@ (8000c4c <main+0xa8>)
 8000bde:	f002 fddd 	bl	800379c <puts>
  AiotClient_Init();
 8000be2:	f7ff ff4b 	bl	8000a7c <AiotClient_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000be6:	491a      	ldr	r1, [pc, #104]	@ (8000c50 <main+0xac>)
 8000be8:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <main+0xb0>)
 8000bea:	f002 ff5b 	bl	8003aa4 <strstr>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d01d      	beq.n	8000c30 <main+0x8c>
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <main+0xb0>)
 8000bf6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <main+0xb0>)
 8000bfe:	5cd3      	ldrb	r3, [r2, r3]
 8000c00:	2b0a      	cmp	r3, #10
 8000c02:	d115      	bne.n	8000c30 <main+0x8c>
		{
			//수신포멧  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000c04:	215b      	movs	r1, #91	@ 0x5b
 8000c06:	4813      	ldr	r0, [pc, #76]	@ (8000c54 <main+0xb0>)
 8000c08:	f002 fed0 	bl	80039ac <strchr>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <main+0xb4>)
 8000c12:	f002 ffd0 	bl	8003bb6 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <main+0xb0>)
 8000c1e:	f002 febd 	bl	800399c <memset>
			cb_data.length = 0;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <main+0xb0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <main+0xb4>)
 8000c2c:	f000 f918 	bl	8000e60 <esp_event>
		}
		if(rx2Flag)
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <main+0xb8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0d5      	beq.n	8000be6 <main+0x42>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000c3a:	4909      	ldr	r1, [pc, #36]	@ (8000c60 <main+0xbc>)
 8000c3c:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <main+0xc0>)
 8000c3e:	f002 fd3d 	bl	80036bc <iprintf>
			rx2Flag =0;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <main+0xb8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000c48:	e7cd      	b.n	8000be6 <main+0x42>
 8000c4a:	bf00      	nop
 8000c4c:	08005050 	.word	0x08005050
 8000c50:	08005060 	.word	0x08005060
 8000c54:	20000514 	.word	0x20000514
 8000c58:	20000964 	.word	0x20000964
 8000c5c:	200004dc 	.word	0x200004dc
 8000c60:	200004e0 	.word	0x200004e0
 8000c64:	08005068 	.word	0x08005068

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	@ 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	2230      	movs	r2, #48	@ 0x30
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fe90 	bl	800399c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	4a27      	ldr	r2, [pc, #156]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9c:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <SystemClock_Config+0xd0>)
 8000cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cdc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ce0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 ff34 	bl	8001b5c <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cfa:	f000 f955 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2302      	movs	r3, #2
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f996 	bl	800204c <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d26:	f000 f93f 	bl	8000fa8 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a25      	ldr	r2, [pc, #148]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4812      	ldr	r0, [pc, #72]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000dc8:	f000 feae 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <MX_GPIO_Init+0xd8>)
 8000de4:	f000 fd1c 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000de8:	2320      	movs	r3, #32
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000e00:	f000 fd0e 	bl	8001820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800

08000e18 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <MX_GPIO_LED_ON+0x20>)
 8000e2a:	f000 fe7d 	bl	8001b28 <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020000 	.word	0x40020000

08000e3c <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <MX_GPIO_LED_OFF+0x20>)
 8000e4e:	f000 fe6b 	bl	8001b28 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40020000 	.word	0x40020000

08000e60 <esp_event>:
void esp_event(char * recvBuf)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09c      	sub	sp, #112	@ 0x70
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
  int i=0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000e6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	223c      	movs	r2, #60	@ 0x3c
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fd87 	bl	800399c <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff f9b0 	bl	80001f4 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a39      	ldr	r2, [pc, #228]	@ (8000f80 <esp_event+0x120>)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4838      	ldr	r0, [pc, #224]	@ (8000f84 <esp_event+0x124>)
 8000ea2:	f002 fc0b 	bl	80036bc <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000ea6:	4938      	ldr	r1, [pc, #224]	@ (8000f88 <esp_event+0x128>)
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f002 fd9f 	bl	80039ec <strtok>
 8000eae:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000eb0:	e011      	b.n	8000ed6 <esp_event+0x76>
  {
    pArray[i] = pToken;
 8000eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	3368      	adds	r3, #104	@ 0x68
 8000eb8:	443b      	add	r3, r7
 8000eba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ebc:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	dc08      	bgt.n	8000ede <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8000ecc:	492e      	ldr	r1, [pc, #184]	@ (8000f88 <esp_event+0x128>)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f002 fd8c 	bl	80039ec <strtok>
 8000ed4:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000ed6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ea      	bne.n	8000eb2 <esp_event+0x52>
 8000edc:	e000      	b.n	8000ee0 <esp_event+0x80>
      break;
 8000ede:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8000ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ee2:	492a      	ldr	r1, [pc, #168]	@ (8000f8c <esp_event+0x12c>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f97b 	bl	80001e0 <strcmp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d12c      	bne.n	8000f4a <esp_event+0xea>
  {
  	if(!strcmp(pArray[2],"ON"))
 8000ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ef2:	4927      	ldr	r1, [pc, #156]	@ (8000f90 <esp_event+0x130>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f973 	bl	80001e0 <strcmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <esp_event+0xa8>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8000f00:	2020      	movs	r0, #32
 8000f02:	f7ff ff89 	bl	8000e18 <MX_GPIO_LED_ON>
 8000f06:	e00a      	b.n	8000f1e <esp_event+0xbe>

  	}
		else if(!strcmp(pArray[2],"OFF"))
 8000f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f0a:	4922      	ldr	r1, [pc, #136]	@ (8000f94 <esp_event+0x134>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f967 	bl	80001e0 <strcmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <esp_event+0xbe>
		{
				MX_GPIO_LED_OFF(LD2_Pin);
 8000f18:	2020      	movs	r0, #32
 8000f1a:	f7ff ff8f 	bl	8000e3c <MX_GPIO_LED_OFF>
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8000f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f24:	f107 000c 	add.w	r0, r7, #12
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	491a      	ldr	r1, [pc, #104]	@ (8000f98 <esp_event+0x138>)
 8000f2e:	f002 fc3d 	bl	80037ac <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fdb4 	bl	8000aa4 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <esp_event+0x13c>)
 8000f44:	f002 fbba 	bl	80036bc <iprintf>
 8000f48:	e017      	b.n	8000f7a <esp_event+0x11a>
  else if(!strncmp(pArray[1]," New conn",8))
 8000f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4914      	ldr	r1, [pc, #80]	@ (8000fa0 <esp_event+0x140>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fd38 	bl	80039c6 <strncmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <esp_event+0x114>
  else if(!strncmp(pArray[1]," Already log",8))
 8000f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f5e:	2208      	movs	r2, #8
 8000f60:	4910      	ldr	r1, [pc, #64]	@ (8000fa4 <esp_event+0x144>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fd2f 	bl	80039c6 <strncmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <esp_event+0x118>
			esp_client_conn();
 8000f6e:	f7ff fc1b 	bl	80007a8 <esp_client_conn>
      return;
 8000f72:	e002      	b.n	8000f7a <esp_event+0x11a>
     return;
 8000f74:	bf00      	nop
 8000f76:	e000      	b.n	8000f7a <esp_event+0x11a>
      return;
 8000f78:	bf00      	nop
}
 8000f7a:	3768      	adds	r7, #104	@ 0x68
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000964 	.word	0x20000964
 8000f84:	08005078 	.word	0x08005078
 8000f88:	0800508c 	.word	0x0800508c
 8000f8c:	08005090 	.word	0x08005090
 8000f90:	08005094 	.word	0x08005094
 8000f94:	08005098 	.word	0x08005098
 8000f98:	0800509c 	.word	0x0800509c
 8000f9c:	080050c4 	.word	0x080050c4
 8000fa0:	080050a8 	.word	0x080050a8
 8000fa4:	080050b4 	.word	0x080050b4

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f000 fb40 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	@ 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3a      	ldr	r2, [pc, #232]	@ (800110c <HAL_UART_MspInit+0x108>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d134      	bne.n	8001090 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a38      	ldr	r2, [pc, #224]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105e:	230c      	movs	r3, #12
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4826      	ldr	r0, [pc, #152]	@ (8001114 <HAL_UART_MspInit+0x110>)
 800107a:	f000 fbd1 	bl	8001820 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2026      	movs	r0, #38	@ 0x26
 8001084:	f000 fb03 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001088:	2026      	movs	r0, #38	@ 0x26
 800108a:	f000 fb1c 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800108e:	e038      	b.n	8001102 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a20      	ldr	r2, [pc, #128]	@ (8001118 <HAL_UART_MspInit+0x114>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d133      	bne.n	8001102 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010a4:	f043 0320 	orr.w	r3, r3, #32
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_UART_MspInit+0x10c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d2:	23c0      	movs	r3, #192	@ 0xc0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010e2:	2308      	movs	r3, #8
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	@ (800111c <HAL_UART_MspInit+0x118>)
 80010ee:	f000 fb97 	bl	8001820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2047      	movs	r0, #71	@ 0x47
 80010f8:	f000 fac9 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010fc:	2047      	movs	r0, #71	@ 0x47
 80010fe:	f000 fae2 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	@ 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40011400 	.word	0x40011400
 800111c:	40020800 	.word	0x40020800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f96b 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <USART2_IRQHandler+0x10>)
 8001186:	f001 fa81 	bl	800268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000494 	.word	0x20000494

08001194 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART6_IRQHandler+0x10>)
 800119a:	f001 fa77 	bl	800268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000918 	.word	0x20000918

080011a8 <_getpid>:
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	2301      	movs	r3, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_kill>:
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	f002 fccb 	bl	8003b5c <__errno>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2216      	movs	r2, #22
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_exit>:
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe7 	bl	80011b8 <_kill>
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <_exit+0x12>

080011ee <_read>:
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e00a      	b.n	8001216 <_read+0x28>
 8001200:	f3af 8000 	nop.w
 8001204:	4601      	mov	r1, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	b2ca      	uxtb	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf0      	blt.n	8001200 <_read+0x12>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_write>:
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e009      	b.n	800124e <_write+0x26>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fc96 	bl	8000b74 <__io_putchar>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbf1      	blt.n	800123a <_write+0x12>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_close>:
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_fstat>:
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_isatty>:
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	2301      	movs	r3, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_lseek>:
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	2300      	movs	r3, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_sbrk>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
 80012f8:	f002 fc30 	bl	8003b5c <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20020000 	.word	0x20020000
 8001328:	00000400 	.word	0x00000400
 800132c:	200009a4 	.word	0x200009a4
 8001330:	20000af8 	.word	0x20000af8

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001390 <LoopFillZerobss+0xe>
 800135c:	f7ff ffea 	bl	8001334 <SystemInit>
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <LoopFillZerobss+0x12>)
 8001362:	490d      	ldr	r1, [pc, #52]	@ (8001398 <LoopFillZerobss+0x16>)
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <LoopFillZerobss+0x1a>)
 8001366:	2300      	movs	r3, #0
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:
 800136a:	58d4      	ldr	r4, [r2, r3]
 800136c:	50c4      	str	r4, [r0, r3]
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:
 8001370:	18c4      	adds	r4, r0, r3
 8001372:	428c      	cmp	r4, r1
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <LoopFillZerobss+0x1e>)
 8001378:	4c0a      	ldr	r4, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x22>)
 800137a:	2300      	movs	r3, #0
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:
 8001382:	42a2      	cmp	r2, r4
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>
 8001386:	f002 fbef 	bl	8003b68 <__libc_init_array>
 800138a:	f7ff fc0b 	bl	8000ba4 <main>
 800138e:	4770      	bx	lr
 8001390:	20020000 	.word	0x20020000
 8001394:	20000000 	.word	0x20000000
 8001398:	20000068 	.word	0x20000068
 800139c:	080051e0 	.word	0x080051e0
 80013a0:	20000068 	.word	0x20000068
 80013a4:	20000af8 	.word	0x20000af8

080013a8 <ADC_IRQHandler>:
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f94f 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fde8 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f967 	bl	80016e2 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f92f 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	200009a8 	.word	0x200009a8

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200009a8 	.word	0x200009a8

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff feb6 	bl	8001478 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d008      	beq.n	800172c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e052      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0216 	bic.w	r2, r2, #22
 800173a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800174a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <HAL_DMA_Abort+0x62>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0208 	bic.w	r2, r2, #8
 800176a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	e013      	b.n	80017a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177e:	f7ff fe7b 	bl	8001478 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b05      	cmp	r3, #5
 800178a:	d90c      	bls.n	80017a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e015      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e4      	bne.n	800177e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	223f      	movs	r2, #63	@ 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2280      	movs	r2, #128	@ 0x80
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e00c      	b.n	8001812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e159      	b.n	8001af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8148 	bne.w	8001aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	2b02      	cmp	r3, #2
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d017      	beq.n	8001910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b57      	ldr	r3, [pc, #348]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a56      	ldr	r2, [pc, #344]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b54      	ldr	r3, [pc, #336]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a49      	ldr	r2, [pc, #292]	@ (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x202>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1fe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <HAL_GPIO_Init+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1fa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a46      	ldr	r2, [pc, #280]	@ (8001b1c <HAL_GPIO_Init+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1f6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	@ (8001b20 <HAL_GPIO_Init+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1f2>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	@ (8001b0c <HAL_GPIO_Init+0x2ec>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b38      	ldr	r3, [pc, #224]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f aea2 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e267      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d075      	beq.n	8001c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7a:	4b88      	ldr	r3, [pc, #544]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d00c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b85      	ldr	r3, [pc, #532]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d112      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b82      	ldr	r3, [pc, #520]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05b      	beq.n	8001c64 <HAL_RCC_OscConfig+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d157      	bne.n	8001c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e242      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b70      	ldr	r3, [pc, #448]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6f      	ldr	r2, [pc, #444]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6c      	ldr	r2, [pc, #432]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bf4:	4b69      	ldr	r3, [pc, #420]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a68      	ldr	r2, [pc, #416]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b66      	ldr	r3, [pc, #408]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a65      	ldr	r2, [pc, #404]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc30 	bl	8001478 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc2c 	bl	8001478 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e207      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xc0>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc1c 	bl	8001478 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc18 	bl	8001478 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1f3      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe8>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	4b4a      	ldr	r3, [pc, #296]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1c7      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4937      	ldr	r1, [pc, #220]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_RCC_OscConfig+0x244>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fbd1 	bl	8001478 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff fbcd 	bl	8001478 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1a8      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4925      	ldr	r1, [pc, #148]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_RCC_OscConfig+0x244>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fbb0 	bl	8001478 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fbac 	bl	8001478 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e187      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_RCC_OscConfig+0x248>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff fb90 	bl	8001478 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb8c 	bl	8001478 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e167      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x200>
 8001d7a:	e01b      	b.n	8001db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_OscConfig+0x248>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fb79 	bl	8001478 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e00e      	b.n	8001da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fb75 	bl	8001478 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d907      	bls.n	8001da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e150      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ea      	bne.n	8001d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8097 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b81      	ldr	r3, [pc, #516]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a7c      	ldr	r2, [pc, #496]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b77      	ldr	r3, [pc, #476]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b74      	ldr	r3, [pc, #464]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a73      	ldr	r2, [pc, #460]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb35 	bl	8001478 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff fb31 	bl	8001478 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e10c      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
 8001e38:	4b64      	ldr	r3, [pc, #400]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a63      	ldr	r2, [pc, #396]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x324>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x30c>
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a5e      	ldr	r2, [pc, #376]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x324>
 8001e68:	4b58      	ldr	r3, [pc, #352]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a57      	ldr	r2, [pc, #348]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	4b55      	ldr	r3, [pc, #340]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a54      	ldr	r2, [pc, #336]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff faf6 	bl	8001478 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff faf2 	bl	8001478 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0cb      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ee      	beq.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fae0 	bl	8001478 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fadc 	bl	8001478 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0b5      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	4a38      	ldr	r2, [pc, #224]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a1 	beq.w	800203c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d05c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d141      	bne.n	8001f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fab0 	bl	8001478 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff faac 	bl	8001478 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e087      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	491b      	ldr	r1, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fa85 	bl	8001478 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fa81 	bl	8001478 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e05c      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x416>
 8001f90:	e054      	b.n	800203c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fa6e 	bl	8001478 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fa6a 	bl	8001478 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e045      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
 8001fbe:	e03d      	b.n	800203c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e038      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x4ec>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d028      	beq.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d121      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d11a      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002010:	4293      	cmp	r3, r2
 8002012:	d111      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0cc      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b68      	ldr	r3, [pc, #416]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d90c      	bls.n	8002088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d044      	beq.n	800216c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e067      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7ff f99c 	bl	8001478 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff f998 	bl	8001478 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e04f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	@ (800220c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f8fc 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00
 8002208:	40023800 	.word	0x40023800
 800220c:	080050d8 	.word	0x080050d8
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b094      	sub	sp, #80	@ 0x50
 800221e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002230:	4b79      	ldr	r3, [pc, #484]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d00d      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x40>
 800223c:	2b08      	cmp	r3, #8
 800223e:	f200 80e1 	bhi.w	8002404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 8002246:	2b04      	cmp	r3, #4
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x3a>
 800224a:	e0db      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_GetSysClockFreq+0x204>)
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002250:	e0db      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002252:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x208>)
 8002254:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002256:	e0d8      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002258:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002260:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002262:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226e:	4b6a      	ldr	r3, [pc, #424]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	099b      	lsrs	r3, r3, #6
 8002274:	2200      	movs	r2, #0
 8002276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
 8002286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800228a:	4622      	mov	r2, r4
 800228c:	462b      	mov	r3, r5
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229c:	0150      	lsls	r0, r2, #5
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4621      	mov	r1, r4
 80022a4:	1a51      	subs	r1, r2, r1
 80022a6:	6139      	str	r1, [r7, #16]
 80022a8:	4629      	mov	r1, r5
 80022aa:	eb63 0301 	sbc.w	r3, r3, r1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022bc:	4659      	mov	r1, fp
 80022be:	018b      	lsls	r3, r1, #6
 80022c0:	4651      	mov	r1, sl
 80022c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c6:	4651      	mov	r1, sl
 80022c8:	018a      	lsls	r2, r1, #6
 80022ca:	4651      	mov	r1, sl
 80022cc:	ebb2 0801 	subs.w	r8, r2, r1
 80022d0:	4659      	mov	r1, fp
 80022d2:	eb63 0901 	sbc.w	r9, r3, r1
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ea:	4690      	mov	r8, r2
 80022ec:	4699      	mov	r9, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	eb18 0303 	adds.w	r3, r8, r3
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	462b      	mov	r3, r5
 80022f8:	eb49 0303 	adc.w	r3, r9, r3
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800230a:	4629      	mov	r1, r5
 800230c:	024b      	lsls	r3, r1, #9
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002314:	4621      	mov	r1, r4
 8002316:	024a      	lsls	r2, r1, #9
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231e:	2200      	movs	r2, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002328:	f7fd ffc2 	bl	80002b0 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4613      	mov	r3, r2
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002334:	e058      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	2200      	movs	r2, #0
 800233e:	4618      	mov	r0, r3
 8002340:	4611      	mov	r1, r2
 8002342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
 800234c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002350:	4642      	mov	r2, r8
 8002352:	464b      	mov	r3, r9
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	0159      	lsls	r1, r3, #5
 800235e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002362:	0150      	lsls	r0, r2, #5
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4641      	mov	r1, r8
 800236a:	ebb2 0a01 	subs.w	sl, r2, r1
 800236e:	4649      	mov	r1, r9
 8002370:	eb63 0b01 	sbc.w	fp, r3, r1
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002388:	ebb2 040a 	subs.w	r4, r2, sl
 800238c:	eb63 050b 	sbc.w	r5, r3, fp
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	00eb      	lsls	r3, r5, #3
 800239a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239e:	00e2      	lsls	r2, r4, #3
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	4643      	mov	r3, r8
 80023a6:	18e3      	adds	r3, r4, r3
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	464b      	mov	r3, r9
 80023ac:	eb45 0303 	adc.w	r3, r5, r3
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023be:	4629      	mov	r1, r5
 80023c0:	028b      	lsls	r3, r1, #10
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c8:	4621      	mov	r1, r4
 80023ca:	028a      	lsls	r2, r1, #10
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d2:	2200      	movs	r2, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	61fa      	str	r2, [r7, #28]
 80023d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023dc:	f7fd ff68 	bl	80002b0 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4613      	mov	r3, r2
 80023e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	3301      	adds	r3, #1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80023f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002402:	e002      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetSysClockFreq+0x204>)
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800240c:	4618      	mov	r0, r3
 800240e:	3750      	adds	r7, #80	@ 0x50
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	080050e8 	.word	0x080050e8

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffdc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	080050e8 	.word	0x080050e8

0800248c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e042      	b.n	8002524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fda6 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fdbd 	bl	8003050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	d175      	bne.n	8002638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Transmit+0x2c>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e06e      	b.n	800263a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2221      	movs	r2, #33	@ 0x21
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7fe ff85 	bl	8001478 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002584:	d108      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e003      	b.n	80025a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a0:	e02e      	b.n	8002600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fb1f 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e03a      	b.n	800263a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3302      	adds	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e007      	b.n	80025f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1cb      	bne.n	80025a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	2140      	movs	r1, #64	@ 0x40
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 faeb 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e006      	b.n	800263a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d112      	bne.n	8002682 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_UART_Receive_IT+0x26>
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e00b      	b.n	8002684 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	461a      	mov	r2, r3
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fb12 	bl	8002ca2 <UART_Start_Receive_IT>
 800267e:	4603      	mov	r3, r0
 8002680:	e000      	b.n	8002684 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0ba      	sub	sp, #232	@ 0xe8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_UART_IRQHandler+0x66>
 80026de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fbf2 	bl	8002ed4 <UART_Receive_IT>
      return;
 80026f0:	e25b      	b.n	8002baa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80de 	beq.w	80028b8 <HAL_UART_IRQHandler+0x22c>
 80026fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800270c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80d1 	beq.w	80028b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_UART_IRQHandler+0xae>
 8002722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_UART_IRQHandler+0xd2>
 8002746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f043 0202 	orr.w	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_UART_IRQHandler+0xf6>
 800276a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f043 0204 	orr.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d011      	beq.n	80027b2 <HAL_UART_IRQHandler+0x126>
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800279a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f043 0208 	orr.w	r2, r3, #8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 81f2 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_UART_IRQHandler+0x14e>
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb7d 	bl	8002ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_UART_IRQHandler+0x17a>
 80027fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04f      	beq.n	80028a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa85 	bl	8002d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002816:	2b40      	cmp	r3, #64	@ 0x40
 8002818:	d141      	bne.n	800289e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800284a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800285e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1d9      	bne.n	800281a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002872:	4a7e      	ldr	r2, [pc, #504]	@ (8002a6c <HAL_UART_IRQHandler+0x3e0>)
 8002874:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe ffad 	bl	80017da <HAL_DMA_Abort_IT>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002890:	4610      	mov	r0, r2
 8002892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e00e      	b.n	80028b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f994 	bl	8002bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	e00a      	b.n	80028b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f990 	bl	8002bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	e006      	b.n	80028b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f98c 	bl	8002bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028b2:	e175      	b.n	8002ba0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	bf00      	nop
    return;
 80028b6:	e173      	b.n	8002ba0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 814f 	bne.w	8002b60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8148 	beq.w	8002b60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8141 	beq.w	8002b60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	f040 80b6 	bne.w	8002a70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8145 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800291e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002922:	429a      	cmp	r2, r3
 8002924:	f080 813e 	bcs.w	8002ba4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800292e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800293a:	f000 8088 	beq.w	8002a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800295c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800296a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800296e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1d9      	bne.n	800293e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800299a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e1      	bne.n	800298a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e3      	bne.n	80029c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1e:	f023 0310 	bic.w	r3, r3, #16
 8002a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e3      	bne.n	8002a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fe56 	bl	80016fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8b7 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a6a:	e09b      	b.n	8002ba4 <HAL_UART_IRQHandler+0x518>
 8002a6c:	08002ddd 	.word	0x08002ddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 808e 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8089 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8002abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e3      	bne.n	8002a96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e3      	bne.n	8002ace <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0310 	bic.w	r3, r3, #16
 8002b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b38:	61fa      	str	r2, [r7, #28]
 8002b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	617b      	str	r3, [r7, #20]
   return(result);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e3      	bne.n	8002b14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f83d 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b5e:	e023      	b.n	8002ba8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_UART_IRQHandler+0x4f4>
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f943 	bl	8002e04 <UART_Transmit_IT>
    return;
 8002b7e:	e014      	b.n	8002baa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <HAL_UART_IRQHandler+0x51e>
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f983 	bl	8002ea4 <UART_EndTransmit_IT>
    return;
 8002b9e:	e004      	b.n	8002baa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ba0:	bf00      	nop
 8002ba2:	e002      	b.n	8002baa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba8:	bf00      	nop
  }
}
 8002baa:	37e8      	adds	r7, #232	@ 0xe8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	e03b      	b.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d037      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe fc35 	bl	8001478 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e03a      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d023      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b80      	cmp	r3, #128	@ 0x80
 8002c36:	d020      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d01d      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d116      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f857 	bl	8002d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0b4      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	@ 0x22
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b095      	sub	sp, #84	@ 0x54
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e5      	bne.n	8002d52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d119      	bne.n	8002dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f023 0310 	bic.w	r3, r3, #16
 8002da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dae:	61ba      	str	r2, [r7, #24]
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	613b      	str	r3, [r7, #16]
   return(result);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dd0:	bf00      	nop
 8002dd2:	3754      	adds	r7, #84	@ 0x54
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fee4 	bl	8002bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b21      	cmp	r3, #33	@ 0x21
 8002e16:	d13e      	bne.n	8002e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d114      	bne.n	8002e4c <UART_Transmit_IT+0x48>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d110      	bne.n	8002e4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]
 8002e4a:	e008      	b.n	8002e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	1c59      	adds	r1, r3, #1
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6211      	str	r1, [r2, #32]
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fe73 	bl	8002bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	@ 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b22      	cmp	r3, #34	@ 0x22
 8002ee6:	f040 80ae 	bne.w	8003046 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef2:	d117      	bne.n	8002f24 <UART_Receive_IT+0x50>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d113      	bne.n	8002f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f22:	e026      	b.n	8002f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f36:	d007      	beq.n	8002f48 <UART_Receive_IT+0x74>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <UART_Receive_IT+0x82>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e008      	b.n	8002f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d15d      	bne.n	8003042 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0220 	bic.w	r2, r2, #32
 8002f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d135      	bne.n	8003038 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	623a      	str	r2, [r7, #32]
 8002ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d10a      	bne.n	800302a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fdd1 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
 8003036:	e002      	b.n	800303e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fcc1 	bl	80009c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e002      	b.n	8003048 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3730      	adds	r7, #48	@ 0x30
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b0c0      	sub	sp, #256	@ 0x100
 8003056:	af00      	add	r7, sp, #0
 8003058:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	68d9      	ldr	r1, [r3, #12]
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	ea40 0301 	orr.w	r3, r0, r1
 8003078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	431a      	orrs	r2, r3
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030a8:	f021 010c 	bic.w	r1, r1, #12
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030b6:	430b      	orrs	r3, r1
 80030b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ca:	6999      	ldr	r1, [r3, #24]
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	ea40 0301 	orr.w	r3, r0, r1
 80030d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b8f      	ldr	r3, [pc, #572]	@ (800331c <UART_SetConfig+0x2cc>)
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d005      	beq.n	80030f0 <UART_SetConfig+0xa0>
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003320 <UART_SetConfig+0x2d0>)
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d104      	bne.n	80030fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f0:	f7ff f9b8 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 80030f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030f8:	e003      	b.n	8003102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fa:	f7ff f99f 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 80030fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800310c:	f040 810c 	bne.w	8003328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003114:	2200      	movs	r2, #0
 8003116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800311a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800311e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	1891      	adds	r1, r2, r2
 8003128:	65b9      	str	r1, [r7, #88]	@ 0x58
 800312a:	415b      	adcs	r3, r3
 800312c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800312e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003132:	4621      	mov	r1, r4
 8003134:	eb12 0801 	adds.w	r8, r2, r1
 8003138:	4629      	mov	r1, r5
 800313a:	eb43 0901 	adc.w	r9, r3, r1
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4623      	mov	r3, r4
 8003158:	eb18 0303 	adds.w	r3, r8, r3
 800315c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003160:	462b      	mov	r3, r5
 8003162:	eb49 0303 	adc.w	r3, r9, r3
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003176:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800317a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800317e:	460b      	mov	r3, r1
 8003180:	18db      	adds	r3, r3, r3
 8003182:	653b      	str	r3, [r7, #80]	@ 0x50
 8003184:	4613      	mov	r3, r2
 8003186:	eb42 0303 	adc.w	r3, r2, r3
 800318a:	657b      	str	r3, [r7, #84]	@ 0x54
 800318c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003194:	f7fd f88c 	bl	80002b0 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <UART_SetConfig+0x2d4>)
 800319e:	fba3 2302 	umull	r2, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	011c      	lsls	r4, r3, #4
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031c0:	415b      	adcs	r3, r3
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031c8:	4641      	mov	r1, r8
 80031ca:	eb12 0a01 	adds.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb43 0b01 	adc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e8:	4692      	mov	sl, r2
 80031ea:	469b      	mov	fp, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	eb1a 0303 	adds.w	r3, sl, r3
 80031f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb4b 0303 	adc.w	r3, fp, r3
 80031fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800320c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003214:	460b      	mov	r3, r1
 8003216:	18db      	adds	r3, r3, r3
 8003218:	643b      	str	r3, [r7, #64]	@ 0x40
 800321a:	4613      	mov	r3, r2
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	647b      	str	r3, [r7, #68]	@ 0x44
 8003222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800322a:	f7fd f841 	bl	80002b0 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4611      	mov	r1, r2
 8003234:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <UART_SetConfig+0x2d4>)
 8003236:	fba3 2301 	umull	r2, r3, r3, r1
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2264      	movs	r2, #100	@ 0x64
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	1acb      	subs	r3, r1, r3
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800324a:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <UART_SetConfig+0x2d4>)
 800324c:	fba3 2302 	umull	r2, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003258:	441c      	add	r4, r3
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003264:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003274:	415b      	adcs	r3, r3
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800327c:	4641      	mov	r1, r8
 800327e:	1851      	adds	r1, r2, r1
 8003280:	6339      	str	r1, [r7, #48]	@ 0x30
 8003282:	4649      	mov	r1, r9
 8003284:	414b      	adcs	r3, r1
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003294:	4659      	mov	r1, fp
 8003296:	00cb      	lsls	r3, r1, #3
 8003298:	4651      	mov	r1, sl
 800329a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329e:	4651      	mov	r1, sl
 80032a0:	00ca      	lsls	r2, r1, #3
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	4642      	mov	r2, r8
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b0:	464b      	mov	r3, r9
 80032b2:	460a      	mov	r2, r1
 80032b4:	eb42 0303 	adc.w	r3, r2, r3
 80032b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032d0:	460b      	mov	r3, r1
 80032d2:	18db      	adds	r3, r3, r3
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d6:	4613      	mov	r3, r2
 80032d8:	eb42 0303 	adc.w	r3, r2, r3
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032e6:	f7fc ffe3 	bl	80002b0 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <UART_SetConfig+0x2d4>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	@ 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	3332      	adds	r3, #50	@ 0x32
 8003302:	4a08      	ldr	r2, [pc, #32]	@ (8003324 <UART_SetConfig+0x2d4>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	f003 0207 	and.w	r2, r3, #7
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4422      	add	r2, r4
 8003316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003318:	e106      	b.n	8003528 <UART_SetConfig+0x4d8>
 800331a:	bf00      	nop
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003332:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800333a:	4642      	mov	r2, r8
 800333c:	464b      	mov	r3, r9
 800333e:	1891      	adds	r1, r2, r2
 8003340:	6239      	str	r1, [r7, #32]
 8003342:	415b      	adcs	r3, r3
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
 8003346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800334a:	4641      	mov	r1, r8
 800334c:	1854      	adds	r4, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb43 0501 	adc.w	r5, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	00eb      	lsls	r3, r5, #3
 800335e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003362:	00e2      	lsls	r2, r4, #3
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	4643      	mov	r3, r8
 800336a:	18e3      	adds	r3, r4, r3
 800336c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003370:	464b      	mov	r3, r9
 8003372:	eb45 0303 	adc.w	r3, r5, r3
 8003376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003386:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003396:	4629      	mov	r1, r5
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a0:	4621      	mov	r1, r4
 80033a2:	008a      	lsls	r2, r1, #2
 80033a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033a8:	f7fc ff82 	bl	80002b0 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b60      	ldr	r3, [pc, #384]	@ (8003534 <UART_SetConfig+0x4e4>)
 80033b2:	fba3 2302 	umull	r2, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	011c      	lsls	r4, r3, #4
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	61b9      	str	r1, [r7, #24]
 80033d4:	415b      	adcs	r3, r3
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6139      	str	r1, [r7, #16]
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003410:	464b      	mov	r3, r9
 8003412:	460a      	mov	r2, r1
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003426:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003434:	4649      	mov	r1, r9
 8003436:	008b      	lsls	r3, r1, #2
 8003438:	4641      	mov	r1, r8
 800343a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343e:	4641      	mov	r1, r8
 8003440:	008a      	lsls	r2, r1, #2
 8003442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003446:	f7fc ff33 	bl	80002b0 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b38      	ldr	r3, [pc, #224]	@ (8003534 <UART_SetConfig+0x4e4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	@ 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	@ 0x32
 8003464:	4a33      	ldr	r2, [pc, #204]	@ (8003534 <UART_SetConfig+0x4e4>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003470:	441c      	add	r4, r3
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	673b      	str	r3, [r7, #112]	@ 0x70
 800347a:	677a      	str	r2, [r7, #116]	@ 0x74
 800347c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	415b      	adcs	r3, r3
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034c2:	464b      	mov	r3, r9
 80034c4:	460a      	mov	r2, r1
 80034c6:	eb42 0303 	adc.w	r3, r2, r3
 80034ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034e4:	4649      	mov	r1, r9
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ee:	4641      	mov	r1, r8
 80034f0:	008a      	lsls	r2, r1, #2
 80034f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034f6:	f7fc fedb 	bl	80002b0 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <UART_SetConfig+0x4e4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	@ 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	3332      	adds	r3, #50	@ 0x32
 8003512:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <UART_SetConfig+0x4e4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4422      	add	r2, r4
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003534:	51eb851f 	.word	0x51eb851f

08003538 <std>:
 8003538:	2300      	movs	r3, #0
 800353a:	b510      	push	{r4, lr}
 800353c:	4604      	mov	r4, r0
 800353e:	e9c0 3300 	strd	r3, r3, [r0]
 8003542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003546:	6083      	str	r3, [r0, #8]
 8003548:	8181      	strh	r1, [r0, #12]
 800354a:	6643      	str	r3, [r0, #100]	@ 0x64
 800354c:	81c2      	strh	r2, [r0, #14]
 800354e:	6183      	str	r3, [r0, #24]
 8003550:	4619      	mov	r1, r3
 8003552:	2208      	movs	r2, #8
 8003554:	305c      	adds	r0, #92	@ 0x5c
 8003556:	f000 fa21 	bl	800399c <memset>
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <std+0x58>)
 800355c:	6263      	str	r3, [r4, #36]	@ 0x24
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <std+0x5c>)
 8003560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <std+0x60>)
 8003564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <std+0x64>)
 8003568:	6323      	str	r3, [r4, #48]	@ 0x30
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <std+0x68>)
 800356c:	6224      	str	r4, [r4, #32]
 800356e:	429c      	cmp	r4, r3
 8003570:	d006      	beq.n	8003580 <std+0x48>
 8003572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003576:	4294      	cmp	r4, r2
 8003578:	d002      	beq.n	8003580 <std+0x48>
 800357a:	33d0      	adds	r3, #208	@ 0xd0
 800357c:	429c      	cmp	r4, r3
 800357e:	d105      	bne.n	800358c <std+0x54>
 8003580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003588:	f000 bb12 	b.w	8003bb0 <__retarget_lock_init_recursive>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	bf00      	nop
 8003590:	080037ed 	.word	0x080037ed
 8003594:	0800380f 	.word	0x0800380f
 8003598:	08003847 	.word	0x08003847
 800359c:	0800386b 	.word	0x0800386b
 80035a0:	200009ac 	.word	0x200009ac

080035a4 <stdio_exit_handler>:
 80035a4:	4a02      	ldr	r2, [pc, #8]	@ (80035b0 <stdio_exit_handler+0xc>)
 80035a6:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <stdio_exit_handler+0x10>)
 80035a8:	4803      	ldr	r0, [pc, #12]	@ (80035b8 <stdio_exit_handler+0x14>)
 80035aa:	f000 b869 	b.w	8003680 <_fwalk_sglue>
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	08004779 	.word	0x08004779
 80035b8:	2000001c 	.word	0x2000001c

080035bc <cleanup_stdio>:
 80035bc:	6841      	ldr	r1, [r0, #4]
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <cleanup_stdio+0x34>)
 80035c0:	4299      	cmp	r1, r3
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
 80035c6:	d001      	beq.n	80035cc <cleanup_stdio+0x10>
 80035c8:	f001 f8d6 	bl	8004778 <_fflush_r>
 80035cc:	68a1      	ldr	r1, [r4, #8]
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <cleanup_stdio+0x38>)
 80035d0:	4299      	cmp	r1, r3
 80035d2:	d002      	beq.n	80035da <cleanup_stdio+0x1e>
 80035d4:	4620      	mov	r0, r4
 80035d6:	f001 f8cf 	bl	8004778 <_fflush_r>
 80035da:	68e1      	ldr	r1, [r4, #12]
 80035dc:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <cleanup_stdio+0x3c>)
 80035de:	4299      	cmp	r1, r3
 80035e0:	d004      	beq.n	80035ec <cleanup_stdio+0x30>
 80035e2:	4620      	mov	r0, r4
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e8:	f001 b8c6 	b.w	8004778 <_fflush_r>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	bf00      	nop
 80035f0:	200009ac 	.word	0x200009ac
 80035f4:	20000a14 	.word	0x20000a14
 80035f8:	20000a7c 	.word	0x20000a7c

080035fc <global_stdio_init.part.0>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <global_stdio_init.part.0+0x30>)
 8003600:	4c0b      	ldr	r4, [pc, #44]	@ (8003630 <global_stdio_init.part.0+0x34>)
 8003602:	4a0c      	ldr	r2, [pc, #48]	@ (8003634 <global_stdio_init.part.0+0x38>)
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	4620      	mov	r0, r4
 8003608:	2200      	movs	r2, #0
 800360a:	2104      	movs	r1, #4
 800360c:	f7ff ff94 	bl	8003538 <std>
 8003610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003614:	2201      	movs	r2, #1
 8003616:	2109      	movs	r1, #9
 8003618:	f7ff ff8e 	bl	8003538 <std>
 800361c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003620:	2202      	movs	r2, #2
 8003622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003626:	2112      	movs	r1, #18
 8003628:	f7ff bf86 	b.w	8003538 <std>
 800362c:	20000ae4 	.word	0x20000ae4
 8003630:	200009ac 	.word	0x200009ac
 8003634:	080035a5 	.word	0x080035a5

08003638 <__sfp_lock_acquire>:
 8003638:	4801      	ldr	r0, [pc, #4]	@ (8003640 <__sfp_lock_acquire+0x8>)
 800363a:	f000 baba 	b.w	8003bb2 <__retarget_lock_acquire_recursive>
 800363e:	bf00      	nop
 8003640:	20000aed 	.word	0x20000aed

08003644 <__sfp_lock_release>:
 8003644:	4801      	ldr	r0, [pc, #4]	@ (800364c <__sfp_lock_release+0x8>)
 8003646:	f000 bab5 	b.w	8003bb4 <__retarget_lock_release_recursive>
 800364a:	bf00      	nop
 800364c:	20000aed 	.word	0x20000aed

08003650 <__sinit>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	f7ff fff0 	bl	8003638 <__sfp_lock_acquire>
 8003658:	6a23      	ldr	r3, [r4, #32]
 800365a:	b11b      	cbz	r3, 8003664 <__sinit+0x14>
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003660:	f7ff bff0 	b.w	8003644 <__sfp_lock_release>
 8003664:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <__sinit+0x28>)
 8003666:	6223      	str	r3, [r4, #32]
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <__sinit+0x2c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f5      	bne.n	800365c <__sinit+0xc>
 8003670:	f7ff ffc4 	bl	80035fc <global_stdio_init.part.0>
 8003674:	e7f2      	b.n	800365c <__sinit+0xc>
 8003676:	bf00      	nop
 8003678:	080035bd 	.word	0x080035bd
 800367c:	20000ae4 	.word	0x20000ae4

08003680 <_fwalk_sglue>:
 8003680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003684:	4607      	mov	r7, r0
 8003686:	4688      	mov	r8, r1
 8003688:	4614      	mov	r4, r2
 800368a:	2600      	movs	r6, #0
 800368c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003690:	f1b9 0901 	subs.w	r9, r9, #1
 8003694:	d505      	bpl.n	80036a2 <_fwalk_sglue+0x22>
 8003696:	6824      	ldr	r4, [r4, #0]
 8003698:	2c00      	cmp	r4, #0
 800369a:	d1f7      	bne.n	800368c <_fwalk_sglue+0xc>
 800369c:	4630      	mov	r0, r6
 800369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a2:	89ab      	ldrh	r3, [r5, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d907      	bls.n	80036b8 <_fwalk_sglue+0x38>
 80036a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036ac:	3301      	adds	r3, #1
 80036ae:	d003      	beq.n	80036b8 <_fwalk_sglue+0x38>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4638      	mov	r0, r7
 80036b4:	47c0      	blx	r8
 80036b6:	4306      	orrs	r6, r0
 80036b8:	3568      	adds	r5, #104	@ 0x68
 80036ba:	e7e9      	b.n	8003690 <_fwalk_sglue+0x10>

080036bc <iprintf>:
 80036bc:	b40f      	push	{r0, r1, r2, r3}
 80036be:	b507      	push	{r0, r1, r2, lr}
 80036c0:	4906      	ldr	r1, [pc, #24]	@ (80036dc <iprintf+0x20>)
 80036c2:	ab04      	add	r3, sp, #16
 80036c4:	6808      	ldr	r0, [r1, #0]
 80036c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ca:	6881      	ldr	r1, [r0, #8]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	f000 fd29 	bl	8004124 <_vfiprintf_r>
 80036d2:	b003      	add	sp, #12
 80036d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d8:	b004      	add	sp, #16
 80036da:	4770      	bx	lr
 80036dc:	20000018 	.word	0x20000018

080036e0 <putchar>:
 80036e0:	4b02      	ldr	r3, [pc, #8]	@ (80036ec <putchar+0xc>)
 80036e2:	4601      	mov	r1, r0
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	6882      	ldr	r2, [r0, #8]
 80036e8:	f001 b8e2 	b.w	80048b0 <_putc_r>
 80036ec:	20000018 	.word	0x20000018

080036f0 <_puts_r>:
 80036f0:	6a03      	ldr	r3, [r0, #32]
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	6884      	ldr	r4, [r0, #8]
 80036f6:	4605      	mov	r5, r0
 80036f8:	460e      	mov	r6, r1
 80036fa:	b90b      	cbnz	r3, 8003700 <_puts_r+0x10>
 80036fc:	f7ff ffa8 	bl	8003650 <__sinit>
 8003700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d405      	bmi.n	8003712 <_puts_r+0x22>
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	0598      	lsls	r0, r3, #22
 800370a:	d402      	bmi.n	8003712 <_puts_r+0x22>
 800370c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800370e:	f000 fa50 	bl	8003bb2 <__retarget_lock_acquire_recursive>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	0719      	lsls	r1, r3, #28
 8003716:	d502      	bpl.n	800371e <_puts_r+0x2e>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d135      	bne.n	800378a <_puts_r+0x9a>
 800371e:	4621      	mov	r1, r4
 8003720:	4628      	mov	r0, r5
 8003722:	f000 f8e5 	bl	80038f0 <__swsetup_r>
 8003726:	b380      	cbz	r0, 800378a <_puts_r+0x9a>
 8003728:	f04f 35ff 	mov.w	r5, #4294967295
 800372c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800372e:	07da      	lsls	r2, r3, #31
 8003730:	d405      	bmi.n	800373e <_puts_r+0x4e>
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	059b      	lsls	r3, r3, #22
 8003736:	d402      	bmi.n	800373e <_puts_r+0x4e>
 8003738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800373a:	f000 fa3b 	bl	8003bb4 <__retarget_lock_release_recursive>
 800373e:	4628      	mov	r0, r5
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	2b00      	cmp	r3, #0
 8003744:	da04      	bge.n	8003750 <_puts_r+0x60>
 8003746:	69a2      	ldr	r2, [r4, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	dc17      	bgt.n	800377c <_puts_r+0x8c>
 800374c:	290a      	cmp	r1, #10
 800374e:	d015      	beq.n	800377c <_puts_r+0x8c>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	6022      	str	r2, [r4, #0]
 8003756:	7019      	strb	r1, [r3, #0]
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800375e:	3b01      	subs	r3, #1
 8003760:	60a3      	str	r3, [r4, #8]
 8003762:	2900      	cmp	r1, #0
 8003764:	d1ed      	bne.n	8003742 <_puts_r+0x52>
 8003766:	2b00      	cmp	r3, #0
 8003768:	da11      	bge.n	800378e <_puts_r+0x9e>
 800376a:	4622      	mov	r2, r4
 800376c:	210a      	movs	r1, #10
 800376e:	4628      	mov	r0, r5
 8003770:	f000 f87f 	bl	8003872 <__swbuf_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d0d7      	beq.n	8003728 <_puts_r+0x38>
 8003778:	250a      	movs	r5, #10
 800377a:	e7d7      	b.n	800372c <_puts_r+0x3c>
 800377c:	4622      	mov	r2, r4
 800377e:	4628      	mov	r0, r5
 8003780:	f000 f877 	bl	8003872 <__swbuf_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d1e7      	bne.n	8003758 <_puts_r+0x68>
 8003788:	e7ce      	b.n	8003728 <_puts_r+0x38>
 800378a:	3e01      	subs	r6, #1
 800378c:	e7e4      	b.n	8003758 <_puts_r+0x68>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	6022      	str	r2, [r4, #0]
 8003794:	220a      	movs	r2, #10
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e7ee      	b.n	8003778 <_puts_r+0x88>
	...

0800379c <puts>:
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <puts+0xc>)
 800379e:	4601      	mov	r1, r0
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	f7ff bfa5 	b.w	80036f0 <_puts_r>
 80037a6:	bf00      	nop
 80037a8:	20000018 	.word	0x20000018

080037ac <siprintf>:
 80037ac:	b40e      	push	{r1, r2, r3}
 80037ae:	b500      	push	{lr}
 80037b0:	b09c      	sub	sp, #112	@ 0x70
 80037b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80037b4:	9002      	str	r0, [sp, #8]
 80037b6:	9006      	str	r0, [sp, #24]
 80037b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037bc:	4809      	ldr	r0, [pc, #36]	@ (80037e4 <siprintf+0x38>)
 80037be:	9107      	str	r1, [sp, #28]
 80037c0:	9104      	str	r1, [sp, #16]
 80037c2:	4909      	ldr	r1, [pc, #36]	@ (80037e8 <siprintf+0x3c>)
 80037c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c8:	9105      	str	r1, [sp, #20]
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	a902      	add	r1, sp, #8
 80037d0:	f000 fb82 	bl	8003ed8 <_svfiprintf_r>
 80037d4:	9b02      	ldr	r3, [sp, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	b01c      	add	sp, #112	@ 0x70
 80037dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e0:	b003      	add	sp, #12
 80037e2:	4770      	bx	lr
 80037e4:	20000018 	.word	0x20000018
 80037e8:	ffff0208 	.word	0xffff0208

080037ec <__sread>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	460c      	mov	r4, r1
 80037f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f4:	f000 f98e 	bl	8003b14 <_read_r>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	bfab      	itete	ge
 80037fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003800:	181b      	addge	r3, r3, r0
 8003802:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003806:	bfac      	ite	ge
 8003808:	6563      	strge	r3, [r4, #84]	@ 0x54
 800380a:	81a3      	strhlt	r3, [r4, #12]
 800380c:	bd10      	pop	{r4, pc}

0800380e <__swrite>:
 800380e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003812:	461f      	mov	r7, r3
 8003814:	898b      	ldrh	r3, [r1, #12]
 8003816:	05db      	lsls	r3, r3, #23
 8003818:	4605      	mov	r5, r0
 800381a:	460c      	mov	r4, r1
 800381c:	4616      	mov	r6, r2
 800381e:	d505      	bpl.n	800382c <__swrite+0x1e>
 8003820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003824:	2302      	movs	r3, #2
 8003826:	2200      	movs	r2, #0
 8003828:	f000 f962 	bl	8003af0 <_lseek_r>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	4632      	mov	r2, r6
 800383a:	463b      	mov	r3, r7
 800383c:	4628      	mov	r0, r5
 800383e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003842:	f000 b979 	b.w	8003b38 <_write_r>

08003846 <__sseek>:
 8003846:	b510      	push	{r4, lr}
 8003848:	460c      	mov	r4, r1
 800384a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384e:	f000 f94f 	bl	8003af0 <_lseek_r>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	bf15      	itete	ne
 8003858:	6560      	strne	r0, [r4, #84]	@ 0x54
 800385a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800385e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003862:	81a3      	strheq	r3, [r4, #12]
 8003864:	bf18      	it	ne
 8003866:	81a3      	strhne	r3, [r4, #12]
 8003868:	bd10      	pop	{r4, pc}

0800386a <__sclose>:
 800386a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386e:	f000 b92f 	b.w	8003ad0 <_close_r>

08003872 <__swbuf_r>:
 8003872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003874:	460e      	mov	r6, r1
 8003876:	4614      	mov	r4, r2
 8003878:	4605      	mov	r5, r0
 800387a:	b118      	cbz	r0, 8003884 <__swbuf_r+0x12>
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	b90b      	cbnz	r3, 8003884 <__swbuf_r+0x12>
 8003880:	f7ff fee6 	bl	8003650 <__sinit>
 8003884:	69a3      	ldr	r3, [r4, #24]
 8003886:	60a3      	str	r3, [r4, #8]
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	071a      	lsls	r2, r3, #28
 800388c:	d501      	bpl.n	8003892 <__swbuf_r+0x20>
 800388e:	6923      	ldr	r3, [r4, #16]
 8003890:	b943      	cbnz	r3, 80038a4 <__swbuf_r+0x32>
 8003892:	4621      	mov	r1, r4
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f82b 	bl	80038f0 <__swsetup_r>
 800389a:	b118      	cbz	r0, 80038a4 <__swbuf_r+0x32>
 800389c:	f04f 37ff 	mov.w	r7, #4294967295
 80038a0:	4638      	mov	r0, r7
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	6922      	ldr	r2, [r4, #16]
 80038a8:	1a98      	subs	r0, r3, r2
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	b2f6      	uxtb	r6, r6
 80038ae:	4283      	cmp	r3, r0
 80038b0:	4637      	mov	r7, r6
 80038b2:	dc05      	bgt.n	80038c0 <__swbuf_r+0x4e>
 80038b4:	4621      	mov	r1, r4
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 ff5e 	bl	8004778 <_fflush_r>
 80038bc:	2800      	cmp	r0, #0
 80038be:	d1ed      	bne.n	800389c <__swbuf_r+0x2a>
 80038c0:	68a3      	ldr	r3, [r4, #8]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	60a3      	str	r3, [r4, #8]
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	6022      	str	r2, [r4, #0]
 80038cc:	701e      	strb	r6, [r3, #0]
 80038ce:	6962      	ldr	r2, [r4, #20]
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d004      	beq.n	80038e0 <__swbuf_r+0x6e>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	07db      	lsls	r3, r3, #31
 80038da:	d5e1      	bpl.n	80038a0 <__swbuf_r+0x2e>
 80038dc:	2e0a      	cmp	r6, #10
 80038de:	d1df      	bne.n	80038a0 <__swbuf_r+0x2e>
 80038e0:	4621      	mov	r1, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	f000 ff48 	bl	8004778 <_fflush_r>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d0d9      	beq.n	80038a0 <__swbuf_r+0x2e>
 80038ec:	e7d6      	b.n	800389c <__swbuf_r+0x2a>
	...

080038f0 <__swsetup_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <__swsetup_r+0xa8>)
 80038f4:	4605      	mov	r5, r0
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	460c      	mov	r4, r1
 80038fa:	b118      	cbz	r0, 8003904 <__swsetup_r+0x14>
 80038fc:	6a03      	ldr	r3, [r0, #32]
 80038fe:	b90b      	cbnz	r3, 8003904 <__swsetup_r+0x14>
 8003900:	f7ff fea6 	bl	8003650 <__sinit>
 8003904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003908:	0719      	lsls	r1, r3, #28
 800390a:	d422      	bmi.n	8003952 <__swsetup_r+0x62>
 800390c:	06da      	lsls	r2, r3, #27
 800390e:	d407      	bmi.n	8003920 <__swsetup_r+0x30>
 8003910:	2209      	movs	r2, #9
 8003912:	602a      	str	r2, [r5, #0]
 8003914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	e033      	b.n	8003988 <__swsetup_r+0x98>
 8003920:	0758      	lsls	r0, r3, #29
 8003922:	d512      	bpl.n	800394a <__swsetup_r+0x5a>
 8003924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003926:	b141      	cbz	r1, 800393a <__swsetup_r+0x4a>
 8003928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800392c:	4299      	cmp	r1, r3
 800392e:	d002      	beq.n	8003936 <__swsetup_r+0x46>
 8003930:	4628      	mov	r0, r5
 8003932:	f000 f975 	bl	8003c20 <_free_r>
 8003936:	2300      	movs	r3, #0
 8003938:	6363      	str	r3, [r4, #52]	@ 0x34
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	b94b      	cbnz	r3, 800396a <__swsetup_r+0x7a>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800395c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003960:	d003      	beq.n	800396a <__swsetup_r+0x7a>
 8003962:	4621      	mov	r1, r4
 8003964:	4628      	mov	r0, r5
 8003966:	f000 ff67 	bl	8004838 <__smakebuf_r>
 800396a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396e:	f013 0201 	ands.w	r2, r3, #1
 8003972:	d00a      	beq.n	800398a <__swsetup_r+0x9a>
 8003974:	2200      	movs	r2, #0
 8003976:	60a2      	str	r2, [r4, #8]
 8003978:	6962      	ldr	r2, [r4, #20]
 800397a:	4252      	negs	r2, r2
 800397c:	61a2      	str	r2, [r4, #24]
 800397e:	6922      	ldr	r2, [r4, #16]
 8003980:	b942      	cbnz	r2, 8003994 <__swsetup_r+0xa4>
 8003982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003986:	d1c5      	bne.n	8003914 <__swsetup_r+0x24>
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	0799      	lsls	r1, r3, #30
 800398c:	bf58      	it	pl
 800398e:	6962      	ldrpl	r2, [r4, #20]
 8003990:	60a2      	str	r2, [r4, #8]
 8003992:	e7f4      	b.n	800397e <__swsetup_r+0x8e>
 8003994:	2000      	movs	r0, #0
 8003996:	e7f7      	b.n	8003988 <__swsetup_r+0x98>
 8003998:	20000018 	.word	0x20000018

0800399c <memset>:
 800399c:	4402      	add	r2, r0
 800399e:	4603      	mov	r3, r0
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d100      	bne.n	80039a6 <memset+0xa>
 80039a4:	4770      	bx	lr
 80039a6:	f803 1b01 	strb.w	r1, [r3], #1
 80039aa:	e7f9      	b.n	80039a0 <memset+0x4>

080039ac <strchr>:
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	4603      	mov	r3, r0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b6:	b112      	cbz	r2, 80039be <strchr+0x12>
 80039b8:	428a      	cmp	r2, r1
 80039ba:	d1f9      	bne.n	80039b0 <strchr+0x4>
 80039bc:	4770      	bx	lr
 80039be:	2900      	cmp	r1, #0
 80039c0:	bf18      	it	ne
 80039c2:	2000      	movne	r0, #0
 80039c4:	4770      	bx	lr

080039c6 <strncmp>:
 80039c6:	b510      	push	{r4, lr}
 80039c8:	b16a      	cbz	r2, 80039e6 <strncmp+0x20>
 80039ca:	3901      	subs	r1, #1
 80039cc:	1884      	adds	r4, r0, r2
 80039ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d103      	bne.n	80039e2 <strncmp+0x1c>
 80039da:	42a0      	cmp	r0, r4
 80039dc:	d001      	beq.n	80039e2 <strncmp+0x1c>
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d1f5      	bne.n	80039ce <strncmp+0x8>
 80039e2:	1ad0      	subs	r0, r2, r3
 80039e4:	bd10      	pop	{r4, pc}
 80039e6:	4610      	mov	r0, r2
 80039e8:	e7fc      	b.n	80039e4 <strncmp+0x1e>
	...

080039ec <strtok>:
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <strtok+0x5c>)
 80039ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f2:	681f      	ldr	r7, [r3, #0]
 80039f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80039f6:	4605      	mov	r5, r0
 80039f8:	460e      	mov	r6, r1
 80039fa:	b9ec      	cbnz	r4, 8003a38 <strtok+0x4c>
 80039fc:	2050      	movs	r0, #80	@ 0x50
 80039fe:	f000 f959 	bl	8003cb4 <malloc>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6478      	str	r0, [r7, #68]	@ 0x44
 8003a06:	b920      	cbnz	r0, 8003a12 <strtok+0x26>
 8003a08:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <strtok+0x60>)
 8003a0a:	4811      	ldr	r0, [pc, #68]	@ (8003a50 <strtok+0x64>)
 8003a0c:	215b      	movs	r1, #91	@ 0x5b
 8003a0e:	f000 f8e9 	bl	8003be4 <__assert_func>
 8003a12:	e9c0 4400 	strd	r4, r4, [r0]
 8003a16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003a1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003a1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003a22:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8003a26:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003a2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003a2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003a32:	6184      	str	r4, [r0, #24]
 8003a34:	7704      	strb	r4, [r0, #28]
 8003a36:	6244      	str	r4, [r0, #36]	@ 0x24
 8003a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a44:	f000 b806 	b.w	8003a54 <__strtok_r>
 8003a48:	20000018 	.word	0x20000018
 8003a4c:	080050f0 	.word	0x080050f0
 8003a50:	08005107 	.word	0x08005107

08003a54 <__strtok_r>:
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	4604      	mov	r4, r0
 8003a58:	b908      	cbnz	r0, 8003a5e <__strtok_r+0xa>
 8003a5a:	6814      	ldr	r4, [r2, #0]
 8003a5c:	b144      	cbz	r4, 8003a70 <__strtok_r+0x1c>
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a64:	460f      	mov	r7, r1
 8003a66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a6a:	b91e      	cbnz	r6, 8003a74 <__strtok_r+0x20>
 8003a6c:	b965      	cbnz	r5, 8003a88 <__strtok_r+0x34>
 8003a6e:	6015      	str	r5, [r2, #0]
 8003a70:	2000      	movs	r0, #0
 8003a72:	e005      	b.n	8003a80 <__strtok_r+0x2c>
 8003a74:	42b5      	cmp	r5, r6
 8003a76:	d1f6      	bne.n	8003a66 <__strtok_r+0x12>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <__strtok_r+0xa>
 8003a7c:	6014      	str	r4, [r2, #0]
 8003a7e:	7003      	strb	r3, [r0, #0]
 8003a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a82:	461c      	mov	r4, r3
 8003a84:	e00c      	b.n	8003aa0 <__strtok_r+0x4c>
 8003a86:	b915      	cbnz	r5, 8003a8e <__strtok_r+0x3a>
 8003a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a8c:	460e      	mov	r6, r1
 8003a8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003a92:	42ab      	cmp	r3, r5
 8003a94:	d1f7      	bne.n	8003a86 <__strtok_r+0x32>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f3      	beq.n	8003a82 <__strtok_r+0x2e>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003aa0:	6014      	str	r4, [r2, #0]
 8003aa2:	e7ed      	b.n	8003a80 <__strtok_r+0x2c>

08003aa4 <strstr>:
 8003aa4:	780a      	ldrb	r2, [r1, #0]
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	b96a      	cbnz	r2, 8003ac6 <strstr+0x22>
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d109      	bne.n	8003ac4 <strstr+0x20>
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f6      	beq.n	8003aaa <strstr+0x6>
 8003abc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003ac0:	429e      	cmp	r6, r3
 8003ac2:	d0f7      	beq.n	8003ab4 <strstr+0x10>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	7803      	ldrb	r3, [r0, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ef      	bne.n	8003aac <strstr+0x8>
 8003acc:	4618      	mov	r0, r3
 8003ace:	e7ec      	b.n	8003aaa <strstr+0x6>

08003ad0 <_close_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4d06      	ldr	r5, [pc, #24]	@ (8003aec <_close_r+0x1c>)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	f7fd fbc0 	bl	8001260 <_close>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_close_r+0x1a>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_close_r+0x1a>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	20000ae8 	.word	0x20000ae8

08003af0 <_lseek_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d07      	ldr	r5, [pc, #28]	@ (8003b10 <_lseek_r+0x20>)
 8003af4:	4604      	mov	r4, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fd fbd5 	bl	80012ae <_lseek>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_lseek_r+0x1e>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_lseek_r+0x1e>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20000ae8 	.word	0x20000ae8

08003b14 <_read_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4d07      	ldr	r5, [pc, #28]	@ (8003b34 <_read_r+0x20>)
 8003b18:	4604      	mov	r4, r0
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	602a      	str	r2, [r5, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f7fd fb63 	bl	80011ee <_read>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_read_r+0x1e>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_read_r+0x1e>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000ae8 	.word	0x20000ae8

08003b38 <_write_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4d07      	ldr	r5, [pc, #28]	@ (8003b58 <_write_r+0x20>)
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	4608      	mov	r0, r1
 8003b40:	4611      	mov	r1, r2
 8003b42:	2200      	movs	r2, #0
 8003b44:	602a      	str	r2, [r5, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f7fd fb6e 	bl	8001228 <_write>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_write_r+0x1e>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_write_r+0x1e>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	20000ae8 	.word	0x20000ae8

08003b5c <__errno>:
 8003b5c:	4b01      	ldr	r3, [pc, #4]	@ (8003b64 <__errno+0x8>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000018 	.word	0x20000018

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ba0 <__libc_init_array+0x38>)
 8003b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba4 <__libc_init_array+0x3c>)
 8003b6e:	1b64      	subs	r4, r4, r5
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	2600      	movs	r6, #0
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	4d0b      	ldr	r5, [pc, #44]	@ (8003ba8 <__libc_init_array+0x40>)
 8003b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003bac <__libc_init_array+0x44>)
 8003b7c:	f000 ff9a 	bl	8004ab4 <_init>
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	2600      	movs	r6, #0
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	080051d8 	.word	0x080051d8
 8003ba4:	080051d8 	.word	0x080051d8
 8003ba8:	080051d8 	.word	0x080051d8
 8003bac:	080051dc 	.word	0x080051dc

08003bb0 <__retarget_lock_init_recursive>:
 8003bb0:	4770      	bx	lr

08003bb2 <__retarget_lock_acquire_recursive>:
 8003bb2:	4770      	bx	lr

08003bb4 <__retarget_lock_release_recursive>:
 8003bb4:	4770      	bx	lr

08003bb6 <strcpy>:
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bbc:	f803 2b01 	strb.w	r2, [r3], #1
 8003bc0:	2a00      	cmp	r2, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <strcpy+0x2>
 8003bc4:	4770      	bx	lr

08003bc6 <memcpy>:
 8003bc6:	440a      	add	r2, r1
 8003bc8:	4291      	cmp	r1, r2
 8003bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bce:	d100      	bne.n	8003bd2 <memcpy+0xc>
 8003bd0:	4770      	bx	lr
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bdc:	4291      	cmp	r1, r2
 8003bde:	d1f9      	bne.n	8003bd4 <memcpy+0xe>
 8003be0:	bd10      	pop	{r4, pc}
	...

08003be4 <__assert_func>:
 8003be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003be6:	4614      	mov	r4, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <__assert_func+0x2c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4605      	mov	r5, r0
 8003bf0:	68d8      	ldr	r0, [r3, #12]
 8003bf2:	b954      	cbnz	r4, 8003c0a <__assert_func+0x26>
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <__assert_func+0x30>)
 8003bf6:	461c      	mov	r4, r3
 8003bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bfc:	9100      	str	r1, [sp, #0]
 8003bfe:	462b      	mov	r3, r5
 8003c00:	4905      	ldr	r1, [pc, #20]	@ (8003c18 <__assert_func+0x34>)
 8003c02:	f000 fde1 	bl	80047c8 <fiprintf>
 8003c06:	f000 fed3 	bl	80049b0 <abort>
 8003c0a:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__assert_func+0x38>)
 8003c0c:	e7f4      	b.n	8003bf8 <__assert_func+0x14>
 8003c0e:	bf00      	nop
 8003c10:	20000018 	.word	0x20000018
 8003c14:	0800519c 	.word	0x0800519c
 8003c18:	0800516e 	.word	0x0800516e
 8003c1c:	08005161 	.word	0x08005161

08003c20 <_free_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4605      	mov	r5, r0
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d041      	beq.n	8003cac <_free_r+0x8c>
 8003c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c2c:	1f0c      	subs	r4, r1, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bfb8      	it	lt
 8003c32:	18e4      	addlt	r4, r4, r3
 8003c34:	f000 f8e8 	bl	8003e08 <__malloc_lock>
 8003c38:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb0 <_free_r+0x90>)
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	b933      	cbnz	r3, 8003c4c <_free_r+0x2c>
 8003c3e:	6063      	str	r3, [r4, #4]
 8003c40:	6014      	str	r4, [r2, #0]
 8003c42:	4628      	mov	r0, r5
 8003c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c48:	f000 b8e4 	b.w	8003e14 <__malloc_unlock>
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d908      	bls.n	8003c62 <_free_r+0x42>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	1821      	adds	r1, r4, r0
 8003c54:	428b      	cmp	r3, r1
 8003c56:	bf01      	itttt	eq
 8003c58:	6819      	ldreq	r1, [r3, #0]
 8003c5a:	685b      	ldreq	r3, [r3, #4]
 8003c5c:	1809      	addeq	r1, r1, r0
 8003c5e:	6021      	streq	r1, [r4, #0]
 8003c60:	e7ed      	b.n	8003c3e <_free_r+0x1e>
 8003c62:	461a      	mov	r2, r3
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b10b      	cbz	r3, 8003c6c <_free_r+0x4c>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d9fa      	bls.n	8003c62 <_free_r+0x42>
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	1850      	adds	r0, r2, r1
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d10b      	bne.n	8003c8c <_free_r+0x6c>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	4401      	add	r1, r0
 8003c78:	1850      	adds	r0, r2, r1
 8003c7a:	4283      	cmp	r3, r0
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	d1e0      	bne.n	8003c42 <_free_r+0x22>
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6053      	str	r3, [r2, #4]
 8003c86:	4408      	add	r0, r1
 8003c88:	6010      	str	r0, [r2, #0]
 8003c8a:	e7da      	b.n	8003c42 <_free_r+0x22>
 8003c8c:	d902      	bls.n	8003c94 <_free_r+0x74>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	e7d6      	b.n	8003c42 <_free_r+0x22>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	1821      	adds	r1, r4, r0
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf04      	itt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	bf04      	itt	eq
 8003ca4:	1809      	addeq	r1, r1, r0
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	6054      	str	r4, [r2, #4]
 8003caa:	e7ca      	b.n	8003c42 <_free_r+0x22>
 8003cac:	bd38      	pop	{r3, r4, r5, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000af4 	.word	0x20000af4

08003cb4 <malloc>:
 8003cb4:	4b02      	ldr	r3, [pc, #8]	@ (8003cc0 <malloc+0xc>)
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	f000 b825 	b.w	8003d08 <_malloc_r>
 8003cbe:	bf00      	nop
 8003cc0:	20000018 	.word	0x20000018

08003cc4 <sbrk_aligned>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d04 <sbrk_aligned+0x40>)
 8003cc8:	460c      	mov	r4, r1
 8003cca:	6831      	ldr	r1, [r6, #0]
 8003ccc:	4605      	mov	r5, r0
 8003cce:	b911      	cbnz	r1, 8003cd6 <sbrk_aligned+0x12>
 8003cd0:	f000 fe5e 	bl	8004990 <_sbrk_r>
 8003cd4:	6030      	str	r0, [r6, #0]
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 fe59 	bl	8004990 <_sbrk_r>
 8003cde:	1c43      	adds	r3, r0, #1
 8003ce0:	d103      	bne.n	8003cea <sbrk_aligned+0x26>
 8003ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	1cc4      	adds	r4, r0, #3
 8003cec:	f024 0403 	bic.w	r4, r4, #3
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d0f8      	beq.n	8003ce6 <sbrk_aligned+0x22>
 8003cf4:	1a21      	subs	r1, r4, r0
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 fe4a 	bl	8004990 <_sbrk_r>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d1f2      	bne.n	8003ce6 <sbrk_aligned+0x22>
 8003d00:	e7ef      	b.n	8003ce2 <sbrk_aligned+0x1e>
 8003d02:	bf00      	nop
 8003d04:	20000af0 	.word	0x20000af0

08003d08 <_malloc_r>:
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	1ccd      	adds	r5, r1, #3
 8003d0e:	f025 0503 	bic.w	r5, r5, #3
 8003d12:	3508      	adds	r5, #8
 8003d14:	2d0c      	cmp	r5, #12
 8003d16:	bf38      	it	cc
 8003d18:	250c      	movcc	r5, #12
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	db01      	blt.n	8003d24 <_malloc_r+0x1c>
 8003d20:	42a9      	cmp	r1, r5
 8003d22:	d904      	bls.n	8003d2e <_malloc_r+0x26>
 8003d24:	230c      	movs	r3, #12
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e04 <_malloc_r+0xfc>
 8003d32:	f000 f869 	bl	8003e08 <__malloc_lock>
 8003d36:	f8d8 3000 	ldr.w	r3, [r8]
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	bb44      	cbnz	r4, 8003d90 <_malloc_r+0x88>
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4630      	mov	r0, r6
 8003d42:	f7ff ffbf 	bl	8003cc4 <sbrk_aligned>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	4604      	mov	r4, r0
 8003d4a:	d158      	bne.n	8003dfe <_malloc_r+0xf6>
 8003d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d50:	4627      	mov	r7, r4
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d143      	bne.n	8003dde <_malloc_r+0xd6>
 8003d56:	2c00      	cmp	r4, #0
 8003d58:	d04b      	beq.n	8003df2 <_malloc_r+0xea>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	4639      	mov	r1, r7
 8003d5e:	4630      	mov	r0, r6
 8003d60:	eb04 0903 	add.w	r9, r4, r3
 8003d64:	f000 fe14 	bl	8004990 <_sbrk_r>
 8003d68:	4581      	cmp	r9, r0
 8003d6a:	d142      	bne.n	8003df2 <_malloc_r+0xea>
 8003d6c:	6821      	ldr	r1, [r4, #0]
 8003d6e:	1a6d      	subs	r5, r5, r1
 8003d70:	4629      	mov	r1, r5
 8003d72:	4630      	mov	r0, r6
 8003d74:	f7ff ffa6 	bl	8003cc4 <sbrk_aligned>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d03a      	beq.n	8003df2 <_malloc_r+0xea>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	442b      	add	r3, r5
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	f8d8 3000 	ldr.w	r3, [r8]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	bb62      	cbnz	r2, 8003de4 <_malloc_r+0xdc>
 8003d8a:	f8c8 7000 	str.w	r7, [r8]
 8003d8e:	e00f      	b.n	8003db0 <_malloc_r+0xa8>
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	1b52      	subs	r2, r2, r5
 8003d94:	d420      	bmi.n	8003dd8 <_malloc_r+0xd0>
 8003d96:	2a0b      	cmp	r2, #11
 8003d98:	d917      	bls.n	8003dca <_malloc_r+0xc2>
 8003d9a:	1961      	adds	r1, r4, r5
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	6025      	str	r5, [r4, #0]
 8003da0:	bf18      	it	ne
 8003da2:	6059      	strne	r1, [r3, #4]
 8003da4:	6863      	ldr	r3, [r4, #4]
 8003da6:	bf08      	it	eq
 8003da8:	f8c8 1000 	streq.w	r1, [r8]
 8003dac:	5162      	str	r2, [r4, r5]
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f82f 	bl	8003e14 <__malloc_unlock>
 8003db6:	f104 000b 	add.w	r0, r4, #11
 8003dba:	1d23      	adds	r3, r4, #4
 8003dbc:	f020 0007 	bic.w	r0, r0, #7
 8003dc0:	1ac2      	subs	r2, r0, r3
 8003dc2:	bf1c      	itt	ne
 8003dc4:	1a1b      	subne	r3, r3, r0
 8003dc6:	50a3      	strne	r3, [r4, r2]
 8003dc8:	e7af      	b.n	8003d2a <_malloc_r+0x22>
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	bf0c      	ite	eq
 8003dd0:	f8c8 2000 	streq.w	r2, [r8]
 8003dd4:	605a      	strne	r2, [r3, #4]
 8003dd6:	e7eb      	b.n	8003db0 <_malloc_r+0xa8>
 8003dd8:	4623      	mov	r3, r4
 8003dda:	6864      	ldr	r4, [r4, #4]
 8003ddc:	e7ae      	b.n	8003d3c <_malloc_r+0x34>
 8003dde:	463c      	mov	r4, r7
 8003de0:	687f      	ldr	r7, [r7, #4]
 8003de2:	e7b6      	b.n	8003d52 <_malloc_r+0x4a>
 8003de4:	461a      	mov	r2, r3
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d1fb      	bne.n	8003de4 <_malloc_r+0xdc>
 8003dec:	2300      	movs	r3, #0
 8003dee:	6053      	str	r3, [r2, #4]
 8003df0:	e7de      	b.n	8003db0 <_malloc_r+0xa8>
 8003df2:	230c      	movs	r3, #12
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 f80c 	bl	8003e14 <__malloc_unlock>
 8003dfc:	e794      	b.n	8003d28 <_malloc_r+0x20>
 8003dfe:	6005      	str	r5, [r0, #0]
 8003e00:	e7d6      	b.n	8003db0 <_malloc_r+0xa8>
 8003e02:	bf00      	nop
 8003e04:	20000af4 	.word	0x20000af4

08003e08 <__malloc_lock>:
 8003e08:	4801      	ldr	r0, [pc, #4]	@ (8003e10 <__malloc_lock+0x8>)
 8003e0a:	f7ff bed2 	b.w	8003bb2 <__retarget_lock_acquire_recursive>
 8003e0e:	bf00      	nop
 8003e10:	20000aec 	.word	0x20000aec

08003e14 <__malloc_unlock>:
 8003e14:	4801      	ldr	r0, [pc, #4]	@ (8003e1c <__malloc_unlock+0x8>)
 8003e16:	f7ff becd 	b.w	8003bb4 <__retarget_lock_release_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	20000aec 	.word	0x20000aec

08003e20 <__ssputs_r>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	688e      	ldr	r6, [r1, #8]
 8003e26:	461f      	mov	r7, r3
 8003e28:	42be      	cmp	r6, r7
 8003e2a:	680b      	ldr	r3, [r1, #0]
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4690      	mov	r8, r2
 8003e32:	d82d      	bhi.n	8003e90 <__ssputs_r+0x70>
 8003e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e3c:	d026      	beq.n	8003e8c <__ssputs_r+0x6c>
 8003e3e:	6965      	ldr	r5, [r4, #20]
 8003e40:	6909      	ldr	r1, [r1, #16]
 8003e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e46:	eba3 0901 	sub.w	r9, r3, r1
 8003e4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e4e:	1c7b      	adds	r3, r7, #1
 8003e50:	444b      	add	r3, r9
 8003e52:	106d      	asrs	r5, r5, #1
 8003e54:	429d      	cmp	r5, r3
 8003e56:	bf38      	it	cc
 8003e58:	461d      	movcc	r5, r3
 8003e5a:	0553      	lsls	r3, r2, #21
 8003e5c:	d527      	bpl.n	8003eae <__ssputs_r+0x8e>
 8003e5e:	4629      	mov	r1, r5
 8003e60:	f7ff ff52 	bl	8003d08 <_malloc_r>
 8003e64:	4606      	mov	r6, r0
 8003e66:	b360      	cbz	r0, 8003ec2 <__ssputs_r+0xa2>
 8003e68:	6921      	ldr	r1, [r4, #16]
 8003e6a:	464a      	mov	r2, r9
 8003e6c:	f7ff feab 	bl	8003bc6 <memcpy>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	6126      	str	r6, [r4, #16]
 8003e7e:	6165      	str	r5, [r4, #20]
 8003e80:	444e      	add	r6, r9
 8003e82:	eba5 0509 	sub.w	r5, r5, r9
 8003e86:	6026      	str	r6, [r4, #0]
 8003e88:	60a5      	str	r5, [r4, #8]
 8003e8a:	463e      	mov	r6, r7
 8003e8c:	42be      	cmp	r6, r7
 8003e8e:	d900      	bls.n	8003e92 <__ssputs_r+0x72>
 8003e90:	463e      	mov	r6, r7
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	4632      	mov	r2, r6
 8003e96:	4641      	mov	r1, r8
 8003e98:	f000 fd3e 	bl	8004918 <memmove>
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	1b9b      	subs	r3, r3, r6
 8003ea0:	60a3      	str	r3, [r4, #8]
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	4433      	add	r3, r6
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eae:	462a      	mov	r2, r5
 8003eb0:	f000 fd85 	bl	80049be <_realloc_r>
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d1e0      	bne.n	8003e7c <__ssputs_r+0x5c>
 8003eba:	6921      	ldr	r1, [r4, #16]
 8003ebc:	4650      	mov	r0, sl
 8003ebe:	f7ff feaf 	bl	8003c20 <_free_r>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	f8ca 3000 	str.w	r3, [sl]
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e7e9      	b.n	8003eaa <__ssputs_r+0x8a>
	...

08003ed8 <_svfiprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	4698      	mov	r8, r3
 8003ede:	898b      	ldrh	r3, [r1, #12]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	b09d      	sub	sp, #116	@ 0x74
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	4614      	mov	r4, r2
 8003eea:	d510      	bpl.n	8003f0e <_svfiprintf_r+0x36>
 8003eec:	690b      	ldr	r3, [r1, #16]
 8003eee:	b973      	cbnz	r3, 8003f0e <_svfiprintf_r+0x36>
 8003ef0:	2140      	movs	r1, #64	@ 0x40
 8003ef2:	f7ff ff09 	bl	8003d08 <_malloc_r>
 8003ef6:	6028      	str	r0, [r5, #0]
 8003ef8:	6128      	str	r0, [r5, #16]
 8003efa:	b930      	cbnz	r0, 8003f0a <_svfiprintf_r+0x32>
 8003efc:	230c      	movs	r3, #12
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b01d      	add	sp, #116	@ 0x74
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	2340      	movs	r3, #64	@ 0x40
 8003f0c:	616b      	str	r3, [r5, #20]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f12:	2320      	movs	r3, #32
 8003f14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f1c:	2330      	movs	r3, #48	@ 0x30
 8003f1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040bc <_svfiprintf_r+0x1e4>
 8003f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f26:	f04f 0901 	mov.w	r9, #1
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f32:	b10a      	cbz	r2, 8003f38 <_svfiprintf_r+0x60>
 8003f34:	2a25      	cmp	r2, #37	@ 0x25
 8003f36:	d1f9      	bne.n	8003f2c <_svfiprintf_r+0x54>
 8003f38:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x7e>
 8003f3e:	465b      	mov	r3, fp
 8003f40:	4622      	mov	r2, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff ff6b 	bl	8003e20 <__ssputs_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 80a7 	beq.w	800409e <_svfiprintf_r+0x1c6>
 8003f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f52:	445a      	add	r2, fp
 8003f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f56:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 809f 	beq.w	800409e <_svfiprintf_r+0x1c6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6a:	f10a 0a01 	add.w	sl, sl, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f76:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f80:	484e      	ldr	r0, [pc, #312]	@ (80040bc <_svfiprintf_r+0x1e4>)
 8003f82:	f7fc f945 	bl	8000210 <memchr>
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	b9d8      	cbnz	r0, 8003fc2 <_svfiprintf_r+0xea>
 8003f8a:	06d0      	lsls	r0, r2, #27
 8003f8c:	bf44      	itt	mi
 8003f8e:	2320      	movmi	r3, #32
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f94:	0711      	lsls	r1, r2, #28
 8003f96:	bf44      	itt	mi
 8003f98:	232b      	movmi	r3, #43	@ 0x2b
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa4:	d015      	beq.n	8003fd2 <_svfiprintf_r+0xfa>
 8003fa6:	9a07      	ldr	r2, [sp, #28]
 8003fa8:	4654      	mov	r4, sl
 8003faa:	2000      	movs	r0, #0
 8003fac:	f04f 0c0a 	mov.w	ip, #10
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb6:	3b30      	subs	r3, #48	@ 0x30
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d94b      	bls.n	8004054 <_svfiprintf_r+0x17c>
 8003fbc:	b1b0      	cbz	r0, 8003fec <_svfiprintf_r+0x114>
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	e014      	b.n	8003fec <_svfiprintf_r+0x114>
 8003fc2:	eba0 0308 	sub.w	r3, r0, r8
 8003fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	46a2      	mov	sl, r4
 8003fd0:	e7d2      	b.n	8003f78 <_svfiprintf_r+0xa0>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	1d19      	adds	r1, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9103      	str	r1, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfbb      	ittet	lt
 8003fde:	425b      	neglt	r3, r3
 8003fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe4:	9307      	strge	r3, [sp, #28]
 8003fe6:	9307      	strlt	r3, [sp, #28]
 8003fe8:	bfb8      	it	lt
 8003fea:	9204      	strlt	r2, [sp, #16]
 8003fec:	7823      	ldrb	r3, [r4, #0]
 8003fee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff0:	d10a      	bne.n	8004008 <_svfiprintf_r+0x130>
 8003ff2:	7863      	ldrb	r3, [r4, #1]
 8003ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ff6:	d132      	bne.n	800405e <_svfiprintf_r+0x186>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	9203      	str	r2, [sp, #12]
 8004000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004004:	3402      	adds	r4, #2
 8004006:	9305      	str	r3, [sp, #20]
 8004008:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040cc <_svfiprintf_r+0x1f4>
 800400c:	7821      	ldrb	r1, [r4, #0]
 800400e:	2203      	movs	r2, #3
 8004010:	4650      	mov	r0, sl
 8004012:	f7fc f8fd 	bl	8000210 <memchr>
 8004016:	b138      	cbz	r0, 8004028 <_svfiprintf_r+0x150>
 8004018:	9b04      	ldr	r3, [sp, #16]
 800401a:	eba0 000a 	sub.w	r0, r0, sl
 800401e:	2240      	movs	r2, #64	@ 0x40
 8004020:	4082      	lsls	r2, r0
 8004022:	4313      	orrs	r3, r2
 8004024:	3401      	adds	r4, #1
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402c:	4824      	ldr	r0, [pc, #144]	@ (80040c0 <_svfiprintf_r+0x1e8>)
 800402e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004032:	2206      	movs	r2, #6
 8004034:	f7fc f8ec 	bl	8000210 <memchr>
 8004038:	2800      	cmp	r0, #0
 800403a:	d036      	beq.n	80040aa <_svfiprintf_r+0x1d2>
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <_svfiprintf_r+0x1ec>)
 800403e:	bb1b      	cbnz	r3, 8004088 <_svfiprintf_r+0x1b0>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	3307      	adds	r3, #7
 8004044:	f023 0307 	bic.w	r3, r3, #7
 8004048:	3308      	adds	r3, #8
 800404a:	9303      	str	r3, [sp, #12]
 800404c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800404e:	4433      	add	r3, r6
 8004050:	9309      	str	r3, [sp, #36]	@ 0x24
 8004052:	e76a      	b.n	8003f2a <_svfiprintf_r+0x52>
 8004054:	fb0c 3202 	mla	r2, ip, r2, r3
 8004058:	460c      	mov	r4, r1
 800405a:	2001      	movs	r0, #1
 800405c:	e7a8      	b.n	8003fb0 <_svfiprintf_r+0xd8>
 800405e:	2300      	movs	r3, #0
 8004060:	3401      	adds	r4, #1
 8004062:	9305      	str	r3, [sp, #20]
 8004064:	4619      	mov	r1, r3
 8004066:	f04f 0c0a 	mov.w	ip, #10
 800406a:	4620      	mov	r0, r4
 800406c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004070:	3a30      	subs	r2, #48	@ 0x30
 8004072:	2a09      	cmp	r2, #9
 8004074:	d903      	bls.n	800407e <_svfiprintf_r+0x1a6>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0c6      	beq.n	8004008 <_svfiprintf_r+0x130>
 800407a:	9105      	str	r1, [sp, #20]
 800407c:	e7c4      	b.n	8004008 <_svfiprintf_r+0x130>
 800407e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004082:	4604      	mov	r4, r0
 8004084:	2301      	movs	r3, #1
 8004086:	e7f0      	b.n	800406a <_svfiprintf_r+0x192>
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	462a      	mov	r2, r5
 800408e:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <_svfiprintf_r+0x1f0>)
 8004090:	a904      	add	r1, sp, #16
 8004092:	4638      	mov	r0, r7
 8004094:	f3af 8000 	nop.w
 8004098:	1c42      	adds	r2, r0, #1
 800409a:	4606      	mov	r6, r0
 800409c:	d1d6      	bne.n	800404c <_svfiprintf_r+0x174>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	065b      	lsls	r3, r3, #25
 80040a2:	f53f af2d 	bmi.w	8003f00 <_svfiprintf_r+0x28>
 80040a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040a8:	e72c      	b.n	8003f04 <_svfiprintf_r+0x2c>
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <_svfiprintf_r+0x1f0>)
 80040b2:	a904      	add	r1, sp, #16
 80040b4:	4638      	mov	r0, r7
 80040b6:	f000 f9bb 	bl	8004430 <_printf_i>
 80040ba:	e7ed      	b.n	8004098 <_svfiprintf_r+0x1c0>
 80040bc:	0800519d 	.word	0x0800519d
 80040c0:	080051a7 	.word	0x080051a7
 80040c4:	00000000 	.word	0x00000000
 80040c8:	08003e21 	.word	0x08003e21
 80040cc:	080051a3 	.word	0x080051a3

080040d0 <__sfputc_r>:
 80040d0:	6893      	ldr	r3, [r2, #8]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	b410      	push	{r4}
 80040d8:	6093      	str	r3, [r2, #8]
 80040da:	da08      	bge.n	80040ee <__sfputc_r+0x1e>
 80040dc:	6994      	ldr	r4, [r2, #24]
 80040de:	42a3      	cmp	r3, r4
 80040e0:	db01      	blt.n	80040e6 <__sfputc_r+0x16>
 80040e2:	290a      	cmp	r1, #10
 80040e4:	d103      	bne.n	80040ee <__sfputc_r+0x1e>
 80040e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ea:	f7ff bbc2 	b.w	8003872 <__swbuf_r>
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	1c58      	adds	r0, r3, #1
 80040f2:	6010      	str	r0, [r2, #0]
 80040f4:	7019      	strb	r1, [r3, #0]
 80040f6:	4608      	mov	r0, r1
 80040f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <__sfputs_r>:
 80040fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004100:	4606      	mov	r6, r0
 8004102:	460f      	mov	r7, r1
 8004104:	4614      	mov	r4, r2
 8004106:	18d5      	adds	r5, r2, r3
 8004108:	42ac      	cmp	r4, r5
 800410a:	d101      	bne.n	8004110 <__sfputs_r+0x12>
 800410c:	2000      	movs	r0, #0
 800410e:	e007      	b.n	8004120 <__sfputs_r+0x22>
 8004110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004114:	463a      	mov	r2, r7
 8004116:	4630      	mov	r0, r6
 8004118:	f7ff ffda 	bl	80040d0 <__sfputc_r>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d1f3      	bne.n	8004108 <__sfputs_r+0xa>
 8004120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004124 <_vfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	460d      	mov	r5, r1
 800412a:	b09d      	sub	sp, #116	@ 0x74
 800412c:	4614      	mov	r4, r2
 800412e:	4698      	mov	r8, r3
 8004130:	4606      	mov	r6, r0
 8004132:	b118      	cbz	r0, 800413c <_vfiprintf_r+0x18>
 8004134:	6a03      	ldr	r3, [r0, #32]
 8004136:	b90b      	cbnz	r3, 800413c <_vfiprintf_r+0x18>
 8004138:	f7ff fa8a 	bl	8003650 <__sinit>
 800413c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800413e:	07d9      	lsls	r1, r3, #31
 8004140:	d405      	bmi.n	800414e <_vfiprintf_r+0x2a>
 8004142:	89ab      	ldrh	r3, [r5, #12]
 8004144:	059a      	lsls	r2, r3, #22
 8004146:	d402      	bmi.n	800414e <_vfiprintf_r+0x2a>
 8004148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800414a:	f7ff fd32 	bl	8003bb2 <__retarget_lock_acquire_recursive>
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	071b      	lsls	r3, r3, #28
 8004152:	d501      	bpl.n	8004158 <_vfiprintf_r+0x34>
 8004154:	692b      	ldr	r3, [r5, #16]
 8004156:	b99b      	cbnz	r3, 8004180 <_vfiprintf_r+0x5c>
 8004158:	4629      	mov	r1, r5
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff fbc8 	bl	80038f0 <__swsetup_r>
 8004160:	b170      	cbz	r0, 8004180 <_vfiprintf_r+0x5c>
 8004162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004164:	07dc      	lsls	r4, r3, #31
 8004166:	d504      	bpl.n	8004172 <_vfiprintf_r+0x4e>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	b01d      	add	sp, #116	@ 0x74
 800416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004172:	89ab      	ldrh	r3, [r5, #12]
 8004174:	0598      	lsls	r0, r3, #22
 8004176:	d4f7      	bmi.n	8004168 <_vfiprintf_r+0x44>
 8004178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800417a:	f7ff fd1b 	bl	8003bb4 <__retarget_lock_release_recursive>
 800417e:	e7f3      	b.n	8004168 <_vfiprintf_r+0x44>
 8004180:	2300      	movs	r3, #0
 8004182:	9309      	str	r3, [sp, #36]	@ 0x24
 8004184:	2320      	movs	r3, #32
 8004186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800418a:	f8cd 800c 	str.w	r8, [sp, #12]
 800418e:	2330      	movs	r3, #48	@ 0x30
 8004190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004340 <_vfiprintf_r+0x21c>
 8004194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004198:	f04f 0901 	mov.w	r9, #1
 800419c:	4623      	mov	r3, r4
 800419e:	469a      	mov	sl, r3
 80041a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a4:	b10a      	cbz	r2, 80041aa <_vfiprintf_r+0x86>
 80041a6:	2a25      	cmp	r2, #37	@ 0x25
 80041a8:	d1f9      	bne.n	800419e <_vfiprintf_r+0x7a>
 80041aa:	ebba 0b04 	subs.w	fp, sl, r4
 80041ae:	d00b      	beq.n	80041c8 <_vfiprintf_r+0xa4>
 80041b0:	465b      	mov	r3, fp
 80041b2:	4622      	mov	r2, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff ffa1 	bl	80040fe <__sfputs_r>
 80041bc:	3001      	adds	r0, #1
 80041be:	f000 80a7 	beq.w	8004310 <_vfiprintf_r+0x1ec>
 80041c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041c4:	445a      	add	r2, fp
 80041c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80041c8:	f89a 3000 	ldrb.w	r3, [sl]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 809f 	beq.w	8004310 <_vfiprintf_r+0x1ec>
 80041d2:	2300      	movs	r3, #0
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041dc:	f10a 0a01 	add.w	sl, sl, #1
 80041e0:	9304      	str	r3, [sp, #16]
 80041e2:	9307      	str	r3, [sp, #28]
 80041e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80041ea:	4654      	mov	r4, sl
 80041ec:	2205      	movs	r2, #5
 80041ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f2:	4853      	ldr	r0, [pc, #332]	@ (8004340 <_vfiprintf_r+0x21c>)
 80041f4:	f7fc f80c 	bl	8000210 <memchr>
 80041f8:	9a04      	ldr	r2, [sp, #16]
 80041fa:	b9d8      	cbnz	r0, 8004234 <_vfiprintf_r+0x110>
 80041fc:	06d1      	lsls	r1, r2, #27
 80041fe:	bf44      	itt	mi
 8004200:	2320      	movmi	r3, #32
 8004202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004206:	0713      	lsls	r3, r2, #28
 8004208:	bf44      	itt	mi
 800420a:	232b      	movmi	r3, #43	@ 0x2b
 800420c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004210:	f89a 3000 	ldrb.w	r3, [sl]
 8004214:	2b2a      	cmp	r3, #42	@ 0x2a
 8004216:	d015      	beq.n	8004244 <_vfiprintf_r+0x120>
 8004218:	9a07      	ldr	r2, [sp, #28]
 800421a:	4654      	mov	r4, sl
 800421c:	2000      	movs	r0, #0
 800421e:	f04f 0c0a 	mov.w	ip, #10
 8004222:	4621      	mov	r1, r4
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	3b30      	subs	r3, #48	@ 0x30
 800422a:	2b09      	cmp	r3, #9
 800422c:	d94b      	bls.n	80042c6 <_vfiprintf_r+0x1a2>
 800422e:	b1b0      	cbz	r0, 800425e <_vfiprintf_r+0x13a>
 8004230:	9207      	str	r2, [sp, #28]
 8004232:	e014      	b.n	800425e <_vfiprintf_r+0x13a>
 8004234:	eba0 0308 	sub.w	r3, r0, r8
 8004238:	fa09 f303 	lsl.w	r3, r9, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	46a2      	mov	sl, r4
 8004242:	e7d2      	b.n	80041ea <_vfiprintf_r+0xc6>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	1d19      	adds	r1, r3, #4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	9103      	str	r1, [sp, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	bfbb      	ittet	lt
 8004250:	425b      	neglt	r3, r3
 8004252:	f042 0202 	orrlt.w	r2, r2, #2
 8004256:	9307      	strge	r3, [sp, #28]
 8004258:	9307      	strlt	r3, [sp, #28]
 800425a:	bfb8      	it	lt
 800425c:	9204      	strlt	r2, [sp, #16]
 800425e:	7823      	ldrb	r3, [r4, #0]
 8004260:	2b2e      	cmp	r3, #46	@ 0x2e
 8004262:	d10a      	bne.n	800427a <_vfiprintf_r+0x156>
 8004264:	7863      	ldrb	r3, [r4, #1]
 8004266:	2b2a      	cmp	r3, #42	@ 0x2a
 8004268:	d132      	bne.n	80042d0 <_vfiprintf_r+0x1ac>
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	9203      	str	r2, [sp, #12]
 8004272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004276:	3402      	adds	r4, #2
 8004278:	9305      	str	r3, [sp, #20]
 800427a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004350 <_vfiprintf_r+0x22c>
 800427e:	7821      	ldrb	r1, [r4, #0]
 8004280:	2203      	movs	r2, #3
 8004282:	4650      	mov	r0, sl
 8004284:	f7fb ffc4 	bl	8000210 <memchr>
 8004288:	b138      	cbz	r0, 800429a <_vfiprintf_r+0x176>
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	eba0 000a 	sub.w	r0, r0, sl
 8004290:	2240      	movs	r2, #64	@ 0x40
 8004292:	4082      	lsls	r2, r0
 8004294:	4313      	orrs	r3, r2
 8004296:	3401      	adds	r4, #1
 8004298:	9304      	str	r3, [sp, #16]
 800429a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429e:	4829      	ldr	r0, [pc, #164]	@ (8004344 <_vfiprintf_r+0x220>)
 80042a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042a4:	2206      	movs	r2, #6
 80042a6:	f7fb ffb3 	bl	8000210 <memchr>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d03f      	beq.n	800432e <_vfiprintf_r+0x20a>
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <_vfiprintf_r+0x224>)
 80042b0:	bb1b      	cbnz	r3, 80042fa <_vfiprintf_r+0x1d6>
 80042b2:	9b03      	ldr	r3, [sp, #12]
 80042b4:	3307      	adds	r3, #7
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	3308      	adds	r3, #8
 80042bc:	9303      	str	r3, [sp, #12]
 80042be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042c0:	443b      	add	r3, r7
 80042c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042c4:	e76a      	b.n	800419c <_vfiprintf_r+0x78>
 80042c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ca:	460c      	mov	r4, r1
 80042cc:	2001      	movs	r0, #1
 80042ce:	e7a8      	b.n	8004222 <_vfiprintf_r+0xfe>
 80042d0:	2300      	movs	r3, #0
 80042d2:	3401      	adds	r4, #1
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	4619      	mov	r1, r3
 80042d8:	f04f 0c0a 	mov.w	ip, #10
 80042dc:	4620      	mov	r0, r4
 80042de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042e2:	3a30      	subs	r2, #48	@ 0x30
 80042e4:	2a09      	cmp	r2, #9
 80042e6:	d903      	bls.n	80042f0 <_vfiprintf_r+0x1cc>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0c6      	beq.n	800427a <_vfiprintf_r+0x156>
 80042ec:	9105      	str	r1, [sp, #20]
 80042ee:	e7c4      	b.n	800427a <_vfiprintf_r+0x156>
 80042f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042f4:	4604      	mov	r4, r0
 80042f6:	2301      	movs	r3, #1
 80042f8:	e7f0      	b.n	80042dc <_vfiprintf_r+0x1b8>
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	462a      	mov	r2, r5
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <_vfiprintf_r+0x228>)
 8004302:	a904      	add	r1, sp, #16
 8004304:	4630      	mov	r0, r6
 8004306:	f3af 8000 	nop.w
 800430a:	4607      	mov	r7, r0
 800430c:	1c78      	adds	r0, r7, #1
 800430e:	d1d6      	bne.n	80042be <_vfiprintf_r+0x19a>
 8004310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004312:	07d9      	lsls	r1, r3, #31
 8004314:	d405      	bmi.n	8004322 <_vfiprintf_r+0x1fe>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	059a      	lsls	r2, r3, #22
 800431a:	d402      	bmi.n	8004322 <_vfiprintf_r+0x1fe>
 800431c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800431e:	f7ff fc49 	bl	8003bb4 <__retarget_lock_release_recursive>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	065b      	lsls	r3, r3, #25
 8004326:	f53f af1f 	bmi.w	8004168 <_vfiprintf_r+0x44>
 800432a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800432c:	e71e      	b.n	800416c <_vfiprintf_r+0x48>
 800432e:	ab03      	add	r3, sp, #12
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	462a      	mov	r2, r5
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <_vfiprintf_r+0x228>)
 8004336:	a904      	add	r1, sp, #16
 8004338:	4630      	mov	r0, r6
 800433a:	f000 f879 	bl	8004430 <_printf_i>
 800433e:	e7e4      	b.n	800430a <_vfiprintf_r+0x1e6>
 8004340:	0800519d 	.word	0x0800519d
 8004344:	080051a7 	.word	0x080051a7
 8004348:	00000000 	.word	0x00000000
 800434c:	080040ff 	.word	0x080040ff
 8004350:	080051a3 	.word	0x080051a3

08004354 <_printf_common>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	4616      	mov	r6, r2
 800435a:	4698      	mov	r8, r3
 800435c:	688a      	ldr	r2, [r1, #8]
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	4293      	cmp	r3, r2
 8004366:	bfb8      	it	lt
 8004368:	4613      	movlt	r3, r2
 800436a:	6033      	str	r3, [r6, #0]
 800436c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004370:	4607      	mov	r7, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b10a      	cbz	r2, 800437a <_printf_common+0x26>
 8004376:	3301      	adds	r3, #1
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	0699      	lsls	r1, r3, #26
 800437e:	bf42      	ittt	mi
 8004380:	6833      	ldrmi	r3, [r6, #0]
 8004382:	3302      	addmi	r3, #2
 8004384:	6033      	strmi	r3, [r6, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	f015 0506 	ands.w	r5, r5, #6
 800438c:	d106      	bne.n	800439c <_printf_common+0x48>
 800438e:	f104 0a19 	add.w	sl, r4, #25
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	6832      	ldr	r2, [r6, #0]
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	42ab      	cmp	r3, r5
 800439a:	dc26      	bgt.n	80043ea <_printf_common+0x96>
 800439c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	3b00      	subs	r3, #0
 80043a4:	bf18      	it	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	0692      	lsls	r2, r2, #26
 80043aa:	d42b      	bmi.n	8004404 <_printf_common+0xb0>
 80043ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b0:	4641      	mov	r1, r8
 80043b2:	4638      	mov	r0, r7
 80043b4:	47c8      	blx	r9
 80043b6:	3001      	adds	r0, #1
 80043b8:	d01e      	beq.n	80043f8 <_printf_common+0xa4>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	f003 0306 	and.w	r3, r3, #6
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf02      	ittt	eq
 80043c6:	68e5      	ldreq	r5, [r4, #12]
 80043c8:	6833      	ldreq	r3, [r6, #0]
 80043ca:	1aed      	subeq	r5, r5, r3
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	bf0c      	ite	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	2500      	movne	r5, #0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	bfc4      	itt	gt
 80043da:	1a9b      	subgt	r3, r3, r2
 80043dc:	18ed      	addgt	r5, r5, r3
 80043de:	2600      	movs	r6, #0
 80043e0:	341a      	adds	r4, #26
 80043e2:	42b5      	cmp	r5, r6
 80043e4:	d11a      	bne.n	800441c <_printf_common+0xc8>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e008      	b.n	80043fc <_printf_common+0xa8>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4652      	mov	r2, sl
 80043ee:	4641      	mov	r1, r8
 80043f0:	4638      	mov	r0, r7
 80043f2:	47c8      	blx	r9
 80043f4:	3001      	adds	r0, #1
 80043f6:	d103      	bne.n	8004400 <_printf_common+0xac>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	3501      	adds	r5, #1
 8004402:	e7c6      	b.n	8004392 <_printf_common+0x3e>
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	2030      	movs	r0, #48	@ 0x30
 800440a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800440e:	4422      	add	r2, r4
 8004410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004418:	3302      	adds	r3, #2
 800441a:	e7c7      	b.n	80043ac <_printf_common+0x58>
 800441c:	2301      	movs	r3, #1
 800441e:	4622      	mov	r2, r4
 8004420:	4641      	mov	r1, r8
 8004422:	4638      	mov	r0, r7
 8004424:	47c8      	blx	r9
 8004426:	3001      	adds	r0, #1
 8004428:	d0e6      	beq.n	80043f8 <_printf_common+0xa4>
 800442a:	3601      	adds	r6, #1
 800442c:	e7d9      	b.n	80043e2 <_printf_common+0x8e>
	...

08004430 <_printf_i>:
 8004430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	7e0f      	ldrb	r7, [r1, #24]
 8004436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004438:	2f78      	cmp	r7, #120	@ 0x78
 800443a:	4691      	mov	r9, r2
 800443c:	4680      	mov	r8, r0
 800443e:	460c      	mov	r4, r1
 8004440:	469a      	mov	sl, r3
 8004442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004446:	d807      	bhi.n	8004458 <_printf_i+0x28>
 8004448:	2f62      	cmp	r7, #98	@ 0x62
 800444a:	d80a      	bhi.n	8004462 <_printf_i+0x32>
 800444c:	2f00      	cmp	r7, #0
 800444e:	f000 80d2 	beq.w	80045f6 <_printf_i+0x1c6>
 8004452:	2f58      	cmp	r7, #88	@ 0x58
 8004454:	f000 80b9 	beq.w	80045ca <_printf_i+0x19a>
 8004458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800445c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004460:	e03a      	b.n	80044d8 <_printf_i+0xa8>
 8004462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004466:	2b15      	cmp	r3, #21
 8004468:	d8f6      	bhi.n	8004458 <_printf_i+0x28>
 800446a:	a101      	add	r1, pc, #4	@ (adr r1, 8004470 <_printf_i+0x40>)
 800446c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004470:	080044c9 	.word	0x080044c9
 8004474:	080044dd 	.word	0x080044dd
 8004478:	08004459 	.word	0x08004459
 800447c:	08004459 	.word	0x08004459
 8004480:	08004459 	.word	0x08004459
 8004484:	08004459 	.word	0x08004459
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004459 	.word	0x08004459
 8004490:	08004459 	.word	0x08004459
 8004494:	08004459 	.word	0x08004459
 8004498:	08004459 	.word	0x08004459
 800449c:	080045dd 	.word	0x080045dd
 80044a0:	08004507 	.word	0x08004507
 80044a4:	08004597 	.word	0x08004597
 80044a8:	08004459 	.word	0x08004459
 80044ac:	08004459 	.word	0x08004459
 80044b0:	080045ff 	.word	0x080045ff
 80044b4:	08004459 	.word	0x08004459
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004459 	.word	0x08004459
 80044c0:	08004459 	.word	0x08004459
 80044c4:	0800459f 	.word	0x0800459f
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6032      	str	r2, [r6, #0]
 80044d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d8:	2301      	movs	r3, #1
 80044da:	e09d      	b.n	8004618 <_printf_i+0x1e8>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1d19      	adds	r1, r3, #4
 80044e2:	6031      	str	r1, [r6, #0]
 80044e4:	0606      	lsls	r6, r0, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xbc>
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	e003      	b.n	80044f4 <_printf_i+0xc4>
 80044ec:	0645      	lsls	r5, r0, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xb8>
 80044f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	da03      	bge.n	8004500 <_printf_i+0xd0>
 80044f8:	232d      	movs	r3, #45	@ 0x2d
 80044fa:	426d      	negs	r5, r5
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004500:	4859      	ldr	r0, [pc, #356]	@ (8004668 <_printf_i+0x238>)
 8004502:	230a      	movs	r3, #10
 8004504:	e011      	b.n	800452a <_printf_i+0xfa>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	0608      	lsls	r0, r1, #24
 800450c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004510:	d402      	bmi.n	8004518 <_printf_i+0xe8>
 8004512:	0649      	lsls	r1, r1, #25
 8004514:	bf48      	it	mi
 8004516:	b2ad      	uxthmi	r5, r5
 8004518:	2f6f      	cmp	r7, #111	@ 0x6f
 800451a:	4853      	ldr	r0, [pc, #332]	@ (8004668 <_printf_i+0x238>)
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	bf14      	ite	ne
 8004520:	230a      	movne	r3, #10
 8004522:	2308      	moveq	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452a:	6866      	ldr	r6, [r4, #4]
 800452c:	60a6      	str	r6, [r4, #8]
 800452e:	2e00      	cmp	r6, #0
 8004530:	bfa2      	ittt	ge
 8004532:	6821      	ldrge	r1, [r4, #0]
 8004534:	f021 0104 	bicge.w	r1, r1, #4
 8004538:	6021      	strge	r1, [r4, #0]
 800453a:	b90d      	cbnz	r5, 8004540 <_printf_i+0x110>
 800453c:	2e00      	cmp	r6, #0
 800453e:	d04b      	beq.n	80045d8 <_printf_i+0x1a8>
 8004540:	4616      	mov	r6, r2
 8004542:	fbb5 f1f3 	udiv	r1, r5, r3
 8004546:	fb03 5711 	mls	r7, r3, r1, r5
 800454a:	5dc7      	ldrb	r7, [r0, r7]
 800454c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004550:	462f      	mov	r7, r5
 8004552:	42bb      	cmp	r3, r7
 8004554:	460d      	mov	r5, r1
 8004556:	d9f4      	bls.n	8004542 <_printf_i+0x112>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x144>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07df      	lsls	r7, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x144>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6861      	ldr	r1, [r4, #4]
 8004566:	4299      	cmp	r1, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	@ 0x30
 800456c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004574:	1b92      	subs	r2, r2, r6
 8004576:	6122      	str	r2, [r4, #16]
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	464b      	mov	r3, r9
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fee6 	bl	8004354 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14a      	bne.n	8004622 <_printf_i+0x1f2>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b004      	add	sp, #16
 8004592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	4833      	ldr	r0, [pc, #204]	@ (800466c <_printf_i+0x23c>)
 80045a0:	2778      	movs	r7, #120	@ 0x78
 80045a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6831      	ldr	r1, [r6, #0]
 80045aa:	061f      	lsls	r7, r3, #24
 80045ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0x188>
 80045b2:	065f      	lsls	r7, r3, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	6031      	str	r1, [r6, #0]
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b11d      	cbz	r5, 80045ce <_printf_i+0x19e>
 80045c6:	2310      	movs	r3, #16
 80045c8:	e7ac      	b.n	8004524 <_printf_i+0xf4>
 80045ca:	4827      	ldr	r0, [pc, #156]	@ (8004668 <_printf_i+0x238>)
 80045cc:	e7e9      	b.n	80045a2 <_printf_i+0x172>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	e7f6      	b.n	80045c6 <_printf_i+0x196>
 80045d8:	4616      	mov	r6, r2
 80045da:	e7bd      	b.n	8004558 <_printf_i+0x128>
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	6825      	ldr	r5, [r4, #0]
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	1d18      	adds	r0, r3, #4
 80045e4:	6030      	str	r0, [r6, #0]
 80045e6:	062e      	lsls	r6, r5, #24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0x1c0>
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0x1c6>
 80045f0:	0668      	lsls	r0, r5, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0x1bc>
 80045f4:	8019      	strh	r1, [r3, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	4616      	mov	r6, r2
 80045fc:	e7bc      	b.n	8004578 <_printf_i+0x148>
 80045fe:	6833      	ldr	r3, [r6, #0]
 8004600:	1d1a      	adds	r2, r3, #4
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	681e      	ldr	r6, [r3, #0]
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	2100      	movs	r1, #0
 800460a:	4630      	mov	r0, r6
 800460c:	f7fb fe00 	bl	8000210 <memchr>
 8004610:	b108      	cbz	r0, 8004616 <_printf_i+0x1e6>
 8004612:	1b80      	subs	r0, r0, r6
 8004614:	6060      	str	r0, [r4, #4]
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	2300      	movs	r3, #0
 800461c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004620:	e7aa      	b.n	8004578 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	4632      	mov	r2, r6
 8004626:	4649      	mov	r1, r9
 8004628:	4640      	mov	r0, r8
 800462a:	47d0      	blx	sl
 800462c:	3001      	adds	r0, #1
 800462e:	d0ad      	beq.n	800458c <_printf_i+0x15c>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	079b      	lsls	r3, r3, #30
 8004634:	d413      	bmi.n	800465e <_printf_i+0x22e>
 8004636:	68e0      	ldr	r0, [r4, #12]
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	4298      	cmp	r0, r3
 800463c:	bfb8      	it	lt
 800463e:	4618      	movlt	r0, r3
 8004640:	e7a6      	b.n	8004590 <_printf_i+0x160>
 8004642:	2301      	movs	r3, #1
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d09d      	beq.n	800458c <_printf_i+0x15c>
 8004650:	3501      	adds	r5, #1
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	9903      	ldr	r1, [sp, #12]
 8004656:	1a5b      	subs	r3, r3, r1
 8004658:	42ab      	cmp	r3, r5
 800465a:	dcf2      	bgt.n	8004642 <_printf_i+0x212>
 800465c:	e7eb      	b.n	8004636 <_printf_i+0x206>
 800465e:	2500      	movs	r5, #0
 8004660:	f104 0619 	add.w	r6, r4, #25
 8004664:	e7f5      	b.n	8004652 <_printf_i+0x222>
 8004666:	bf00      	nop
 8004668:	080051ae 	.word	0x080051ae
 800466c:	080051bf 	.word	0x080051bf

08004670 <__sflush_r>:
 8004670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	0716      	lsls	r6, r2, #28
 800467a:	4605      	mov	r5, r0
 800467c:	460c      	mov	r4, r1
 800467e:	d454      	bmi.n	800472a <__sflush_r+0xba>
 8004680:	684b      	ldr	r3, [r1, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	dc02      	bgt.n	800468c <__sflush_r+0x1c>
 8004686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	dd48      	ble.n	800471e <__sflush_r+0xae>
 800468c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800468e:	2e00      	cmp	r6, #0
 8004690:	d045      	beq.n	800471e <__sflush_r+0xae>
 8004692:	2300      	movs	r3, #0
 8004694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004698:	682f      	ldr	r7, [r5, #0]
 800469a:	6a21      	ldr	r1, [r4, #32]
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	d030      	beq.n	8004702 <__sflush_r+0x92>
 80046a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	0759      	lsls	r1, r3, #29
 80046a6:	d505      	bpl.n	80046b4 <__sflush_r+0x44>
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046ae:	b10b      	cbz	r3, 80046b4 <__sflush_r+0x44>
 80046b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046b2:	1ad2      	subs	r2, r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046b8:	6a21      	ldr	r1, [r4, #32]
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b0      	blx	r6
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	d106      	bne.n	80046d2 <__sflush_r+0x62>
 80046c4:	6829      	ldr	r1, [r5, #0]
 80046c6:	291d      	cmp	r1, #29
 80046c8:	d82b      	bhi.n	8004722 <__sflush_r+0xb2>
 80046ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004774 <__sflush_r+0x104>)
 80046cc:	410a      	asrs	r2, r1
 80046ce:	07d6      	lsls	r6, r2, #31
 80046d0:	d427      	bmi.n	8004722 <__sflush_r+0xb2>
 80046d2:	2200      	movs	r2, #0
 80046d4:	6062      	str	r2, [r4, #4]
 80046d6:	04d9      	lsls	r1, r3, #19
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	d504      	bpl.n	80046e8 <__sflush_r+0x78>
 80046de:	1c42      	adds	r2, r0, #1
 80046e0:	d101      	bne.n	80046e6 <__sflush_r+0x76>
 80046e2:	682b      	ldr	r3, [r5, #0]
 80046e4:	b903      	cbnz	r3, 80046e8 <__sflush_r+0x78>
 80046e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80046e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046ea:	602f      	str	r7, [r5, #0]
 80046ec:	b1b9      	cbz	r1, 800471e <__sflush_r+0xae>
 80046ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d002      	beq.n	80046fc <__sflush_r+0x8c>
 80046f6:	4628      	mov	r0, r5
 80046f8:	f7ff fa92 	bl	8003c20 <_free_r>
 80046fc:	2300      	movs	r3, #0
 80046fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004700:	e00d      	b.n	800471e <__sflush_r+0xae>
 8004702:	2301      	movs	r3, #1
 8004704:	4628      	mov	r0, r5
 8004706:	47b0      	blx	r6
 8004708:	4602      	mov	r2, r0
 800470a:	1c50      	adds	r0, r2, #1
 800470c:	d1c9      	bne.n	80046a2 <__sflush_r+0x32>
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0c6      	beq.n	80046a2 <__sflush_r+0x32>
 8004714:	2b1d      	cmp	r3, #29
 8004716:	d001      	beq.n	800471c <__sflush_r+0xac>
 8004718:	2b16      	cmp	r3, #22
 800471a:	d11e      	bne.n	800475a <__sflush_r+0xea>
 800471c:	602f      	str	r7, [r5, #0]
 800471e:	2000      	movs	r0, #0
 8004720:	e022      	b.n	8004768 <__sflush_r+0xf8>
 8004722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004726:	b21b      	sxth	r3, r3
 8004728:	e01b      	b.n	8004762 <__sflush_r+0xf2>
 800472a:	690f      	ldr	r7, [r1, #16]
 800472c:	2f00      	cmp	r7, #0
 800472e:	d0f6      	beq.n	800471e <__sflush_r+0xae>
 8004730:	0793      	lsls	r3, r2, #30
 8004732:	680e      	ldr	r6, [r1, #0]
 8004734:	bf08      	it	eq
 8004736:	694b      	ldreq	r3, [r1, #20]
 8004738:	600f      	str	r7, [r1, #0]
 800473a:	bf18      	it	ne
 800473c:	2300      	movne	r3, #0
 800473e:	eba6 0807 	sub.w	r8, r6, r7
 8004742:	608b      	str	r3, [r1, #8]
 8004744:	f1b8 0f00 	cmp.w	r8, #0
 8004748:	dde9      	ble.n	800471e <__sflush_r+0xae>
 800474a:	6a21      	ldr	r1, [r4, #32]
 800474c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800474e:	4643      	mov	r3, r8
 8004750:	463a      	mov	r2, r7
 8004752:	4628      	mov	r0, r5
 8004754:	47b0      	blx	r6
 8004756:	2800      	cmp	r0, #0
 8004758:	dc08      	bgt.n	800476c <__sflush_r+0xfc>
 800475a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800475e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476c:	4407      	add	r7, r0
 800476e:	eba8 0800 	sub.w	r8, r8, r0
 8004772:	e7e7      	b.n	8004744 <__sflush_r+0xd4>
 8004774:	dfbffffe 	.word	0xdfbffffe

08004778 <_fflush_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	4605      	mov	r5, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b913      	cbnz	r3, 8004788 <_fflush_r+0x10>
 8004782:	2500      	movs	r5, #0
 8004784:	4628      	mov	r0, r5
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	b118      	cbz	r0, 8004792 <_fflush_r+0x1a>
 800478a:	6a03      	ldr	r3, [r0, #32]
 800478c:	b90b      	cbnz	r3, 8004792 <_fflush_r+0x1a>
 800478e:	f7fe ff5f 	bl	8003650 <__sinit>
 8004792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f3      	beq.n	8004782 <_fflush_r+0xa>
 800479a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800479c:	07d0      	lsls	r0, r2, #31
 800479e:	d404      	bmi.n	80047aa <_fflush_r+0x32>
 80047a0:	0599      	lsls	r1, r3, #22
 80047a2:	d402      	bmi.n	80047aa <_fflush_r+0x32>
 80047a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047a6:	f7ff fa04 	bl	8003bb2 <__retarget_lock_acquire_recursive>
 80047aa:	4628      	mov	r0, r5
 80047ac:	4621      	mov	r1, r4
 80047ae:	f7ff ff5f 	bl	8004670 <__sflush_r>
 80047b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047b4:	07da      	lsls	r2, r3, #31
 80047b6:	4605      	mov	r5, r0
 80047b8:	d4e4      	bmi.n	8004784 <_fflush_r+0xc>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	059b      	lsls	r3, r3, #22
 80047be:	d4e1      	bmi.n	8004784 <_fflush_r+0xc>
 80047c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047c2:	f7ff f9f7 	bl	8003bb4 <__retarget_lock_release_recursive>
 80047c6:	e7dd      	b.n	8004784 <_fflush_r+0xc>

080047c8 <fiprintf>:
 80047c8:	b40e      	push	{r1, r2, r3}
 80047ca:	b503      	push	{r0, r1, lr}
 80047cc:	4601      	mov	r1, r0
 80047ce:	ab03      	add	r3, sp, #12
 80047d0:	4805      	ldr	r0, [pc, #20]	@ (80047e8 <fiprintf+0x20>)
 80047d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	f7ff fca3 	bl	8004124 <_vfiprintf_r>
 80047de:	b002      	add	sp, #8
 80047e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e4:	b003      	add	sp, #12
 80047e6:	4770      	bx	lr
 80047e8:	20000018 	.word	0x20000018

080047ec <__swhatbuf_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	460c      	mov	r4, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	2900      	cmp	r1, #0
 80047f6:	b096      	sub	sp, #88	@ 0x58
 80047f8:	4615      	mov	r5, r2
 80047fa:	461e      	mov	r6, r3
 80047fc:	da0d      	bge.n	800481a <__swhatbuf_r+0x2e>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	bf14      	ite	ne
 800480a:	2340      	movne	r3, #64	@ 0x40
 800480c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004810:	2000      	movs	r0, #0
 8004812:	6031      	str	r1, [r6, #0]
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	b016      	add	sp, #88	@ 0x58
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	466a      	mov	r2, sp
 800481c:	f000 f896 	bl	800494c <_fstat_r>
 8004820:	2800      	cmp	r0, #0
 8004822:	dbec      	blt.n	80047fe <__swhatbuf_r+0x12>
 8004824:	9901      	ldr	r1, [sp, #4]
 8004826:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800482a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800482e:	4259      	negs	r1, r3
 8004830:	4159      	adcs	r1, r3
 8004832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004836:	e7eb      	b.n	8004810 <__swhatbuf_r+0x24>

08004838 <__smakebuf_r>:
 8004838:	898b      	ldrh	r3, [r1, #12]
 800483a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800483c:	079d      	lsls	r5, r3, #30
 800483e:	4606      	mov	r6, r0
 8004840:	460c      	mov	r4, r1
 8004842:	d507      	bpl.n	8004854 <__smakebuf_r+0x1c>
 8004844:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	2301      	movs	r3, #1
 800484e:	6163      	str	r3, [r4, #20]
 8004850:	b003      	add	sp, #12
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004854:	ab01      	add	r3, sp, #4
 8004856:	466a      	mov	r2, sp
 8004858:	f7ff ffc8 	bl	80047ec <__swhatbuf_r>
 800485c:	9f00      	ldr	r7, [sp, #0]
 800485e:	4605      	mov	r5, r0
 8004860:	4639      	mov	r1, r7
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff fa50 	bl	8003d08 <_malloc_r>
 8004868:	b948      	cbnz	r0, 800487e <__smakebuf_r+0x46>
 800486a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486e:	059a      	lsls	r2, r3, #22
 8004870:	d4ee      	bmi.n	8004850 <__smakebuf_r+0x18>
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	f043 0302 	orr.w	r3, r3, #2
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	e7e2      	b.n	8004844 <__smakebuf_r+0xc>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	6020      	str	r0, [r4, #0]
 8004882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800488e:	b15b      	cbz	r3, 80048a8 <__smakebuf_r+0x70>
 8004890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f86b 	bl	8004970 <_isatty_r>
 800489a:	b128      	cbz	r0, 80048a8 <__smakebuf_r+0x70>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	431d      	orrs	r5, r3
 80048ac:	81a5      	strh	r5, [r4, #12]
 80048ae:	e7cf      	b.n	8004850 <__smakebuf_r+0x18>

080048b0 <_putc_r>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	460d      	mov	r5, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	4606      	mov	r6, r0
 80048b8:	b118      	cbz	r0, 80048c2 <_putc_r+0x12>
 80048ba:	6a03      	ldr	r3, [r0, #32]
 80048bc:	b90b      	cbnz	r3, 80048c2 <_putc_r+0x12>
 80048be:	f7fe fec7 	bl	8003650 <__sinit>
 80048c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048c4:	07d8      	lsls	r0, r3, #31
 80048c6:	d405      	bmi.n	80048d4 <_putc_r+0x24>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	0599      	lsls	r1, r3, #22
 80048cc:	d402      	bmi.n	80048d4 <_putc_r+0x24>
 80048ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048d0:	f7ff f96f 	bl	8003bb2 <__retarget_lock_acquire_recursive>
 80048d4:	68a3      	ldr	r3, [r4, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	da05      	bge.n	80048ea <_putc_r+0x3a>
 80048de:	69a2      	ldr	r2, [r4, #24]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	db12      	blt.n	800490a <_putc_r+0x5a>
 80048e4:	b2eb      	uxtb	r3, r5
 80048e6:	2b0a      	cmp	r3, #10
 80048e8:	d00f      	beq.n	800490a <_putc_r+0x5a>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	701d      	strb	r5, [r3, #0]
 80048f2:	b2ed      	uxtb	r5, r5
 80048f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048f6:	07da      	lsls	r2, r3, #31
 80048f8:	d405      	bmi.n	8004906 <_putc_r+0x56>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	059b      	lsls	r3, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_putc_r+0x56>
 8004900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004902:	f7ff f957 	bl	8003bb4 <__retarget_lock_release_recursive>
 8004906:	4628      	mov	r0, r5
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	4629      	mov	r1, r5
 800490c:	4622      	mov	r2, r4
 800490e:	4630      	mov	r0, r6
 8004910:	f7fe ffaf 	bl	8003872 <__swbuf_r>
 8004914:	4605      	mov	r5, r0
 8004916:	e7ed      	b.n	80048f4 <_putc_r+0x44>

08004918 <memmove>:
 8004918:	4288      	cmp	r0, r1
 800491a:	b510      	push	{r4, lr}
 800491c:	eb01 0402 	add.w	r4, r1, r2
 8004920:	d902      	bls.n	8004928 <memmove+0x10>
 8004922:	4284      	cmp	r4, r0
 8004924:	4623      	mov	r3, r4
 8004926:	d807      	bhi.n	8004938 <memmove+0x20>
 8004928:	1e43      	subs	r3, r0, #1
 800492a:	42a1      	cmp	r1, r4
 800492c:	d008      	beq.n	8004940 <memmove+0x28>
 800492e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004936:	e7f8      	b.n	800492a <memmove+0x12>
 8004938:	4402      	add	r2, r0
 800493a:	4601      	mov	r1, r0
 800493c:	428a      	cmp	r2, r1
 800493e:	d100      	bne.n	8004942 <memmove+0x2a>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800494a:	e7f7      	b.n	800493c <memmove+0x24>

0800494c <_fstat_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	@ (800496c <_fstat_r+0x20>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	f7fc fc8d 	bl	8001278 <_fstat>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d102      	bne.n	8004968 <_fstat_r+0x1c>
 8004962:	682b      	ldr	r3, [r5, #0]
 8004964:	b103      	cbz	r3, 8004968 <_fstat_r+0x1c>
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	20000ae8 	.word	0x20000ae8

08004970 <_isatty_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	@ (800498c <_isatty_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fc8c 	bl	8001298 <_isatty>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_isatty_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_isatty_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000ae8 	.word	0x20000ae8

08004990 <_sbrk_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d06      	ldr	r5, [pc, #24]	@ (80049ac <_sbrk_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	f7fc fc94 	bl	80012c8 <_sbrk>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_sbrk_r+0x1a>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_sbrk_r+0x1a>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000ae8 	.word	0x20000ae8

080049b0 <abort>:
 80049b0:	b508      	push	{r3, lr}
 80049b2:	2006      	movs	r0, #6
 80049b4:	f000 f85a 	bl	8004a6c <raise>
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fc fc0d 	bl	80011d8 <_exit>

080049be <_realloc_r>:
 80049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	4680      	mov	r8, r0
 80049c4:	4615      	mov	r5, r2
 80049c6:	460c      	mov	r4, r1
 80049c8:	b921      	cbnz	r1, 80049d4 <_realloc_r+0x16>
 80049ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	4611      	mov	r1, r2
 80049d0:	f7ff b99a 	b.w	8003d08 <_malloc_r>
 80049d4:	b92a      	cbnz	r2, 80049e2 <_realloc_r+0x24>
 80049d6:	f7ff f923 	bl	8003c20 <_free_r>
 80049da:	2400      	movs	r4, #0
 80049dc:	4620      	mov	r0, r4
 80049de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e2:	f000 f85f 	bl	8004aa4 <_malloc_usable_size_r>
 80049e6:	4285      	cmp	r5, r0
 80049e8:	4606      	mov	r6, r0
 80049ea:	d802      	bhi.n	80049f2 <_realloc_r+0x34>
 80049ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049f0:	d8f4      	bhi.n	80049dc <_realloc_r+0x1e>
 80049f2:	4629      	mov	r1, r5
 80049f4:	4640      	mov	r0, r8
 80049f6:	f7ff f987 	bl	8003d08 <_malloc_r>
 80049fa:	4607      	mov	r7, r0
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0ec      	beq.n	80049da <_realloc_r+0x1c>
 8004a00:	42b5      	cmp	r5, r6
 8004a02:	462a      	mov	r2, r5
 8004a04:	4621      	mov	r1, r4
 8004a06:	bf28      	it	cs
 8004a08:	4632      	movcs	r2, r6
 8004a0a:	f7ff f8dc 	bl	8003bc6 <memcpy>
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4640      	mov	r0, r8
 8004a12:	f7ff f905 	bl	8003c20 <_free_r>
 8004a16:	463c      	mov	r4, r7
 8004a18:	e7e0      	b.n	80049dc <_realloc_r+0x1e>

08004a1a <_raise_r>:
 8004a1a:	291f      	cmp	r1, #31
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4605      	mov	r5, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	d904      	bls.n	8004a2e <_raise_r+0x14>
 8004a24:	2316      	movs	r3, #22
 8004a26:	6003      	str	r3, [r0, #0]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
 8004a2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a30:	b112      	cbz	r2, 8004a38 <_raise_r+0x1e>
 8004a32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a36:	b94b      	cbnz	r3, 8004a4c <_raise_r+0x32>
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 f831 	bl	8004aa0 <_getpid_r>
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4601      	mov	r1, r0
 8004a42:	4628      	mov	r0, r5
 8004a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a48:	f000 b818 	b.w	8004a7c <_kill_r>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d00a      	beq.n	8004a66 <_raise_r+0x4c>
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	d103      	bne.n	8004a5c <_raise_r+0x42>
 8004a54:	2316      	movs	r3, #22
 8004a56:	6003      	str	r3, [r0, #0]
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e7e7      	b.n	8004a2c <_raise_r+0x12>
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004a62:	4620      	mov	r0, r4
 8004a64:	4798      	blx	r3
 8004a66:	2000      	movs	r0, #0
 8004a68:	e7e0      	b.n	8004a2c <_raise_r+0x12>
	...

08004a6c <raise>:
 8004a6c:	4b02      	ldr	r3, [pc, #8]	@ (8004a78 <raise+0xc>)
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f7ff bfd2 	b.w	8004a1a <_raise_r>
 8004a76:	bf00      	nop
 8004a78:	20000018 	.word	0x20000018

08004a7c <_kill_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d07      	ldr	r5, [pc, #28]	@ (8004a9c <_kill_r+0x20>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	f7fc fb95 	bl	80011b8 <_kill>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d102      	bne.n	8004a98 <_kill_r+0x1c>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	b103      	cbz	r3, 8004a98 <_kill_r+0x1c>
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000ae8 	.word	0x20000ae8

08004aa0 <_getpid_r>:
 8004aa0:	f7fc bb82 	b.w	80011a8 <_getpid>

08004aa4 <_malloc_usable_size_r>:
 8004aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa8:	1f18      	subs	r0, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfbc      	itt	lt
 8004aae:	580b      	ldrlt	r3, [r1, r0]
 8004ab0:	18c0      	addlt	r0, r0, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
